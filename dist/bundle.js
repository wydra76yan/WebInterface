!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=39)}([function(e,t,n){"use strict";e.exports=n(29)},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),u=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,c=0,f=[],s=n(33);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],t))}else{var u=[];for(a=0;a<r.parts.length;a++)u.push(y(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:u}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function h(e,t){var n=u(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=u(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",g(t,e.attrs),h(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=l||(l=v(t)),r=w.bind(null,n,a,!1),o=w.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",g(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=s(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(u=i[a.id]).refs--,r.push(u)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var u;if(0===(u=r[o]).refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete i[u.id]}}}};var b,_=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=_(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(24)},function(e,t,n){var r=n(17);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(1)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r=n(26);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(1)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(0));n(5);var i=a(n(25));function a(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.createTasks=n.createTasks.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"delete",value:function(e){this.props.delete(e)}},{key:"like",value:function(e){this.props.like(e)}},{key:"createTasks",value:function(e){var t=this;return o.default.createElement("div",{className:"todo-item","data-empty-message":"No TODOs",key:e.key},o.default.createElement("div",{className:"todo-item__top-todo-section"},o.default.createElement("div",{className:"todo-item__top-left-todo-section"},o.default.createElement("p",{class:"todo-item__title"},e.text),o.default.createElement("p",{class:"todo-item__description"},e.description)),o.default.createElement("div",{className:"todo-item__top-right-todo-section"},o.default.createElement("i",{className:"fas fa-times",onClick:function(){return t.delete(e.key)}}),o.default.createElement("span",{className:"todo-item__like"},e.isLiked?o.default.createElement("i",{className:"fas fa-thumbs-up",onClick:function(){return t.like(e.key)}}):o.default.createElement("i",{className:"fas fa-thumbs-down",onClick:function(){return t.like(e.key)}})),o.default.createElement("i",{className:"fas fa-check "+(e.completed?"fa-check-active":""),onClick:function(){return t.complete(e.key)}}),o.default.createElement("i",{className:"fas fa-edit "+(e.setting?"fa-edit-active":""),onClick:function(){return t.setting(e.key)}}))),e.setting&&o.default.createElement("div",{className:"popup-background"},o.default.createElement("div",{className:"settings-form"},o.default.createElement("div",{className:"edit-form"},o.default.createElement("h1",null,"Edit"),o.default.createElement("form",{className:"edit-form__input-form",onSubmit:function(){return t.edit(e.key)}},o.default.createElement("h2",null,"Title"),o.default.createElement("input",{ref:function(e){return t._inputTitle=e},defaultValue:e.text}),o.default.createElement("h2",null,"Description"),o.default.createElement("input",{ref:function(e){return t._inputDescription=e},defaultValue:e.description}),o.default.createElement("button",{type:"submit"}))),o.default.createElement("div",{className:"comments-form"},o.default.createElement("form",{className:"comments-form__input-form",onSubmit:function(){return t.addComment(e.key)}},o.default.createElement("h1",{className:"cmnts"},"Comments"),o.default.createElement("input",{ref:function(e){return t._inputComment=e},name:"comment",placeholder:"Enter comment"})),o.default.createElement("ul",{className:"comments-form__comments-list"},e.comments.map(function(e){return o.default.createElement("li",null,e)}))),o.default.createElement("button",{onClick:function(){return t.setting(e.key)}}," Close "))))}},{key:"render",value:function(){var e=[this.props.entries];console.log(e);var t=e.map(this.createTasks);return localStorage.setItem("items",JSON.stringify(e)),document.getElementsByClassName("todo-item-list").innerHTML=localStorage.getItem("items"),t&&t.length?o.default.createElement("div",{className:"todo-list-form"},o.default.createElement("h1",null,"TODO List"),o.default.createElement("ul",{className:"todo-item-list"},o.default.createElement(i.default,{duration:250,easing:"ease-out"},t))):o.default.createElement("span",{className:"no-todo-placeholder"},"No TODOs")}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=i(n(0));i(n(6));function i(e){return e&&e.__esModule?e:{default:e}}n(4);var a=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._inputTitle=o.default.createRef(),n._inputDescription=o.default.createRef(),n.state={items:JSON.parse(localStorage.getItem("items"))},n.addItem=n.addItem.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"addItem",value:function(e,t){if(""!==this._inputTitle.value&&""!==this._inputDescription.value){var n=this._inputTitle.value,r=this._inputDescription.value;this._inputTitle.value="",this._inputDescription.value="",this.props.addItem(n,r)}event.preventDefault()}},{key:"render",value:function(){return o.default.createElement("div",{className:"todo-form"},o.default.createElement("form",{className:"todo-form__input-form",onSubmit:this.addItem},o.default.createElement("h1",null,"New TODO Item"),o.default.createElement("input",{ref:this._inputText,placeholder:"Enter task"}),o.default.createElement("input",{ref:this._inputDescription,placeholder:"Enter description"}),o.default.createElement("button",{type:"submit"},"Add")))}}]),t}();t.default=a},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))o.call(n,c)&&(u[c]=n[c]);if(r){a=r(n);for(var f=0;f<a.length;f++)i.call(n,a[f])&&(u[a[f]]=n[a[f]])}}return u}},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,".footer{\r\n  color: #C7E3C8;\r\n  background: #43A047;\r\n  max-height: 10vh;\r\n  font-size: 35px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-top-left-radius: 25px;\r\n  border-top-right-radius: 25px;\r\n}\r\n",""])},function(e,t,n){var r=n(11);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(1)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=(r=i)&&r.__esModule?r:{default:r};n(12);var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"render",value:function(){return a.default.createElement("footer",{class:"footer"},"EPAM")}}]),t}();t.default=u},function(e,t,n){"use strict";e.exports={addItem:function(e,t){var n={title:e,description:t,isLiked:!1,completed:!1,setting:!1,key:Date.now(),comments:[]};console.log(n),this.setState(function(e){return{items:e.items.concat(n)}})},likeItem:function(e){var t=this.findItem(e),n=this.state.items[t];return n.isLiked=!n.isLiked,this.itemSet(t)},deleteItem:function(e){var t=this.state.items.filter(function(t){return t.key!==e});this.setState({items:t})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(0));n(5);var i=u(n(6)),a=n(14);function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={items:JSON.parse(localStorage.getItem("items"))},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"handleLike",value:function(e){(0,a.likeItem)(e)}},{key:"handleAddingItem",value:function(e,t){(0,a.addItem)(e,t)}},{key:"handleRemoveTodoElem",value:function(e){(0,a.deleteItem)(e)}},{key:"render",value:function(){return o.default.createElement(i.default,{entries:this.state.items,like:this.state.handleLike,delete:this.state.handleRemoveTodoElem,addItem:this.state.handleAddingItem})}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(0));n(4);var i=u(n(7)),a=u(n(15));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("div",{className:"content"},o.default.createElement(i.default,null),o.default.createElement(a.default,null))}}]),t}();t.default=l},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,".content{\r\n  padding: 15px;\r\n  background-color: #DDDDDD;\r\n  min-height: 80vh;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n}\r\n\r\n.todo-form__input-form{\r\n  border-radius: 25px;\r\n  background:  #43A047;\r\n  color: #E1F0E2;\r\n  padding: 10px;\r\n  height: 75vh;\r\n  margin:10px;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\n\r\n\r\n.todo-form{\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  margin:10px;\r\n}\r\n\r\n\r\n\r\ninput{\r\n   margin: 10px;\r\n   padding: 5px;\r\n   font-size: 16px;\r\n   background-color: #E1F0E2;\r\n   color: #43A047;\r\n }\r\n\r\nbutton{\r\n   border-radius: 25px;\r\n   font-size: 16px;\r\n   background-color: #E1F0E2;\r\n   color: #43A047;\r\n }\r\n",""])},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(19);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.1
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(23),i=n(10),a=n(8),u=n(22),l=n(21),c=n(20),f=n(9);function s(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}r||s("227");var p={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,u,l){(function(e,t,n,r,o,i,a,u,l){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(p,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,u,l){if(p.invokeGuardedCallback.apply(this,arguments),p.hasCaughtError()){var c=p.clearCaughtError();p._hasRethrowError||(p._hasRethrowError=!0,p._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(p._hasRethrowError){var e=p._rethrowError;throw p._rethrowError=null,p._hasRethrowError=!1,e}}.apply(p,arguments)},hasCaughtError:function(){return p._hasCaughtError},clearCaughtError:function(){if(p._hasCaughtError){var e=p._caughtError;return p._caughtError=null,p._hasCaughtError=!1,e}s("198")}};var d=null,h={};function m(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||s("96",e),!g[n])for(var r in t.extractEvents||s("97",e),g[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,u=r;y.hasOwnProperty(u)&&s("99",u),y[u]=i;var l=i.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&v(l[o],a,u);o=!0}else i.registrationName?(v(i.registrationName,a,u),o=!0):o=!1;o||s("98",r,e)}}}function v(e,t,n){b[e]&&s("100",e),b[e]=t,_[e]=t.eventTypes[n].dependencies}var g=[],y={},b={},_={};function w(e){d&&s("101"),d=Array.prototype.slice.call(e),m()}function x(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&s("102",t),h[t]=r,n=!0)}n&&m()}var C=Object.freeze({plugins:g,eventNameDispatchConfigs:y,registrationNameModules:b,registrationNameDependencies:_,possibleRegistrationNames:null,injectEventPluginOrder:w,injectEventPluginsByName:x}),k=null,E=null,T=null;function S(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=T(r),p.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function P(e,t){return null==t&&s("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function O(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var N=null;function I(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)S(e,t,n[o],r[o]);else n&&S(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function D(e){return I(e,!0)}function A(e){return I(e,!1)}var j={injectEventPluginOrder:w,injectEventPluginsByName:x};function R(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&s("231",t,typeof n),n)}function F(e,t){null!==e&&(N=P(N,e)),e=N,N=null,e&&(O(e,t?D:A),N&&s("95"),p.rethrowCaughtError())}function M(e,t,n,r){for(var o=null,i=0;i<g.length;i++){var a=g[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=P(o,a))}F(o,!1)}var U=Object.freeze({injection:j,getListener:R,runEventsInBatch:F,runExtractedEventsInBatch:M}),L=Math.random().toString(36).slice(2),z="__reactInternalInstance$"+L,B="__reactEventHandlers$"+L;function H(e){if(e[z])return e[z];for(;!e[z];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[z]).tag||6===e.tag?e:null}function W(e){if(5===e.tag||6===e.tag)return e.stateNode;s("33")}function V(e){return e[B]||null}var $=Object.freeze({precacheFiberNode:function(e,t){t[z]=e},getClosestInstanceFromNode:H,getInstanceFromNode:function(e){return!(e=e[z])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:W,getFiberCurrentPropsFromNode:V,updateFiberProps:function(e,t){e[B]=t}});function K(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function q(e,t,n){for(var r=[];e;)r.push(e),e=K(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Q(e,t,n){(t=R(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function G(e){e&&e.dispatchConfig.phasedRegistrationNames&&q(e._targetInst,Q,e)}function Y(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;q(t=t?K(t):null,Q,e)}}function Z(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=R(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function X(e){e&&e.dispatchConfig.registrationName&&Z(e._targetInst,null,e)}function J(e){O(e,G)}function ee(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,u=o;u;u=K(u))a++;u=0;for(var l=i;l;l=K(l))u++;for(;0<a-u;)o=K(o),a--;for(;0<u-a;)i=K(i),u--;for(;a--;){if(o===i||o===i.alternate)break e;o=K(o),i=K(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=K(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=K(r);for(r=0;r<o.length;r++)Z(o[r],"bubbled",e);for(e=n.length;0<e--;)Z(n[e],"captured",t)}var te=Object.freeze({accumulateTwoPhaseDispatches:J,accumulateTwoPhaseDispatchesSkipTarget:function(e){O(e,Y)},accumulateEnterLeaveDispatches:ee,accumulateDirectDispatches:function(e){O(e,X)}}),ne=null;function re(){return!ne&&o.canUseDOM&&(ne="textContent"in document.documentElement?"textContent":"innerText"),ne}var oe={_root:null,_startText:null,_fallbackText:null};function ie(){if(oe._fallbackText)return oe._fallbackText;var e,t,n=oe._startText,r=n.length,o=ae(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe._fallbackText=o.slice(e,1<t?1-t:void 0),oe._fallbackText}function ae(){return"value"in oe._root?oe._root.value:oe._root[re()]}var ue="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),le={type:null,target:null,currentTarget:a.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ce(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?a.thatReturnsTrue:a.thatReturnsFalse,this.isPropagationStopped=a.thatReturnsFalse,this}function fe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function se(e){e instanceof this||s("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function pe(e){e.eventPool=[],e.getPooled=fe,e.release=se}i(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=a.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=a.thatReturnsTrue)},persist:function(){this.isPersistent=a.thatReturnsTrue},isPersistent:a.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ue.length;t++)this[ue[t]]=null}}),ce.Interface=le,ce.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,pe(n),n},pe(ce);var de=ce.extend({data:null}),he=ce.extend({data:null}),me=[9,13,27,32],ve=o.canUseDOM&&"CompositionEvent"in window,ge=null;o.canUseDOM&&"documentMode"in document&&(ge=document.documentMode);var ye=o.canUseDOM&&"TextEvent"in window&&!ge,be=o.canUseDOM&&(!ve||ge&&8<ge&&11>=ge),_e=String.fromCharCode(32),we={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},xe=!1;function Ce(e,t){switch(e){case"topKeyUp":return-1!==me.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function ke(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ee=!1;var Te={eventTypes:we,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ve)e:{switch(e){case"topCompositionStart":o=we.compositionStart;break e;case"topCompositionEnd":o=we.compositionEnd;break e;case"topCompositionUpdate":o=we.compositionUpdate;break e}o=void 0}else Ee?Ce(e,n)&&(o=we.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=we.compositionStart);return o?(be&&(Ee||o!==we.compositionStart?o===we.compositionEnd&&Ee&&(i=ie()):(oe._root=r,oe._startText=ae(),Ee=!0)),o=de.getPooled(o,t,n,r),i?o.data=i:null!==(i=ke(n))&&(o.data=i),J(o),i=o):i=null,(e=ye?function(e,t){switch(e){case"topCompositionEnd":return ke(t);case"topKeyPress":return 32!==t.which?null:(xe=!0,_e);case"topTextInput":return(e=t.data)===_e&&xe?null:e;default:return null}}(e,n):function(e,t){if(Ee)return"topCompositionEnd"===e||!ve&&Ce(e,t)?(e=ie(),oe._root=null,oe._startText=null,oe._fallbackText=null,Ee=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return be?null:t.data;default:return null}}(e,n))?((t=he.getPooled(we.beforeInput,t,n,r)).data=e,J(t)):t=null,null===i?t:null===t?i:[i,t]}},Se=null,Pe=null,Oe=null;function Ne(e){if(e=E(e)){Se&&"function"==typeof Se.restoreControlledState||s("194");var t=k(e.stateNode);Se.restoreControlledState(e.stateNode,e.type,t)}}var Ie={injectFiberControlledHostComponent:function(e){Se=e}};function De(e){Pe?Oe?Oe.push(e):Oe=[e]:Pe=e}function Ae(){return null!==Pe||null!==Oe}function je(){if(Pe){var e=Pe,t=Oe;if(Oe=Pe=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}var Re=Object.freeze({injection:Ie,enqueueStateRestore:De,needsStateRestore:Ae,restoreStateIfNeeded:je});function Fe(e,t){return e(t)}function Me(e,t,n){return e(t,n)}function Ue(){}var Le=!1;function ze(e,t){if(Le)return e(t);Le=!0;try{return Fe(e,t)}finally{Le=!1,Ae()&&(Ue(),je())}}var Be={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function He(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Be[e.type]:"textarea"===t}function We(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ve(e,t){return!(!o.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function $e(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ke(e){e._valueTracker||(e._valueTracker=function(e){var t=$e(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function qe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$e(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Qe=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Ge="function"==typeof Symbol&&Symbol.for,Ye=Ge?Symbol.for("react.element"):60103,Ze=Ge?Symbol.for("react.call"):60104,Xe=Ge?Symbol.for("react.return"):60105,Je=Ge?Symbol.for("react.portal"):60106,et=Ge?Symbol.for("react.fragment"):60107,tt=Ge?Symbol.for("react.strict_mode"):60108,nt=Ge?Symbol.for("react.provider"):60109,rt=Ge?Symbol.for("react.context"):60110,ot=Ge?Symbol.for("react.async_mode"):60111,it=Ge?Symbol.for("react.forward_ref"):60112,at="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||void 0===e?null:"function"==typeof(e=at&&e[at]||e["@@iterator"])?e:null}function lt(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case et:return"ReactFragment";case Je:return"ReactPortal";case Ze:return"ReactCall";case Xe:return"ReactReturn"}return null}function ct(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=lt(e),i=null;n&&(i=lt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,st={},pt={};function dt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){ht[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new dt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){ht[e]=new dt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new dt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){ht[e]=new dt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-\:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function gt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!pt.hasOwnProperty(e)||!st.hasOwnProperty(e)&&(ft.test(e)?pt[e]=!0:(st[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function yt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function bt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=kt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function _t(e,t){null!=(t=t.checked)&&gt(e,"checked",t,!1)}function wt(e,t){_t(e,t);var n=kt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?Ct(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ct(e,t.type,kt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function xt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function Ct(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function kt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,vt);ht[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,vt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,vt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new dt("tabIndex",1,!1,"tabindex",null);var Et={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Tt(e,t,n){return(e=ce.getPooled(Et.change,e,t,n)).type="change",De(n),J(e),e}var St=null,Pt=null;function Ot(e){F(e,!1)}function Nt(e){if(qe(W(e)))return e}function It(e,t){if("topChange"===e)return t}var Dt=!1;function At(){St&&(St.detachEvent("onpropertychange",jt),Pt=St=null)}function jt(e){"value"===e.propertyName&&Nt(Pt)&&ze(Ot,e=Tt(Pt,e,We(e)))}function Rt(e,t,n){"topFocus"===e?(At(),Pt=n,(St=t).attachEvent("onpropertychange",jt)):"topBlur"===e&&At()}function Ft(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Nt(Pt)}function Mt(e,t){if("topClick"===e)return Nt(t)}function Ut(e,t){if("topInput"===e||"topChange"===e)return Nt(t)}o.canUseDOM&&(Dt=Ve("input")&&(!document.documentMode||9<document.documentMode));var Lt={eventTypes:Et,_isInputEventSupported:Dt,extractEvents:function(e,t,n,r){var o=t?W(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=It:He(o)?Dt?i=Ut:(i=Ft,a=Rt):!(u=o.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type||(i=Mt),i&&(i=i(e,t)))return Tt(i,n,r);a&&a(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&Ct(o,"number",o.value)}},zt=ce.extend({view:null,detail:null}),Bt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Bt[e])&&!!t[e]}function Wt(){return Ht}var Vt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Wt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),$t={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Kt={eventTypes:$t,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?H(t):null):e=null,e===t)return null;var i=null==e?o:W(e);o=null==t?o:W(t);var a=Vt.getPooled($t.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=Vt.getPooled($t.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,ee(a,n,e,t),[a,n]}};function qt(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Qt(e){return!!(e=e._reactInternalFiber)&&2===qt(e)}function Gt(e){2!==qt(e)&&s("188")}function Yt(e){var t=e.alternate;if(!t)return 3===(t=qt(e))&&s("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return Gt(o),e;if(a===r)return Gt(o),t;a=a.sibling}s("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}a||s("189")}}n.alternate!==r&&s("190")}return 3!==n.tag&&s("188"),n.stateNode.current===n?e:t}var Zt=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Xt=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Jt=zt.extend({relatedTarget:null});function en(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var tn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},nn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rn=zt.extend({key:function(e){if(e.key){var t=tn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=en(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?nn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Wt,charCode:function(e){return"keypress"===e.type?en(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?en(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),on=Vt.extend({dataTransfer:null}),an=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Wt}),un=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ln=Vt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),cn={},fn={};function sn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},cn[e]=t,fn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){sn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){sn(e,!1)});var pn={eventTypes:cn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=fn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=fn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===en(n))return null;case"topKeyDown":case"topKeyUp":e=rn;break;case"topBlur":case"topFocus":e=Jt;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Vt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=on;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=an;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Zt;break;case"topTransitionEnd":e=un;break;case"topScroll":e=zt;break;case"topWheel":e=ln;break;case"topCopy":case"topCut":case"topPaste":e=Xt;break;default:e=ce}return J(t=e.getPooled(o,t,n,r)),t}},dn=pn.isInteractiveTopLevelEventType,hn=[];function mn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=H(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],M(e.topLevelType,t,e.nativeEvent,We(e.nativeEvent))}var vn=!0;function gn(e){vn=!!e}function yn(e,t,n){if(!n)return null;e=(dn(e)?_n:wn).bind(null,e),n.addEventListener(t,e,!1)}function bn(e,t,n){if(!n)return null;e=(dn(e)?_n:wn).bind(null,e),n.addEventListener(t,e,!0)}function _n(e,t){Me(wn,e,t)}function wn(e,t){if(vn){var n=We(t);if(null!==(n=H(n))&&"number"==typeof n.tag&&2!==qt(n)&&(n=null),hn.length){var r=hn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{ze(mn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>hn.length&&hn.push(e)}}}var xn=Object.freeze({get _enabled(){return vn},setEnabled:gn,isEnabled:function(){return vn},trapBubbledEvent:yn,trapCapturedEvent:bn,dispatchEvent:wn});function Cn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var kn={animationend:Cn("Animation","AnimationEnd"),animationiteration:Cn("Animation","AnimationIteration"),animationstart:Cn("Animation","AnimationStart"),transitionend:Cn("Transition","TransitionEnd")},En={},Tn={};function Sn(e){if(En[e])return En[e];if(!kn[e])return e;var t,n=kn[e];for(t in n)if(n.hasOwnProperty(t)&&t in Tn)return En[e]=n[t];return e}o.canUseDOM&&(Tn=document.createElement("div").style,"AnimationEvent"in window||(delete kn.animationend.animation,delete kn.animationiteration.animation,delete kn.animationstart.animation),"TransitionEvent"in window||delete kn.transitionend.transition);var Pn={topAnimationEnd:Sn("animationend"),topAnimationIteration:Sn("animationiteration"),topAnimationStart:Sn("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:Sn("transitionend"),topWheel:"wheel"},On={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Nn={},In=0,Dn="_reactListenersID"+(""+Math.random()).slice(2);function An(e){return Object.prototype.hasOwnProperty.call(e,Dn)||(e[Dn]=In++,Nn[e[Dn]]={}),Nn[e[Dn]]}function jn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Rn(e,t){var n,r=jn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=jn(r)}}function Fn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Mn=o.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Un={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Ln=null,zn=null,Bn=null,Hn=!1;function Wn(e,t){if(Hn||null==Ln||Ln!==u())return null;var n=Ln;return"selectionStart"in n&&Fn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Bn&&l(Bn,n)?null:(Bn=n,(e=ce.getPooled(Un.select,zn,e,t)).type="select",e.target=Ln,J(e),e)}var Vn={eventTypes:Un,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=An(i),o=_.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?W(t):window,e){case"topFocus":(He(i)||"true"===i.contentEditable)&&(Ln=i,zn=t,Bn=null);break;case"topBlur":Bn=zn=Ln=null;break;case"topMouseDown":Hn=!0;break;case"topContextMenu":case"topMouseUp":return Hn=!1,Wn(n,r);case"topSelectionChange":if(Mn)break;case"topKeyDown":case"topKeyUp":return Wn(n,r)}return null}};function $n(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Kn(e,t,n){var r=e.alternate;return null===r?((r=new $n(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function qn(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case et:return Qn(e.children,t,n,o);case ot:i=11,t|=3;break;case tt:i=11,t|=2;break;case Ze:i=7;break;case Xe:i=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case nt:i=13;break;case rt:i=12;break;case it:i=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;s("130",null==r?r:typeof r,"")}else s("130",null==r?r:typeof r,"")}return(t=new $n(i,e,o,t)).type=r,t.expirationTime=n,t}function Qn(e,t,n,r){return(e=new $n(10,e,r,t)).expirationTime=n,e}function Gn(e,t,n){return(e=new $n(6,e,null,t)).expirationTime=n,e}function Yn(e,t,n){return(t=new $n(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}j.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=$.getFiberCurrentPropsFromNode,E=$.getInstanceFromNode,T=$.getNodeFromInstance,j.injectEventPluginsByName({SimpleEventPlugin:pn,EnterLeaveEventPlugin:Kt,ChangeEventPlugin:Lt,SelectEventPlugin:Vn,BeforeInputEventPlugin:Te});var Zn=null,Xn=null;function Jn(e){return function(t){try{return e(t)}catch(e){}}}function er(e){"function"==typeof Zn&&Zn(e)}function tr(e){"function"==typeof Xn&&Xn(e)}function nr(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function rr(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var or=void 0,ir=void 0;function ar(e){or=ir=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=nr(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=nr(null)):e=null,or=n,ir=e!==n?e:null}function ur(e,t){ar(e),e=or;var n=ir;null===n?rr(e,t):null===e.last||null===n.last?(rr(e,t),rr(n,t)):(rr(e,t),n.last=t)}function lr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function cr(e,t,n,r,o,a){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var u=!0,l=n.first,c=!1;null!==l;){var f=l.expirationTime;if(f>a){var s=n.expirationTime;(0===s||s>f)&&(n.expirationTime=f),c||(c=!0,n.baseState=e)}else c||(n.first=l.next,null===n.first&&(n.last=null)),l.isReplace?(e=lr(l,r,e,o),u=!0):(f=lr(l,r,e,o))&&(e=u?i({},e,f):i(e,f),u=!1),l.isForced&&(n.hasForceUpdate=!0),null!==l.callback&&(null===(f=n.callbackList)&&(f=n.callbackList=[]),f.push(l)),null!==l.capturedValue&&(null===(f=n.capturedValues)?n.capturedValues=[l.capturedValue]:f.push(l.capturedValue));l=l.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),c||(n.baseState=e),e}function fr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&s("191",o),o.call(t)}}var sr=Array.isArray;function pr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&s("110"),r=n.stateNode),r||s("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&s("148"),n._owner||s("254",e)}return e}function dr(e,t){"textarea"!==e.type&&s("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function hr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Kn(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Gn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=pr(e,t,n),r.return=e,r):((r=qn(n,e.mode,r)).ref=pr(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Yn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function f(e,t,n,r,i){return null===t||10!==t.tag?((t=Qn(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Gn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ye:return(n=qn(t,e.mode,n)).ref=pr(e,null,t),n.return=e,n;case Je:return(t=Yn(t,e.mode,n)).return=e,t}if(sr(t)||ut(t))return(t=Qn(t,e.mode,n,null)).return=e,t;dr(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ye:return n.key===o?n.type===et?f(e,t,n.props.children,r,o):l(e,t,n,r):null;case Je:return n.key===o?c(e,t,n,r):null}if(sr(n)||ut(n))return null!==o?null:f(e,t,n,r,null);dr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ye:return e=e.get(null===r.key?n:r.key)||null,r.type===et?f(t,e,r.props.children,o,r.key):l(t,e,r,o);case Je:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(sr(r)||ut(r))return f(t,e=e.get(n)||null,r,o,null);dr(t,r)}return null}function m(o,a,u,l){for(var c=null,f=null,s=a,m=a=0,v=null;null!==s&&m<u.length;m++){s.index>m?(v=s,s=null):v=s.sibling;var g=d(o,s,u[m],l);if(null===g){null===s&&(s=v);break}e&&s&&null===g.alternate&&t(o,s),a=i(g,a,m),null===f?c=g:f.sibling=g,f=g,s=v}if(m===u.length)return n(o,s),c;if(null===s){for(;m<u.length;m++)(s=p(o,u[m],l))&&(a=i(s,a,m),null===f?c=s:f.sibling=s,f=s);return c}for(s=r(o,s);m<u.length;m++)(v=h(s,o,m,u[m],l))&&(e&&null!==v.alternate&&s.delete(null===v.key?m:v.key),a=i(v,a,m),null===f?c=v:f.sibling=v,f=v);return e&&s.forEach(function(e){return t(o,e)}),c}function v(o,a,u,l){var c=ut(u);"function"!=typeof c&&s("150"),null==(u=c.call(u))&&s("151");for(var f=c=null,m=a,v=a=0,g=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=d(o,m,y.value,l);if(null===b){m||(m=g);break}e&&m&&null===b.alternate&&t(o,m),a=i(b,a,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=p(o,y.value,l))&&(a=i(y,a,v),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;v++,y=u.next())null!==(y=h(m,o,v,y.value,l))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),a=i(y,a,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach(function(e){return t(o,e)}),c}return function(e,r,i,u){"object"==typeof i&&null!==i&&i.type===et&&null===i.key&&(i=i.props.children);var l="object"==typeof i&&null!==i;if(l)switch(i.$$typeof){case Ye:e:{var c=i.key;for(l=r;null!==l;){if(l.key===c){if(10===l.tag?i.type===et:l.type===i.type){n(e,l.sibling),(r=o(l,i.type===et?i.props.children:i.props,u)).ref=pr(e,l,i),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}i.type===et?((r=Qn(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=qn(i,e.mode,u)).ref=pr(e,r,i),u.return=e,e=u)}return a(e);case Je:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Yn(i,e.mode,u)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),r=o(r,i,u)):(n(e,r),r=Gn(i,e.mode,u)),r.return=e,a(e=r);if(sr(i))return m(e,r,i,u);if(ut(i))return v(e,r,i,u);if(l&&dr(e,i),void 0===i)switch(e.tag){case 2:case 1:s("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var mr=hr(!0),vr=hr(!1);function gr(e,t,n,r,o,a,u){function c(e,t,n){p(e,t,n,t.expirationTime)}function p(e,t,n,r){t.child=null===e?vr(t,null,n,r):mr(t,e.child,n,r)}function d(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,i){if(d(e,t),!n&&!o)return r&&P(t,!1),g(e,t);n=t.stateNode,Qe.current=t;var a=o?null:n.render();return t.effectTag|=1,o&&(p(e,t,null,i),t.child=null),p(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,r&&P(t,!0),t.child}function m(e){var t=e.stateNode;t.pendingContext?S(e,t.pendingContext,t.pendingContext!==t.context):t.context&&S(e,t.context,!1),w(e,t.containerInfo)}function v(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function g(e,t){if(null!==e&&t.child!==e.child&&s("153"),null!==t.child){var n=Kn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Kn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var y=e.shouldSetTextContent,b=e.shouldDeprioritizeSubtree,_=t.pushHostContext,w=t.pushHostContainer,x=r.pushProvider,C=n.getMaskedContext,k=n.getUnmaskedContext,E=n.hasContextChanged,T=n.pushContextProvider,S=n.pushTopLevelContextObject,P=n.invalidateContextProvider,O=o.enterHydrationState,N=o.resetHydrationState,I=o.tryToClaimNextHydratableInstance,D=(e=function(e,t,n,r,o){function a(e,t,n,r,o,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!(e.prototype&&e.prototype.isPureReactComponent&&l(t,n)&&l(r,o))}function u(e,t){t.updater=g,e.stateNode=t,t._reactInternalFiber=e}function c(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&g.enqueueReplaceState(t,t.state,null)}function s(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var p=e.cacheContext,d=e.getMaskedContext,h=e.getUnmaskedContext,m=e.isContextConsumer,v=e.hasContextChanged,g={isMounted:Qt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);ur(e,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);ur(e,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);ur(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:u,callGetDerivedStateFromProps:s,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=m(e),a=o?d(e,r):f,l=null!==(n=new n(t,a)).state&&void 0!==n.state?n.state:null;return u(e,n),e.memoizedState=l,null!==(t=s(e,0,t,l))&&void 0!==t&&(e.memoizedState=i({},e.memoizedState,t)),o&&p(e,r,a),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,i=e.pendingProps,a=h(e);o.props=i,o.state=e.memoizedState,o.refs=f,o.context=d(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&g.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=cr(r,e,n,o,i,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,u=e.stateNode;u.props=e.memoizedProps,u.state=e.memoizedState;var l=e.memoizedProps,f=e.pendingProps,p=u.context,m=h(e);m=d(e,m),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(l!==f||p!==m)&&c(e,u,f,m),p=e.memoizedState,t=null!==e.updateQueue?cr(null,e,e.updateQueue,u,f,t):p;var g=void 0;if(l!==f&&(g=s(e,0,f,t)),null!==g&&void 0!==g){t=null===t||void 0===t?g:i({},t,g);var y=e.updateQueue;null!==y&&(y.baseState=i({},y.baseState,g))}return l!==f||p!==t||v()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((l=a(e,l,f,p,t,m))?(n||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(e.effectTag|=4)):("function"==typeof u.componentDidMount&&(e.effectTag|=4),r(e,f),o(e,t)),u.props=f,u.state=t,u.context=m,l):("function"==typeof u.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var u=t.type,l=t.stateNode;l.props=t.memoizedProps,l.state=t.memoizedState;var f=t.memoizedProps,p=t.pendingProps,m=l.context,g=h(t);g=d(t,g),(u="function"==typeof u.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(f!==p||m!==g)&&c(t,l,p,g),m=t.memoizedState,n=null!==t.updateQueue?cr(e,t,t.updateQueue,l,p,n):m;var y=void 0;if(f!==p&&(y=s(t,0,p,n)),null!==y&&void 0!==y){n=null===n||void 0===n?y:i({},n,y);var b=t.updateQueue;null!==b&&(b.baseState=i({},b.baseState,y))}return f!==p||m!==n||v()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((y=a(t,f,p,m,n,g))?(u||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(p,n,g),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(p,n,g)),"function"==typeof l.componentDidUpdate&&(t.effectTag|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof l.componentDidUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),r(t,p),o(t,n)),l.props=p,l.state=n,l.context=g,y):("function"!=typeof l.componentDidUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,a,u,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,A=e.callGetDerivedStateFromProps,j=e.constructClassInstance,R=e.mountClassInstance,F=e.resumeMountClassInstance,M=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:m(t);break;case 2:T(t);break;case 4:w(t,t.stateNode.containerInfo);break;case 13:x(t)}return null}switch(t.tag){case 0:null!==e&&s("155");var r=t.type,o=t.pendingProps,a=k(t);return r=r(o,a=C(t,a)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(a=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof a.getDerivedStateFromProps&&(null!==(o=A(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=i({},t.memoizedState,o))),o=T(t),D(t,r),R(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,c(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,E()||t.memoizedProps!==n?(r=k(t),o=o(n,r=C(t,r)),t.effectTag|=1,c(e,t,o),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 2:o=T(t),null===e?null===t.stateNode?(j(t,t.pendingProps),R(t,n),r=!0):r=F(t,n):r=M(e,t,n),a=!1;var u=t.updateQueue;return null!==u&&null!==u.capturedValues&&(a=r=!0),h(e,t,r,o,a,n);case 3:e:if(m(t),r=t.updateQueue,null!==r){if(a=t.memoizedState,o=cr(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(a===o){N(),e=g(e,t);break e}r=o.element}a=t.stateNode,(null===e||null===e.child)&&a.hydrate&&O(t)?(t.effectTag|=2,t.child=vr(t,null,r,n)):(N(),c(e,t,r)),t.memoizedState=o,e=t.child}else N(),e=g(e,t);return e;case 5:return _(t),null===e&&I(t),o=t.type,u=t.memoizedProps,r=t.pendingProps,a=null!==e?e.memoizedProps:null,E()||u!==r||((u=1&t.mode&&b(o,r))&&(t.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,y(o,r)?u=null:a&&y(o,a)&&(t.effectTag|=16),d(e,t),1073741823!==n&&1&t.mode&&b(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(c(e,t,u),t.memoizedProps=r,e=t.child)):e=g(e,t),e;case 6:return null===e&&I(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,E()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?vr(t,t.stateNode,r,n):mr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return w(t,t.stateNode.containerInfo),o=t.pendingProps,E()||t.memoizedProps!==o?(null===e?t.child=mr(t,null,o,n):c(e,t,o),t.memoizedProps=o,e=t.child):e=g(e,t),e;case 14:return c(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,E()||t.memoizedProps!==n?(c(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 11:return n=t.pendingProps.children,E()||null!==n&&t.memoizedProps!==n?(c(e,t,n),t.memoizedProps=n,e=t.child):e=g(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps;if(!E()&&i===o)return t.stateNode=0,x(t),g(e,t);var a=o.value;if(t.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return t.stateNode=0,x(t),g(e,t);a=0}else{var u=i.value;if(u===a&&(0!==u||1/u==1/a)||u!=u&&a!=a){if(i.children===o.children)return t.stateNode=0,x(t),g(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823,0==(a|=0)){if(i.children===o.children)return t.stateNode=0,x(t),g(e,t)}else v(t,r,a,n)}return t.stateNode=a,x(t),c(e,t,o.children),t.child}(e,t,n);case 12:r=t.type,a=t.pendingProps;var l=t.memoizedProps;return o=r._currentValue,u=r._changedBits,E()||0!==u||l!==a?(t.memoizedProps=a,void 0!==(l=a.unstable_observedBits)&&null!==l||(l=1073741823),t.stateNode=l,0!=(u&l)&&v(t,r,u,n),c(e,t,n=(n=a.children)(o)),e=t.child):e=g(e,t),e;default:s("156")}}}}function yr(e,t){var n=t.source;null===t.stack&&ct(n),null!==n&&lt(n),t=t.value,null!==e&&2===e.tag&&lt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var br={};function _r(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)j(e),e=e.return;te=null,ne=0,ee=null,ie=!1}function n(e){return null!==ae&&ae.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=I(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ie=!0;break}e=n}else{if(null!==(e=A(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=N(e.alternate,e,ne);return null===t&&(t=r(e)),Qe.current=null,t}function a(e,n,i){J&&s("243"),J=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=Kn((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==ee&&!k();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){a=!0,E(e);break}var u=(i=ee).return;if(null===u){a=!0,E(e);break}D(u,i,e),ee=r(i)}break}return J=!1,a||null!==ee?null:ie?(e.pendingCommitExpirationTime=n,e.current.alternate):void s("262")}function u(e,t,n,r){ur(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:ct(e)},next:null}),p(t,r)}function l(e,t){e:{J&&!oe&&s("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){u(e,r,t,1),e=void 0;break e}break;case 3:u(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&u(e,e,t,1),e=void 0}return e}function c(e){return e=0!==X?X:J?oe?1:ne:1&e.mode?we?10*(1+((d()+50)/10|0)):25*(1+((d()+500)/25|0)):1,we&&(0===he||e>he)&&(he=e),e}function p(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!J&&0!==ne&&n<ne&&t(),J&&!oe&&te===r||v(r,n),ke>Ce&&s("185")}e=e.return}n=void 0}return n}function d(){return Y=V()-G,2+(Y/10|0)}function h(e,t,n,r,o){var i=X;X=1;try{return e(t,n,r,o)}finally{X=i}}function m(e){if(0!==ce){if(e>ce)return;K(fe)}var t=V()-G;ce=e,fe=$(y,{timeout:10*(e-2)-t})}function v(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===le?(ue=le=e,e.nextScheduledRoot=e):(le=le.nextScheduledRoot=e).nextScheduledRoot=ue;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}se||(be?_e&&(pe=e,de=1,x(e,1,!1)):1===t?b():m(t))}function g(){var e=0,t=null;if(null!==le)for(var n=le,r=ue;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===le)&&s("244"),r===r.nextScheduledRoot){ue=le=r.nextScheduledRoot=null;break}if(r===ue)ue=o=r.nextScheduledRoot,le.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===le){(le=n).nextScheduledRoot=ue,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===le)break;n=r,r=r.nextScheduledRoot}}null!==(n=pe)&&n===t&&1===e?ke++:ke=0,pe=t,de=e}function y(e){_(0,!0,e)}function b(){_(1,!1,null)}function _(e,t,n){if(ye=n,g(),t)for(;null!==pe&&0!==de&&(0===e||e>=de)&&(!me||d()>=de);)x(pe,de,!me),g();else for(;null!==pe&&0!==de&&(0===e||e>=de);)x(pe,de,!1),g();null!==ye&&(ce=0,fe=-1),0!==de&&m(de),ye=null,me=!1,w()}function w(){if(ke=0,null!==xe){var e=xe;xe=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ve||(ve=!0,ge=e)}}}if(ve)throw e=ge,ge=null,ve=!1,e}function x(e,t,n){se&&s("245"),se=!0,n?null!==(n=e.finishedWork)?C(e,n,t):(e.finishedWork=null,null!==(n=a(e,t,!0))&&(k()?e.finishedWork=n:C(e,n,t))):null!==(n=e.finishedWork)?C(e,n,t):(e.finishedWork=null,null!==(n=a(e,t,!1))&&C(e,n,t)),se=!1}function C(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===xe?xe=[r]:xe.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=J=!0,(n=t.stateNode).current===t&&s("177"),0===(r=n.pendingCommitExpirationTime)&&s("261"),n.pendingCommitExpirationTime=0;var o=d();if(Qe.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;for(q(n.containerInfo),re=i;null!==re;){var a=!1,u=void 0;try{for(;null!==re;)2048&re.effectTag&&R(re.alternate,re),re=re.nextEffect}catch(e){a=!0,u=e}a&&(null===re&&s("178"),l(re,u),null!==re&&(re=re.nextEffect))}for(re=i;null!==re;){a=!1,u=void 0;try{for(;null!==re;){var c=re.effectTag;if(16&c&&F(re),128&c){var f=re.alternate;null!==f&&W(f)}switch(14&c){case 2:M(re),re.effectTag&=-3;break;case 6:M(re),re.effectTag&=-3,L(re.alternate,re);break;case 4:L(re.alternate,re);break;case 8:U(re)}re=re.nextEffect}}catch(e){a=!0,u=e}a&&(null===re&&s("178"),l(re,u),null!==re&&(re=re.nextEffect))}for(Q(n.containerInfo),n.current=t,re=i;null!==re;){c=!1,f=void 0;try{for(i=n,a=o,u=r;null!==re;){var p=re.effectTag;36&p&&z(i,re.alternate,re,a,u),256&p&&B(re,E),128&p&&H(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){c=!0,f=e}c&&(null===re&&s("178"),l(re,f),null!==re&&(re=re.nextEffect))}J=oe=!1,er(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function k(){return!(null===ye||ye.timeRemaining()>Ee)&&(me=!0)}function E(e){null===pe&&s("246"),pe.remainingExpirationTime=0,ve||(ve=!0,ge=e)}var T=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),S=function(e,t){function n(e){return e===br&&s("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var i=t.push,a=t.pop,u=e(br),l=e(br),c=e(br);return{getHostContext:function(){return n(u.current)},getRootHostContainer:function(){return n(c.current)},popHostContainer:function(e){a(u,e),a(l,e),a(c,e)},popHostContext:function(e){l.current===e&&(a(u,e),a(l,e))},pushHostContainer:function(e,t){i(c,t,e),i(l,e,e),i(u,br,e),t=o(t),a(u,e),i(u,t,e)},pushHostContext:function(e){var t=n(c.current),o=n(u.current);o!==(t=r(o,e.type,t))&&(i(l,e,e),i(u,t,e))}}}(e,T),P=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||s("108",lt(e)||"Unknown",o);return i({},t,n)}var o=e.createCursor,a=e.push,u=e.pop,l=o(f),c=o(!1),p=f;return{getUnmaskedContext:function(e){return n(e)?p:l.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return f;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&t(e,n,a),a},hasContextChanged:function(){return c.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(u(c,e),u(l,e))},popTopLevelContextObject:function(e){u(c,e),u(l,e)},pushTopLevelContextObject:function(e,t,n){null!=l.cursor&&s("168"),a(l,t,e),a(c,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,p=l.current,a(l,t,e),a(c,c.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||s("169"),t){var o=r(e,p);n.__reactInternalMemoizedMergedChildContext=o,u(c,e),u(l,e),a(l,o,e)}else u(c,e);a(c,t,e)},findCurrentUnmaskedContext:function(e){for((2!==qt(e)||2!==e.tag)&&s("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||s("171")}return e.stateNode.context}}}(T);T=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;r(o,e),r(i,e),r(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(T);var O=function(e){function t(e,t){var n=new $n(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;p=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){s("175")},prepareToHydrateHostTextInstance:function(){s("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,u=e.getNextHydratableSibling,l=e.getFirstHydratableChild,c=e.hydrateInstance,f=e.hydrateTextInstance,p=null,d=null,h=!1;return{enterHydrationState:function(e){return d=l(e.stateNode.containerInfo),p=e,h=!0},resetHydrationState:function(){d=p=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=d;if(r){if(!n(e,r)){if(!(r=u(r))||!n(e,r))return e.effectTag|=2,h=!1,void(p=e);t(p,d)}p=e,d=l(r)}else e.effectTag|=2,h=!1,p=e}},prepareToHydrateHostInstance:function(e,t,n){return t=c(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return f(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==p)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=d;n;)t(e,n),n=u(n);return r(e),d=p?u(e.stateNode):null,!0}}}(e),N=gr(e,S,P,T,O,p,c).beginWork,I=function(e,t,n,r,o){function i(e){e.effectTag|=4}var a=e.createInstance,u=e.createTextInstance,l=e.appendInitialChild,c=e.finalizeInitialChildren,f=e.prepareUpdate,p=e.persistence,d=t.getRootHostContainer,h=t.popHostContext,m=t.getHostContext,v=t.popHostContainer,g=n.popContextProvider,y=n.popTopLevelContextObject,b=r.popProvider,_=o.prepareToHydrateHostInstance,w=o.prepareToHydrateHostTextInstance,x=o.popHydrationState,C=void 0,k=void 0,E=void 0;return e.mutation?(C=function(){},k=function(e,t,n){(t.updateQueue=n)&&i(t)},E=function(e,t,n,r){n!==r&&i(t)}):s(p?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return g(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return v(t),y(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(x(t),t.effectTag&=-3),C(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=d();var o=t.type;if(null!==e&&null!=t.stateNode){var p=e.memoizedProps,T=t.stateNode,S=m();T=f(T,o,p,r,n,S),k(e,t,T,o,p,r,n,S),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&s("166"),null;if(e=m(),x(t))_(t,n,e)&&i(t);else{p=a(o,r,n,e,t);e:for(S=t.child;null!==S;){if(5===S.tag||6===S.tag)l(p,S.stateNode);else if(4!==S.tag&&null!==S.child){S.child.return=S,S=S.child;continue}if(S===t)break;for(;null===S.sibling;){if(null===S.return||S.return===t)break e;S=S.return}S.sibling.return=S.return,S=S.sibling}c(p,o,r,n,e)&&i(t),t.stateNode=p}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)E(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&s("166"),null;e=d(),n=m(),x(t)?w(t)&&i(t):t.stateNode=u(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||s("165"),t.tag=8,o=[];e:for((p=t.stateNode)&&(p.return=t);null!==p;){if(5===p.tag||6===p.tag||4===p.tag)s("247");else if(9===p.tag)o.push(p.pendingProps.value);else if(null!==p.child){p.child.return=p,p=p.child;continue}for(;null===p.sibling;){if(null===p.return||p.return===t)break e;p=p.return}p.sibling.return=p.return,p=p.sibling}return r=(p=r.handler)(r.props,o),t.child=mr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return v(t),C(t),null;case 13:return b(t),null;case 12:return null;case 0:s("167");default:s("156")}}}}(e,S,P,T,O).completeWork,D=(S=function(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,u=t.popContextProvider,l=t.popTopLevelContextObject,c=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:ct(t)};do{switch(e.tag){case 3:return ar(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){ar(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:u(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),l(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return c(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:u(e);break;case 3:i(e),l(e);break;case 5:a(e);break;case 4:i(e);break;case 13:c(e)}}}}(S,P,T,0,n)).throwException,A=S.unwindWork,j=S.unwindInterruptedWork,R=(S=function(e,t,n,r,o){function i(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(tr(e),e.tag){case 2:i(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:i(e);break;case 7:u(e.stateNode);break;case 4:p&&c(e)}}function u(e){for(var t=e;;)if(a(t),null===t.child||p&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function l(e){return 5===e.tag||3===e.tag||4===e.tag}function c(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&s("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)u(t),o?x(r,t.stateNode):w(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var f=e.getPublicInstance,p=e.mutation;e=e.persistence,p||s(e?"235":"236");var d=p.commitMount,h=p.commitUpdate,m=p.resetTextContent,v=p.commitTextUpdate,g=p.appendChild,y=p.appendChildToContainer,b=p.insertBefore,_=p.insertInContainerBefore,w=p.removeChild,x=p.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:s("163")}},commitResetTextContent:function(e){m(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(l(t)){var n=t;break e}t=t.return}s("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:s("161")}16&n.effectTag&&(m(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||l(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?_(t,o.stateNode,n):b(t,o.stateNode,n):r?y(t,o.stateNode):g(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){c(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&h(n,i,o,e,r,t)}break;case 6:null===t.stateNode&&s("162"),n=t.memoizedProps,v(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:s("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&fr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=f(n.child.stateNode);break;case 2:e=n.child.stateNode}fr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&d(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:s("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&s("264");var i=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<i.length;n++){var a=(r=i[n]).value,u=r.stack;yr(e,r),t.componentDidCatch(a,{componentStack:null!==u?u:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&s("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)yr(e,r=i[n]),t(r.value);break;default:s("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=f(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,l,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,F=S.commitResetTextContent,M=S.commitPlacement,U=S.commitDeletion,L=S.commitWork,z=S.commitLifeCycles,B=S.commitErrorLogging,H=S.commitAttachRef,W=S.commitDetachRef,V=e.now,$=e.scheduleDeferredCallback,K=e.cancelDeferredCallback,q=e.prepareForCommit,Q=e.resetAfterCommit,G=V(),Y=G,Z=0,X=0,J=!1,ee=null,te=null,ne=0,re=null,oe=!1,ie=!1,ae=null,ue=null,le=null,ce=0,fe=-1,se=!1,pe=null,de=0,he=0,me=!1,ve=!1,ge=null,ye=null,be=!1,_e=!1,we=!1,xe=null,Ce=1e3,ke=0,Ee=1;return{recalculateCurrentTime:d,computeExpirationForFiber:c,scheduleWork:p,requestWork:v,flushRoot:function(e,t){se&&s("253"),pe=e,de=t,x(e,t,!1),b(),w()},batchedUpdates:function(e,t){var n=be;be=!0;try{return e(t)}finally{(be=n)||se||b()}},unbatchedUpdates:function(e,t){if(be&&!_e){_e=!0;try{return e(t)}finally{_e=!1}}return e(t)},flushSync:function(e,t){se&&s("187");var n=be;be=!0;try{return h(e,t)}finally{be=n,b()}},flushControlled:function(e){var t=be;be=!0;try{h(e)}finally{(be=t)||se||_(1,!1,null)}},deferredUpdates:function(e){var t=X;X=25*(1+((d()+500)/25|0));try{return e()}finally{X=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(we)return e(t,n);be||se||0===he||(_(he,!1,null),he=0);var r=we,o=be;be=we=!0;try{return e(t,n)}finally{we=r,(be=o)||se||b()}},flushInteractiveUpdates:function(){se||0===he||(_(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((d()+500)/25|0));return e<=Z&&(e=Z+1),Z=e},legacyContext:P}}function wr(e){function t(e,t,n,r,o,i){if(r=t.current,n){n=n._reactInternalFiber;var a=c(n);n=s(n)?p(n,a):a}else n=f;return null===t.context?t.context=n:t.pendingContext=n,ur(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=i)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),u(r,o),o}function n(e){return null===(e=function(e){if(!(e=Yt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode}var r=e.getPublicInstance,o=(e=_r(e)).recalculateCurrentTime,a=e.computeExpirationForFiber,u=e.scheduleWork,l=e.legacyContext,c=l.findCurrentUnmaskedContext,s=l.isContextProvider,p=l.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new $n(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,r,i){var u=n.current;return t(e,n,r,o(),u=a(u),i)},updateContainerAtExpirationTime:function(e,n,r,i,a){return t(e,n,r,o(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return r(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:n,findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Yt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Zn=Jn(function(e){return t.onCommitFiberRoot(n,e)}),Xn=Jn(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(i({},e,{findHostInstanceByFiber:function(e){return n(e)},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var xr=Object.freeze({default:wr}),Cr=xr&&wr||xr,kr=Cr.default?Cr.default:Cr;var Er="object"==typeof performance&&"function"==typeof performance.now,Tr=void 0;Tr=Er?function(){return performance.now()}:function(){return Date.now()};var Sr=void 0,Pr=void 0;if(o.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Or=null,Nr=!1,Ir=-1,Dr=!1,Ar=0,jr=33,Rr=33,Fr=void 0;Fr=Er?{didTimeout:!1,timeRemaining:function(){var e=Ar-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Ar-Date.now();return 0<e?e:0}};var Mr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Mr){if(Nr=!1,e=Tr(),0>=Ar-e){if(!(-1!==Ir&&Ir<=e))return void(Dr||(Dr=!0,requestAnimationFrame(Ur)));Fr.didTimeout=!0}else Fr.didTimeout=!1;Ir=-1,e=Or,Or=null,null!==e&&e(Fr)}},!1);var Ur=function(e){Dr=!1;var t=e-Ar+Rr;t<Rr&&jr<Rr?(8>t&&(t=8),Rr=t<jr?jr:t):jr=t,Ar=e+Rr,Nr||(Nr=!0,window.postMessage(Mr,"*"))};Sr=function(e,t){return Or=e,null!=t&&"number"==typeof t.timeout&&(Ir=Tr()+t.timeout),Dr||(Dr=!0,requestAnimationFrame(Ur)),0},Pr=function(){Or=null,Nr=!1,Ir=-1}}else Sr=window.requestIdleCallback,Pr=window.cancelIdleCallback;else Sr=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Pr=function(e){clearTimeout(e)};function Lr(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function zr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Br(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Hr(e,t){return null!=t.dangerouslySetInnerHTML&&s("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Wr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&s("92"),Array.isArray(t)&&(1>=t.length||s("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Vr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function $r(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Kr="http://www.w3.org/1999/xhtml",qr="http://www.w3.org/2000/svg";function Qr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Gr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Qr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Yr,Zr=void 0,Xr=(Yr=function(e,t){if(e.namespaceURI!==qr||"innerHTML"in e)e.innerHTML=t;else{for((Zr=Zr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Zr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Yr(e,t)})}:Yr);function Jr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var eo={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},to=["Webkit","ms","Moz","O"];function no(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||eo.hasOwnProperty(o)&&eo[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(eo).forEach(function(e){to.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),eo[t]=eo[e]})});var ro=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function oo(e,t,n){t&&(ro[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&s("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&s("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||s("61")),null!=t.style&&"object"!=typeof t.style&&s("62",n()))}function io(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ao=Kr,uo=a.thatReturns("");function lo(e,t){var n=An(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=_[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?bn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(bn("topFocus","focus",e),bn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(Ve("cancel",!0)&&bn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(Ve("close",!0)&&bn("topClose","close",e),n.topClose=!0):Pn.hasOwnProperty(o)&&yn(o,Pn[o],e),n[o]=!0)}}function co(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===ao&&(r=Qr(e)),r===ao?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function fo(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function so(e,t,n,r){var o=io(t,n);switch(t){case"iframe":case"object":yn("topLoad","load",e);var u=n;break;case"video":case"audio":for(u in On)On.hasOwnProperty(u)&&yn(u,On[u],e);u=n;break;case"source":yn("topError","error",e),u=n;break;case"img":case"image":case"link":yn("topError","error",e),yn("topLoad","load",e),u=n;break;case"form":yn("topReset","reset",e),yn("topSubmit","submit",e),u=n;break;case"details":yn("topToggle","toggle",e),u=n;break;case"input":bt(e,n),u=yt(e,n),yn("topInvalid","invalid",e),lo(r,"onChange");break;case"option":u=Lr(e,n);break;case"select":Br(e,n),u=i({},n,{value:void 0}),yn("topInvalid","invalid",e),lo(r,"onChange");break;case"textarea":Wr(e,n),u=Hr(e,n),yn("topInvalid","invalid",e),lo(r,"onChange");break;default:u=n}oo(t,u,uo);var l,c=u;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?no(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&Xr(e,f):"children"===l?"string"==typeof f?("textarea"!==t||""!==f)&&Jr(e,f):"number"==typeof f&&Jr(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(b.hasOwnProperty(l)?null!=f&&lo(r,l):null!=f&&gt(e,l,f,o))}switch(t){case"input":Ke(e),xt(e,n);break;case"textarea":Ke(e),$r(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?zr(e,!!n.multiple,t,!1):null!=n.defaultValue&&zr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof u.onClick&&(e.onclick=a)}}function po(e,t,n,r,o){var u=null;switch(t){case"input":n=yt(e,n),r=yt(e,r),u=[];break;case"option":n=Lr(e,n),r=Lr(e,r),u=[];break;case"select":n=i({},n,{value:void 0}),r=i({},r,{value:void 0}),u=[];break;case"textarea":n=Hr(e,n),r=Hr(e,r),u=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=a)}oo(t,r,uo),t=e=void 0;var l=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var c=n[e];for(t in c)c.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(b.hasOwnProperty(e)?u||(u=[]):(u=u||[]).push(e,null));for(e in r){var f=r[e];if(c=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&f!==c&&(null!=f||null!=c))if("style"===e)if(c){for(t in c)!c.hasOwnProperty(t)||f&&f.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in f)f.hasOwnProperty(t)&&c[t]!==f[t]&&(l||(l={}),l[t]=f[t])}else l||(u||(u=[]),u.push(e,l)),l=f;else"dangerouslySetInnerHTML"===e?(f=f?f.__html:void 0,c=c?c.__html:void 0,null!=f&&c!==f&&(u=u||[]).push(e,""+f)):"children"===e?c===f||"string"!=typeof f&&"number"!=typeof f||(u=u||[]).push(e,""+f):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(b.hasOwnProperty(e)?(null!=f&&lo(o,e),u||c===f||(u=[])):(u=u||[]).push(e,f))}return l&&(u=u||[]).push("style",l),u}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&_t(e,o),io(n,r),r=io(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?no(e,u):"dangerouslySetInnerHTML"===a?Xr(e,u):"children"===a?Jr(e,u):gt(e,a,u,r)}switch(n){case"input":wt(e,o);break;case"textarea":Vr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?zr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?zr(e,!!o.multiple,o.defaultValue,!0):zr(e,!!o.multiple,o.multiple?[]:"",!1))}}function mo(e,t,n,r,o){switch(t){case"iframe":case"object":yn("topLoad","load",e);break;case"video":case"audio":for(var i in On)On.hasOwnProperty(i)&&yn(i,On[i],e);break;case"source":yn("topError","error",e);break;case"img":case"image":case"link":yn("topError","error",e),yn("topLoad","load",e);break;case"form":yn("topReset","reset",e),yn("topSubmit","submit",e);break;case"details":yn("topToggle","toggle",e);break;case"input":bt(e,n),yn("topInvalid","invalid",e),lo(o,"onChange");break;case"select":Br(e,n),yn("topInvalid","invalid",e),lo(o,"onChange");break;case"textarea":Wr(e,n),yn("topInvalid","invalid",e),lo(o,"onChange")}for(var u in oo(t,n,uo),r=null,n)n.hasOwnProperty(u)&&(i=n[u],"children"===u?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):b.hasOwnProperty(u)&&null!=i&&lo(o,u));switch(t){case"input":Ke(e),xt(e,n);break;case"textarea":Ke(e),$r(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=a)}return r}function vo(e,t){return e.nodeValue!==t}var go=Object.freeze({createElement:co,createTextNode:fo,setInitialProperties:so,diffProperties:po,updateProperties:ho,diffHydratedProperties:mo,diffHydratedText:vo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(wt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=V(r);o||s("90"),qe(r),wt(r,o)}}}break;case"textarea":Vr(e,n);break;case"select":null!=(t=n.value)&&zr(e,!!n.multiple,t,!1)}}});Ie.injectFiberControlledHostComponent(go);var yo=null,bo=null;function _o(e){this._expirationTime=Eo.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function wo(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function xo(e,t,n){this._internalRoot=Eo.createContainer(e,t,n)}function Co(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ko(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}_o.prototype.render=function(e){this._defer||s("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new wo;return Eo.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},_o.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},_o.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||s("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&s("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Eo.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},_o.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},wo.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},wo.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&s("191",n),n()}}},xo.prototype.render=function(e,t){var n=this._internalRoot,r=new wo;return null!==(t=void 0===t?null:t)&&r.then(t),Eo.updateContainer(e,n,null,r._onCommit),r},xo.prototype.unmount=function(e){var t=this._internalRoot,n=new wo;return null!==(e=void 0===e?null:e)&&n.then(e),Eo.updateContainer(null,t,null,n._onCommit),n},xo.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new wo;return null!==(n=void 0===n?null:n)&&o.then(n),Eo.updateContainer(t,r,e,o._onCommit),o},xo.prototype.createBatch=function(){var e=new _o(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var Eo=kr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Gr(null,"");break;default:e=Gr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Gr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){yo=vn;var e=u();if(Fn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,l=-1,c=0,f=0,s=e,p=null;t:for(;;){for(var d;s!==t||0!==r&&3!==s.nodeType||(a=i+r),s!==o||0!==n&&3!==s.nodeType||(l=i+n),3===s.nodeType&&(i+=s.nodeValue.length),null!==(d=s.firstChild);)p=s,s=d;for(;;){if(s===e)break t;if(p===t&&++c===r&&(a=i),p===o&&++f===n&&(l=i),null!==(d=s.nextSibling))break;p=(s=p).parentNode}s=d}t=-1===a||-1===l?null:{start:a,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;bo={focusedElem:e,selectionRange:t},gn(!1)},resetAfterCommit:function(){var e=bo,t=u(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&c(document.documentElement,n)){if(Fn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[re()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=Rn(n,e);var i=Rn(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}bo=null,gn(yo),yo=null},createInstance:function(e,t,n,r,o){return(e=co(e,t,n,r))[z]=o,e[B]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return so(e,t,n,r),ko(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=fo(e,t))[z]=r,e},now:Tr,mutation:{commitMount:function(e,t,n){ko(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[B]=o,ho(e,t,n,r,o)},resetTextContent:function(e){Jr(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[z]=i,e[B]=n,mo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[z]=n,vo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Sr,cancelDeferredCallback:Pr}),To=Eo;function So(e,t,n,r,o){Co(n)||s("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=Eo.getPublicRootInstance(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new xo(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=Eo.getPublicRootInstance(i._internalRoot);u.call(e)}}Eo.unbatchedUpdates(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Eo.getPublicRootInstance(i._internalRoot)}function Po(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Co(t)||s("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Je,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Fe=To.batchedUpdates,Me=To.interactiveUpdates,Ue=To.flushInteractiveUpdates;var Oo={createPortal:Po,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(t)return Eo.findHostInstance(t);"function"==typeof e.render?s("188"):s("213",Object.keys(e))},hydrate:function(e,t,n){return So(null,e,t,!0,n)},render:function(e,t,n){return So(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&s("38"),So(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Co(e)||s("40"),!!e._reactRootContainer&&(Eo.unbatchedUpdates(function(){So(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Po.apply(void 0,arguments)},unstable_batchedUpdates:Eo.batchedUpdates,unstable_deferredUpdates:Eo.deferredUpdates,flushSync:Eo.flushSync,unstable_flushControlled:Eo.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:U,EventPluginRegistry:C,EventPropagators:te,ReactControlledComponent:Re,ReactDOMComponentTree:$,ReactDOMEventListener:xn},unstable_createRoot:function(e,t){return new xo(e,!0,null!=t&&!0===t.hydrate)}};Eo.injectIntoDevTools({findFiberByHostInstance:H,bundleType:0,version:"16.3.1",rendererPackageName:"react-dom"});var No=Object.freeze({default:Oo}),Io=No&&Oo||No;e.exports=Io.default?Io.default:Io},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(3),a=n.n(i);function u(e){var t=!1;return function(){t||(console.warn(e),t=!0)}}u("\n>> Error, via react-flip-move <<\n\nYou provided a stateless functional component as a child to <FlipMove>. Unfortunately, SFCs aren't supported, because Flip Move needs access to the backing instances via refs, and SFCs don't have a public instance that holds that info.\n\nPlease wrap your components in a native element (eg. <div>), or a non-functional component.\n"),u("\n>> Error, via react-flip-move <<\n\nYou provided a primitive (text or number) node as a child to <FlipMove>. Flip Move needs containers with unique keys to move children around.\n\nPlease wrap your value in a native element (eg. <span>), or a component.\n");var l=u("\n>> Warning, via react-flip-move <<\n\nWhen using \"wrapperless\" mode (by supplying 'typeName' of 'null'), strange things happen when the direct parent has the default \"static\" position.\n\nFlipMove has added 'position: relative' to this node, to ensure Flip Move animates correctly.\n\nTo avoid seeing this warning, simply apply a non-static position to that parent node.\n"),c=u("\n>> Warning, via react-flip-move <<\n\nOne or more of Flip Move's child elements have the html attribute 'disabled' set to true.\n\nPlease note that this will cause animations to break in Internet Explorer 11 and below. Either remove the disabled attribute or set 'animation' to false.\n"),f={elevator:{from:{transform:"scale(0)",opacity:"0"},to:{transform:"",opacity:""}},fade:{from:{opacity:"0"},to:{opacity:""}},accordionVertical:{from:{transform:"scaleY(0)",transformOrigin:"center top"},to:{transform:"",transformOrigin:"center top"}},accordionHorizontal:{from:{transform:"scaleX(0)",transformOrigin:"left center"},to:{transform:"",transformOrigin:"left center"}},none:null},s={elevator:{from:{transform:"scale(1)",opacity:"1"},to:{transform:"scale(0)",opacity:"0"}},fade:{from:{opacity:"1"},to:{opacity:"0"}},accordionVertical:{from:{transform:"scaleY(1)",transformOrigin:"center top"},to:{transform:"scaleY(0)",transformOrigin:"center top"}},accordionHorizontal:{from:{transform:"scaleX(1)",transformOrigin:"left center"},to:{transform:"scaleX(0)",transformOrigin:"left center"}},none:null},p=f,d="elevator",h="none",m=function(e,t){for(var n=0;n<t.length;n++)if(e(t[n],n,t))return t[n]},v=function(e,t){for(var n=0;n<t.length;n++)if(!e(t[n],n,t))return!1;return!0},g=function(e){return(g=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)})(e)};var y,b,_=(y=function(e){return e.replace(/([A-Z])/g,"-$1").toLowerCase()},b={},function(e){return b[e]||(b[e]=y(e)),b[e]}),w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},x=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},k=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},E=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t};function T(e){var t=e.domNode,n=e.styles;Object.keys(n).forEach(function(e){t.style.setProperty(_(e),n[e])})}var S=function(e){var t=e.childDomNode,n=e.childBoundingBox,r=e.parentBoundingBox,o=e.getPosition,i={top:0,left:0,right:0,bottom:0,height:0,width:0},a=n||i,u=r||i,l=o(t),c=l.top-u.top,f=l.left-u.left;return[a.left-f,a.top-c]},P=function(){var e={transition:"transitionend","-o-transition":"oTransitionEnd","-moz-transition":"transitionend","-webkit-transition":"webkitTransitionEnd"};if("undefined"==typeof document)return"";var t=document.createElement("fakeelement"),n=m(function(e){return void 0!==t.style.getPropertyValue(e)},Object.keys(e));return n?e[n]:""}(),O=!P;function N(e){return e.key||""}function I(e){return r.Children.toArray(e)}var D=function(e){var t,n;return n=t=function(t){function n(){return x(this,n),E(this,t.apply(this,arguments))}return k(n,t),n.prototype.checkChildren=function(e){},n.prototype.convertProps=function(e){var t={children:e.children,easing:e.easing,onStart:e.onStart,onFinish:e.onFinish,onStartAll:e.onStartAll,onFinishAll:e.onFinishAll,typeName:e.typeName,disableAllAnimations:e.disableAllAnimations,getPosition:e.getPosition,maintainContainerHeight:e.maintainContainerHeight,verticalAlignment:e.verticalAlignment,duration:this.convertTimingProp("duration"),delay:this.convertTimingProp("delay"),staggerDurationBy:this.convertTimingProp("staggerDurationBy"),staggerDelayBy:this.convertTimingProp("staggerDelayBy"),appearAnimation:this.convertAnimationProp(e.appearAnimation,p),enterAnimation:this.convertAnimationProp(e.enterAnimation,f),leaveAnimation:this.convertAnimationProp(e.leaveAnimation,s),delegated:{}};this.checkChildren(t.children);var n=Object.keys(t),r=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n={};return Object.keys(e).forEach(function(r){-1===t.indexOf(r)&&(n[r]=e[r])}),n}(this.props,n);return r.style=C({position:"relative"},r.style),t.delegated=r,t},n.prototype.convertTimingProp=function(e){var t=this.props[e],r="number"==typeof t?t:parseInt(t,10);return isNaN(r)?n.defaultProps[e]:r},n.prototype.convertAnimationProp=function(e,t){switch(void 0===e?"undefined":w(e)){case"boolean":return t[e?d:h];case"string":return-1===Object.keys(t).indexOf(e)?t[d]:t[e];default:return e}},n.prototype.render=function(){return o.a.createElement(e,this.convertProps(this.props))},n}(r.Component),t.defaultProps={easing:"ease-in-out",duration:350,delay:0,staggerDurationBy:0,staggerDelayBy:0,typeName:"div",enterAnimation:d,leaveAnimation:d,disableAllAnimations:!1,getPosition:function(e){return e.getBoundingClientRect()},maintainContainerHeight:!1,verticalAlignment:"top"},n}(function(e){function t(){var n,r;x(this,t);for(var o=arguments.length,i=Array(o),u=0;u<o;u++)i[u]=arguments[u];return n=r=E(this,e.call.apply(e,[this].concat(i))),r.state={children:I(r.props?r.props.children:[]).map(function(e){return C({},e,{element:e,appearing:!0})})},r.childrenData={},r.parentData={domNode:null,boundingBox:null},r.heightPlaceholderData={domNode:null},r.remainingAnimations=0,r.childrenToAnimate=[],r.findDOMContainer=function(){var e=a.a.findDOMNode(r),t=e&&e.parentNode;t&&t instanceof HTMLElement&&("static"===window.getComputedStyle(t).position&&(t.style.position="relative",l()),r.parentData.domNode=t)},r.runAnimation=function(){var e=r.state.children.filter(r.doesChildNeedToBeAnimated),t=e.map(function(e){return r.computeInitialStyles(e)});e.forEach(function(e,n){r.remainingAnimations+=1,r.childrenToAnimate.push(N(e)),r.animateChild(e,n,t[n])}),"function"==typeof r.props.onStartAll&&r.callChildrenHook(r.props.onStartAll)},r.doesChildNeedToBeAnimated=function(e){if(!N(e))return!1;var t=r.getChildData(N(e)),n=t.domNode,o=t.boundingBox,i=r.parentData.boundingBox;if(!n)return!1;var a=r.props,u=a.appearAnimation,l=a.enterAnimation,c=a.leaveAnimation,f=a.getPosition,s=e.appearing&&u,p=e.entering&&l,d=e.leaving&&c;if(s||p||d)return!0;var h=S({childDomNode:n,childBoundingBox:o,parentBoundingBox:i,getPosition:f}),m=h[0],v=h[1];return 0!==m||0!==v},E(r,n)}return k(t,e),t.prototype.componentDidMount=function(){null===this.props.typeName&&this.findDOMContainer(),this.props.appearAnimation&&!this.isAnimationDisabled(this.props)&&(this.prepForAnimation(),this.runAnimation())},t.prototype.componentWillReceiveProps=function(e){this.updateBoundingBoxCaches();var t=I(e.children);this.setState({children:this.isAnimationDisabled(e)?t.map(function(e){return C({},e,{element:e})}):this.calculateNextSetOfChildren(t)})},t.prototype.componentDidUpdate=function(e){null===this.props.typeName&&this.findDOMContainer(),!function(e,t){if(e===t)return!0;var n=!g(e)||!g(t),r=e.length!==t.length;return!n&&!r&&v(function(e,n){return e===t[n]},e)}(I(this.props.children).map(function(e){return e.key}),I(e.children).map(function(e){return e.key}))&&!this.isAnimationDisabled(this.props)&&(this.prepForAnimation(),this.runAnimation())},t.prototype.calculateNextSetOfChildren=function(e){var t=this,n=e.map(function(e){var n=t.findChildByKey(e.key),r=!n||n.leaving;return C({},e,{element:e,entering:r})}),r=0;return this.state.children.forEach(function(o,i){if(!m(function(e){return e.key===N(o)},e)&&t.props.leaveAnimation){var a=C({},o,{leaving:!0}),u=i+r;n.splice(u,0,a),r+=1}}),n},t.prototype.prepForAnimation=function(){var e=this,t=this.props,n=t.leaveAnimation,r=t.maintainContainerHeight,o=t.getPosition;n&&(this.state.children.filter(function(e){return e.leaving}).forEach(function(t){var n=e.getChildData(N(t));!e.isAnimationDisabled(e.props)&&n.domNode&&n.domNode.disabled&&c(),n.boundingBox&&function(e,t){var n=e.domNode,r=e.boundingBox;if(n&&r){var o=window.getComputedStyle(n),i=["margin-top","margin-left","margin-right"].reduce(function(e,t){var n,r=o.getPropertyValue(t);return C({},e,((n={})[t]=Number(r.replace("px","")),n))},{});T({domNode:n,styles:{position:"absolute",top:("bottom"===t?r.top-r.height:r.top)-i["margin-top"]+"px",left:r.left-i["margin-left"]+"px",right:r.right-i["margin-right"]+"px"}})}}(n,e.props.verticalAlignment)}),r&&this.heightPlaceholderData.domNode&&function(e){var t=e.domNode,n=e.parentData,r=e.getPosition,o=n.domNode,i=n.boundingBox;if(o&&i){T({domNode:t,styles:{height:"0"}});var a=i.height-r(o).height;T({domNode:t,styles:{height:a>0?a+"px":"0"}})}}({domNode:this.heightPlaceholderData.domNode,parentData:this.parentData,getPosition:o}));this.state.children.forEach(function(t){var n=e.getChildData(N(t)).domNode;n&&(t.entering||t.leaving||T({domNode:n,styles:{transition:""}}))})},t.prototype.animateChild=function(e,t,n){var r=this,o=this.getChildData(N(e)).domNode;o&&(T({domNode:o,styles:n}),this.props.onStart&&this.props.onStart(e,o),requestAnimationFrame(function(){requestAnimationFrame(function(){var n={transition:function(e,t){var n=t.delay,r=t.duration,o=t.staggerDurationBy,i=t.staggerDelayBy,a=t.easing;n+=e*i,r+=e*o;return["transform","opacity"].map(function(e){return e+" "+r+"ms "+a+" "+n+"ms"}).join(", ")}(t,r.props),transform:"",opacity:""};e.appearing&&r.props.appearAnimation?n=C({},n,r.props.appearAnimation.to):e.entering&&r.props.enterAnimation?n=C({},n,r.props.enterAnimation.to):e.leaving&&r.props.leaveAnimation&&(n=C({},n,r.props.leaveAnimation.to)),T({domNode:o,styles:n})})}),this.bindTransitionEndHandler(e))},t.prototype.bindTransitionEndHandler=function(e){var t=this,n=this.getChildData(N(e)).domNode;if(n){n.addEventListener(P,function r(o){o.target===n&&(n.style.transition="",t.triggerFinishHooks(e,n),n.removeEventListener(P,r),e.leaving&&t.removeChildData(N(e)))})}},t.prototype.triggerFinishHooks=function(e,t){var n=this;if(this.props.onFinish&&this.props.onFinish(e,t),this.remainingAnimations-=1,0===this.remainingAnimations){var r=this.state.children.filter(function(e){return!e.leaving}).map(function(e){return C({},e,{element:e.element,appearing:!1,entering:!1})});this.setState({children:r},function(){"function"==typeof n.props.onFinishAll&&n.callChildrenHook(n.props.onFinishAll),n.childrenToAnimate=[]}),this.heightPlaceholderData.domNode&&(this.heightPlaceholderData.domNode.style.height="0")}},t.prototype.callChildrenHook=function(e){var t=this,n=[],r=[];this.childrenToAnimate.forEach(function(e){var o=t.findChildByKey(e);o&&(n.push(o),t.hasChildData(e)&&r.push(t.getChildData(e).domNode))}),e(n,r)},t.prototype.updateBoundingBoxCaches=function(){var e=this,t=this.parentData.domNode;if(t){this.parentData.boundingBox=this.props.getPosition(t);var n=[];this.state.children.forEach(function(r){var o=N(r);if(o)if(e.hasChildData(o)){var i=e.getChildData(o);i.domNode&&r?n.push(function(e){var t=e.childDomNode,n=e.parentDomNode,r=e.getPosition,o=r(n),i=r(t),a=i.top,u=i.left,l=i.right,c=i.bottom,f=i.width,s=i.height;return{top:a-o.top,left:u-o.left,right:o.right-l,bottom:o.bottom-c,width:f,height:s}}({childDomNode:i.domNode,parentDomNode:t,getPosition:e.props.getPosition})):n.push(null)}else n.push(null);else n.push(null)}),this.state.children.forEach(function(t,r){var o=N(t),i=n[r];o&&e.setChildData(o,{boundingBox:i})})}},t.prototype.computeInitialStyles=function(e){if(e.appearing)return this.props.appearAnimation?this.props.appearAnimation.from:{};if(e.entering)return this.props.enterAnimation?C({position:"",top:"",left:"",right:"",bottom:""},this.props.enterAnimation.from):{};if(e.leaving)return this.props.leaveAnimation?this.props.leaveAnimation.from:{};var t=this.getChildData(N(e)),n=t.domNode,r=t.boundingBox,o=this.parentData.boundingBox;if(!n)return{};var i=S({childDomNode:n,childBoundingBox:r,parentBoundingBox:o,getPosition:this.props.getPosition});return{transform:"translate("+i[0]+"px, "+i[1]+"px)"}},t.prototype.isAnimationDisabled=function(e){return O||e.disableAllAnimations||0===e.duration&&0===e.delay&&0===e.staggerDurationBy&&0===e.staggerDelayBy},t.prototype.findChildByKey=function(e){return m(function(t){return N(t)===e},this.state.children)},t.prototype.hasChildData=function(e){return Object.prototype.hasOwnProperty.call(this.childrenData,e)},t.prototype.getChildData=function(e){return this.hasChildData(e)?this.childrenData[e]:{}},t.prototype.setChildData=function(e,t){this.childrenData[e]=C({},this.getChildData(e),t)},t.prototype.removeChildData=function(e){delete this.childrenData[e],this.setState(function(t){return C({},t,{children:t.children.filter(function(t){return t.element.key!==e})})})},t.prototype.createHeightPlaceholder=function(){var e=this,t=this.props.typeName,n="ul"===t||"ol"===t?"li":"div";return Object(r.createElement)(n,{key:"height-placeholder",ref:function(t){e.heightPlaceholderData.domNode=t},style:{visibility:"hidden",height:0}})},t.prototype.childrenWithRefs=function(){var e=this;return this.state.children.map(function(t){return Object(r.cloneElement)(t.element,{ref:function(n){if(n){var r=function(e){if("undefined"==typeof HTMLElement)return null;if(e instanceof HTMLElement)return e;var t=Object(i.findDOMNode)(e);return t&&t.nodeType===Node.TEXT_NODE?null:t}(n);e.setChildData(N(t),{domNode:r})}}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.typeName,o=t.delegated,i=t.leaveAnimation,a=t.maintainContainerHeight,u=this.childrenWithRefs();if(i&&a&&u.push(this.createHeightPlaceholder()),!n)return u;var l=C({},o,{children:u,ref:function(t){e.parentData.domNode=t}});return Object(r.createElement)(n,l)},t}(r.Component));t.default=D},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,".todo-item__top-todo-section{\r\n  padding:10px;\r\n  border-radius: 25px;\r\n  min-width: 135vh;\r\n  color: #E1F0E2;\r\n  border-color: #69B36C;\r\n  border-style: solid;\r\n  background-color: #69B36C;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n}\r\n\r\n/* .no-todo-placeholder{\r\n  background:\r\n} */\r\n\r\n.popup-background{\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0,0,0, 0.5);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.todo-item{\r\n  margin:10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n\r\n .todo-list-form{\r\n  padding: 10px;\r\n  border-radius: 25px;\r\n  background:  #43A047;\r\n  color: #E1F0E2;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.todo-item-list{\r\n  overflow: auto;\r\n  height: 75vh;\r\n  padding: 15px;\r\n  min-height: 75vh;\r\n  min-width: 155vh;\r\n}\r\n\r\n.todo-item:empty::before{\r\n  content: attr(data-empty-message);\r\n}\r\n\r\n.todo-item__top-right-todo-section{\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items:center;\r\n}\r\n\r\nli{\r\n  border-radius: 25px;\r\n  min-height: 10px;\r\n  padding: 5px;\r\n  margin: 5px;\r\n  background: #E1F0E2;\r\n  color: #43A047;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n}\r\n\r\n\r\n\r\n.comments-form__comments-list{\r\n  padding: 10px;\r\n  margin: 10px;\r\n  background-color: #43A047;\r\n  overflow: auto;\r\n  height: 24vh;\r\n  border-radius: 25px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.comments-form{\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.comments-form__input-form{\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-direction: row;\r\n}\r\n\r\n.edit-form__input-form{\r\n  padding: 10px;\r\n  background-color: #43A047;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-radius: 25px;\r\n}\r\n\r\n.edit-form{\r\n  margin: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n}\r\n\r\n.settings-form{\r\n  border-color: #69B36C;\r\n  border-style: solid;\r\n  background-color: #69B36C;\r\n  width: 100vh;\r\n  height: 86vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  color: #C7E3C8;\r\n  border-radius: 25px;\r\n}\r\n\r\n\r\ni{\r\n  margin: 10px;\r\n  font-size: 32px;\r\n}\r\n\r\n.todo-item__title{\r\n  font-size: 18px;\r\n}\r\n\r\n.todo-item__description{\r\n  font-size: 12px;\r\n}\r\n\r\n.fa-check-active {\r\n  color: #e74c3c;\r\n}\r\n\r\n.fa-edit-active{\r\n  color: #0040FF;\r\n}\r\n\r\n\r\n.fa-times{\r\n  border-radius: 50%;\r\n  -webkit-transition: -webkit-transform .8s ease-in-out;\r\n          transition:         transform .8s ease-in-out;\r\n}\r\n\r\n.fa-times:hover{\r\n  -webkit-transform: rotate(360deg);\r\n          transform: rotate(360deg);\r\n}\r\n\r\ninput{\r\n   margin: 10px;\r\n   padding: 5px;\r\n   font-size: 16px;\r\n   background-color: #E1F0E2;\r\n   color: #43A047;\r\n   border: 0px solid;\r\n}\r\n\r\n.todo-item__like {\r\n  border-radius: 50%;\r\n  -webkit-transition: -webkit-transform .4s ease-in-out;\r\n          transition:         transform .4s ease-in-out;\r\n}\r\n.todo-item__like:active {\r\n  -webkit-transform: rotate(10deg);\r\n          transform: rotate(10deg);\r\n}\r\n",""])},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,".header{\r\n  background-color: #43A047;\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  max-height: 10vh;\r\n  color: #C7E3C8;\r\n  border-bottom-left-radius: 25px;\r\n  border-bottom-right-radius: 25px;\r\n}\r\n\r\n.addNew{\r\n  padding:5px;\r\n  border-radius: 25px;\r\n  color: #E1F0E2;\r\n  background-color: #69B36C;\r\n  width: auto;\r\n  font-size: 20px;\r\n  border-color: #E1F0E2;\r\n}\r\ninput{\r\n  border-radius: 25px;\r\n}\r\n",""])},function(e,t,n){var r=n(27);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(1)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";
/** @license React v16.3.1
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(10),o=n(9),i=n(8),a="function"==typeof Symbol&&Symbol.for,u=a?Symbol.for("react.element"):60103,l=a?Symbol.for("react.portal"):60106,c=a?Symbol.for("react.fragment"):60107,f=a?Symbol.for("react.strict_mode"):60108,s=a?Symbol.for("react.provider"):60109,p=a?Symbol.for("react.context"):60110,d=a?Symbol.for("react.async_mode"):60111,h=a?Symbol.for("react.forward_ref"):60112,m="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function y(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||g}function b(){}function _(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||g}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=y.prototype;var w=_.prototype=new b;w.constructor=_,r(w,y.prototype),w.isPureReactComponent=!0;var x={current:null},C=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),f=0;f<l;f++)c[f]=arguments[f+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:u,type:e,key:i,ref:a,props:o,_owner:x.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var S=/\/+/g,P=[];function O(e,t,n,r){if(P.length){var o=P.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function I(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case u:case l:i=!0}}if(i)return n(r,e,""===t?"."+D(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var c=t+D(o=e[a],a);i+=I(o,c,n,r)}else if(null===e||void 0===e?c=null:c="function"==typeof(c=m&&e[m]||e["@@iterator"])?c:null,"function"==typeof c)for(e=c.call(e),a=0;!(o=e.next()).done;)i+=I(o=o.value,c=t+D(o,a++),n,r);else"object"===o&&v("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function D(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function j(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?R(e,r,n,i.thatReturnsArgument):null!=e&&(T(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(S,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function R(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(S,"$&/")+"/"),t=O(t,i,r,o),null==e||I(e,"",j,t),N(t)}var F={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return R(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=O(null,null,t,n),null==e||I(e,"",A,t),N(t)},count:function(e){return null==e?0:I(e,"",i.thatReturnsNull,null)},toArray:function(e){var t=[];return R(e,t,null,i.thatReturnsArgument),t},only:function(e){return T(e)||v("143"),e}},createRef:function(){return{current:null}},Component:y,PureComponent:_,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:p,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:h,render:e}},Fragment:c,StrictMode:f,unstable_AsyncMode:d,createElement:E,cloneElement:function(e,t,n){var o=void 0,i=r({},e.props),a=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=x.current),void 0!==t.key&&(a=""+t.key);var f=void 0;for(o in e.type&&e.type.defaultProps&&(f=e.type.defaultProps),t)C.call(t,o)&&!k.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==f?f[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){f=Array(o);for(var s=0;s<o;s++)f[s]=arguments[s+2];i.children=f}return{$$typeof:u,type:e.type,key:a,ref:l,props:i,_owner:c}},createFactory:function(e){var t=E.bind(null,e);return t.type=e,t},isValidElement:T,version:"16.3.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:x,assign:r}},M=Object.freeze({default:F}),U=M&&F||M;e.exports=U.default?U.default:U},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(0));n(28);var i=a(n(7));function a(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}!function(e){function t(){return u(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}c(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("div",{className:"popup"},o.default.createElement("div",{className:"popup_inner"},o.default.createElement("h1",null,"Create new TODO"),o.default.createElement(i.default,null),o.default.createElement("button",{onClick:this.props.saveTodo},"Save todo")))}}])}();var f=function(e){function t(){u(this,t);var e=l(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.state={showPopup:!1},e}return c(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("header",{class:"header"},o.default.createElement("h1",null,"TODO App"))}}]),t}();t.default=f},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,"\r\n\r\nhtml, body, app.{\r\n  margin: 0;\r\n  padding: 0;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100vh;\r\n}\r\n.popup {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0,0,0, 0.5);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n}\r\n .popup_inner {\r\n  color: white;\r\n  display: flex;\r\n  margin: 10px;\r\n  padding: 10px;\r\n  width: auto;\r\n  height: auto;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #69B36C;\r\n  border-radius: 25px;\r\n}\r\n",""])},function(e,t,n){var r=n(31);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(1)(r,o);r.locals&&(e.exports=r.locals)},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,"*{\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: 'Baloo', serif;\r\n}\r\n.app{\r\n  display: flex;\r\n  background-color: #DDDDDD;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n}\r\n",""])},function(e,t,n){var r=n(34);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(1)(r,o);r.locals&&(e.exports=r.locals)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(e,r){var o;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var i,a=200,u="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",l="Expected a function",c="__lodash_hash_undefined__",f=500,s="__lodash_placeholder__",p=1,d=2,h=4,m=1,v=2,g=1,y=2,b=4,_=8,w=16,x=32,C=64,k=128,E=256,T=512,S=30,P="...",O=800,N=16,I=1,D=2,A=1/0,j=9007199254740991,R=1.7976931348623157e308,F=NaN,M=4294967295,U=M-1,L=M>>>1,z=[["ary",k],["bind",g],["bindKey",y],["curry",_],["curryRight",w],["flip",T],["partial",x],["partialRight",C],["rearg",E]],B="[object Arguments]",H="[object Array]",W="[object AsyncFunction]",V="[object Boolean]",$="[object Date]",K="[object DOMException]",q="[object Error]",Q="[object Function]",G="[object GeneratorFunction]",Y="[object Map]",Z="[object Number]",X="[object Null]",J="[object Object]",ee="[object Proxy]",te="[object RegExp]",ne="[object Set]",re="[object String]",oe="[object Symbol]",ie="[object Undefined]",ae="[object WeakMap]",ue="[object WeakSet]",le="[object ArrayBuffer]",ce="[object DataView]",fe="[object Float32Array]",se="[object Float64Array]",pe="[object Int8Array]",de="[object Int16Array]",he="[object Int32Array]",me="[object Uint8Array]",ve="[object Uint8ClampedArray]",ge="[object Uint16Array]",ye="[object Uint32Array]",be=/\b__p \+= '';/g,_e=/\b(__p \+=) '' \+/g,we=/(__e\(.*?\)|\b__t\)) \+\n'';/g,xe=/&(?:amp|lt|gt|quot|#39);/g,Ce=/[&<>"']/g,ke=RegExp(xe.source),Ee=RegExp(Ce.source),Te=/<%-([\s\S]+?)%>/g,Se=/<%([\s\S]+?)%>/g,Pe=/<%=([\s\S]+?)%>/g,Oe=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Ne=/^\w*$/,Ie=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,De=/[\\^$.*+?()[\]{}|]/g,Ae=RegExp(De.source),je=/^\s+|\s+$/g,Re=/^\s+/,Fe=/\s+$/,Me=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Ue=/\{\n\/\* \[wrapped with (.+)\] \*/,Le=/,? & /,ze=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Be=/\\(\\)?/g,He=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,We=/\w*$/,Ve=/^[-+]0x[0-9a-f]+$/i,$e=/^0b[01]+$/i,Ke=/^\[object .+?Constructor\]$/,qe=/^0o[0-7]+$/i,Qe=/^(?:0|[1-9]\d*)$/,Ge=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Ye=/($^)/,Ze=/['\n\r\u2028\u2029\\]/g,Xe="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Je="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",et="[\\ud800-\\udfff]",tt="["+Je+"]",nt="["+Xe+"]",rt="\\d+",ot="[\\u2700-\\u27bf]",it="[a-z\\xdf-\\xf6\\xf8-\\xff]",at="[^\\ud800-\\udfff"+Je+rt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ut="\\ud83c[\\udffb-\\udfff]",lt="[^\\ud800-\\udfff]",ct="(?:\\ud83c[\\udde6-\\uddff]){2}",ft="[\\ud800-\\udbff][\\udc00-\\udfff]",st="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pt="(?:"+it+"|"+at+")",dt="(?:"+st+"|"+at+")",ht="(?:"+nt+"|"+ut+")"+"?",mt="[\\ufe0e\\ufe0f]?"+ht+("(?:\\u200d(?:"+[lt,ct,ft].join("|")+")[\\ufe0e\\ufe0f]?"+ht+")*"),vt="(?:"+[ot,ct,ft].join("|")+")"+mt,gt="(?:"+[lt+nt+"?",nt,ct,ft,et].join("|")+")",yt=RegExp("['’]","g"),bt=RegExp(nt,"g"),_t=RegExp(ut+"(?="+ut+")|"+gt+mt,"g"),wt=RegExp([st+"?"+it+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[tt,st,"$"].join("|")+")",dt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[tt,st+pt,"$"].join("|")+")",st+"?"+pt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",st+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rt,vt].join("|"),"g"),xt=RegExp("[\\u200d\\ud800-\\udfff"+Xe+"\\ufe0e\\ufe0f]"),Ct=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,kt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Et=-1,Tt={};Tt[fe]=Tt[se]=Tt[pe]=Tt[de]=Tt[he]=Tt[me]=Tt[ve]=Tt[ge]=Tt[ye]=!0,Tt[B]=Tt[H]=Tt[le]=Tt[V]=Tt[ce]=Tt[$]=Tt[q]=Tt[Q]=Tt[Y]=Tt[Z]=Tt[J]=Tt[te]=Tt[ne]=Tt[re]=Tt[ae]=!1;var St={};St[B]=St[H]=St[le]=St[ce]=St[V]=St[$]=St[fe]=St[se]=St[pe]=St[de]=St[he]=St[Y]=St[Z]=St[J]=St[te]=St[ne]=St[re]=St[oe]=St[me]=St[ve]=St[ge]=St[ye]=!0,St[q]=St[Q]=St[ae]=!1;var Pt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ot=parseFloat,Nt=parseInt,It="object"==typeof e&&e&&e.Object===Object&&e,Dt="object"==typeof self&&self&&self.Object===Object&&self,At=It||Dt||Function("return this")(),jt="object"==typeof t&&t&&!t.nodeType&&t,Rt=jt&&"object"==typeof r&&r&&!r.nodeType&&r,Ft=Rt&&Rt.exports===jt,Mt=Ft&&It.process,Ut=function(){try{return Mt&&Mt.binding&&Mt.binding("util")}catch(e){}}(),Lt=Ut&&Ut.isArrayBuffer,zt=Ut&&Ut.isDate,Bt=Ut&&Ut.isMap,Ht=Ut&&Ut.isRegExp,Wt=Ut&&Ut.isSet,Vt=Ut&&Ut.isTypedArray;function $t(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Kt(e,t,n,r){for(var o=-1,i=null==e?0:e.length;++o<i;){var a=e[o];t(r,a,n(a),e)}return r}function qt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Qt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Gt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function Yt(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}function Zt(e,t){return!!(null==e?0:e.length)&&ln(e,t,0)>-1}function Xt(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}function Jt(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}function en(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}function tn(e,t,n,r){var o=-1,i=null==e?0:e.length;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function nn(e,t,n,r){var o=null==e?0:e.length;for(r&&o&&(n=e[--o]);o--;)n=t(n,e[o],o,e);return n}function rn(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var on=pn("length");function an(e,t,n){var r;return n(e,function(e,n,o){if(t(e,n,o))return r=n,!1}),r}function un(e,t,n,r){for(var o=e.length,i=n+(r?1:-1);r?i--:++i<o;)if(t(e[i],i,e))return i;return-1}function ln(e,t,n){return t==t?function(e,t,n){var r=n-1,o=e.length;for(;++r<o;)if(e[r]===t)return r;return-1}(e,t,n):un(e,fn,n)}function cn(e,t,n,r){for(var o=n-1,i=e.length;++o<i;)if(r(e[o],t))return o;return-1}function fn(e){return e!=e}function sn(e,t){var n=null==e?0:e.length;return n?mn(e,t)/n:F}function pn(e){return function(t){return null==t?i:t[e]}}function dn(e){return function(t){return null==e?i:e[t]}}function hn(e,t,n,r,o){return o(e,function(e,o,i){n=r?(r=!1,e):t(n,e,o,i)}),n}function mn(e,t){for(var n,r=-1,o=e.length;++r<o;){var a=t(e[r]);a!==i&&(n=n===i?a:n+a)}return n}function vn(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function gn(e){return function(t){return e(t)}}function yn(e,t){return Jt(t,function(t){return e[t]})}function bn(e,t){return e.has(t)}function _n(e,t){for(var n=-1,r=e.length;++n<r&&ln(t,e[n],0)>-1;);return n}function wn(e,t){for(var n=e.length;n--&&ln(t,e[n],0)>-1;);return n}var xn=dn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Cn=dn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function kn(e){return"\\"+Pt[e]}function En(e){return xt.test(e)}function Tn(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function Sn(e,t){return function(n){return e(t(n))}}function Pn(e,t){for(var n=-1,r=e.length,o=0,i=[];++n<r;){var a=e[n];a!==t&&a!==s||(e[n]=s,i[o++]=n)}return i}function On(e,t){return"__proto__"==t?i:e[t]}function Nn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function In(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function Dn(e){return En(e)?function(e){var t=_t.lastIndex=0;for(;_t.test(e);)++t;return t}(e):on(e)}function An(e){return En(e)?function(e){return e.match(_t)||[]}(e):function(e){return e.split("")}(e)}var jn=dn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Rn=function e(t){var n,r=(t=null==t?At:Rn.defaults(At.Object(),t,Rn.pick(At,kt))).Array,o=t.Date,Xe=t.Error,Je=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,rt=t.String,ot=t.TypeError,it=r.prototype,at=Je.prototype,ut=tt.prototype,lt=t["__core-js_shared__"],ct=at.toString,ft=ut.hasOwnProperty,st=0,pt=(n=/[^.]+$/.exec(lt&&lt.keys&&lt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",dt=ut.toString,ht=ct.call(tt),mt=At._,vt=nt("^"+ct.call(ft).replace(De,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),gt=Ft?t.Buffer:i,_t=t.Symbol,xt=t.Uint8Array,Pt=gt?gt.allocUnsafe:i,It=Sn(tt.getPrototypeOf,tt),Dt=tt.create,jt=ut.propertyIsEnumerable,Rt=it.splice,Mt=_t?_t.isConcatSpreadable:i,Ut=_t?_t.iterator:i,on=_t?_t.toStringTag:i,dn=function(){try{var e=zi(tt,"defineProperty");return e({},"",{}),e}catch(e){}}(),Fn=t.clearTimeout!==At.clearTimeout&&t.clearTimeout,Mn=o&&o.now!==At.Date.now&&o.now,Un=t.setTimeout!==At.setTimeout&&t.setTimeout,Ln=et.ceil,zn=et.floor,Bn=tt.getOwnPropertySymbols,Hn=gt?gt.isBuffer:i,Wn=t.isFinite,Vn=it.join,$n=Sn(tt.keys,tt),Kn=et.max,qn=et.min,Qn=o.now,Gn=t.parseInt,Yn=et.random,Zn=it.reverse,Xn=zi(t,"DataView"),Jn=zi(t,"Map"),er=zi(t,"Promise"),tr=zi(t,"Set"),nr=zi(t,"WeakMap"),rr=zi(tt,"create"),or=nr&&new nr,ir={},ar=sa(Xn),ur=sa(Jn),lr=sa(er),cr=sa(tr),fr=sa(nr),sr=_t?_t.prototype:i,pr=sr?sr.valueOf:i,dr=sr?sr.toString:i;function hr(e){if(Pu(e)&&!gu(e)&&!(e instanceof yr)){if(e instanceof gr)return e;if(ft.call(e,"__wrapped__"))return pa(e)}return new gr(e)}var mr=function(){function e(){}return function(t){if(!Su(t))return{};if(Dt)return Dt(t);e.prototype=t;var n=new e;return e.prototype=i,n}}();function vr(){}function gr(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function yr(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=M,this.__views__=[]}function br(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function _r(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function wr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function xr(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new wr;++t<n;)this.add(e[t])}function Cr(e){var t=this.__data__=new _r(e);this.size=t.size}function kr(e,t){var n=gu(e),r=!n&&vu(e),o=!n&&!r&&wu(e),i=!n&&!r&&!o&&Fu(e),a=n||r||o||i,u=a?vn(e.length,rt):[],l=u.length;for(var c in e)!t&&!ft.call(e,c)||a&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||qi(c,l))||u.push(c);return u}function Er(e){var t=e.length;return t?e[Co(0,t-1)]:i}function Tr(e,t){return la(oi(e),Rr(t,0,e.length))}function Sr(e){return la(oi(e))}function Pr(e,t,n){(n===i||du(e[t],n))&&(n!==i||t in e)||Ar(e,t,n)}function Or(e,t,n){var r=e[t];ft.call(e,t)&&du(r,n)&&(n!==i||t in e)||Ar(e,t,n)}function Nr(e,t){for(var n=e.length;n--;)if(du(e[n][0],t))return n;return-1}function Ir(e,t,n,r){return zr(e,function(e,o,i){t(r,e,n(e),i)}),r}function Dr(e,t){return e&&ii(t,ol(t),e)}function Ar(e,t,n){"__proto__"==t&&dn?dn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function jr(e,t){for(var n=-1,o=t.length,a=r(o),u=null==e;++n<o;)a[n]=u?i:Ju(e,t[n]);return a}function Rr(e,t,n){return e==e&&(n!==i&&(e=e<=n?e:n),t!==i&&(e=e>=t?e:t)),e}function Fr(e,t,n,r,o,a){var u,l=t&p,c=t&d,f=t&h;if(n&&(u=o?n(e,r,o,a):n(e)),u!==i)return u;if(!Su(e))return e;var s=gu(e);if(s){if(u=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&ft.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(e),!l)return oi(e,u)}else{var m=Wi(e),v=m==Q||m==G;if(wu(e))return Xo(e,l);if(m==J||m==B||v&&!o){if(u=c||v?{}:$i(e),!l)return c?function(e,t){return ii(e,Hi(e),t)}(e,function(e,t){return e&&ii(t,il(t),e)}(u,e)):function(e,t){return ii(e,Bi(e),t)}(e,Dr(u,e))}else{if(!St[m])return o?e:{};u=function(e,t,n){var r,o,i,a=e.constructor;switch(t){case le:return Jo(e);case V:case $:return new a(+e);case ce:return function(e,t){var n=t?Jo(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case fe:case se:case pe:case de:case he:case me:case ve:case ge:case ye:return ei(e,n);case Y:return new a;case Z:case re:return new a(e);case te:return(i=new(o=e).constructor(o.source,We.exec(o))).lastIndex=o.lastIndex,i;case ne:return new a;case oe:return r=e,pr?tt(pr.call(r)):{}}}(e,m,l)}}a||(a=new Cr);var g=a.get(e);if(g)return g;if(a.set(e,u),Au(e))return e.forEach(function(r){u.add(Fr(r,t,n,r,e,a))}),u;if(Ou(e))return e.forEach(function(r,o){u.set(o,Fr(r,t,n,o,e,a))}),u;var y=s?i:(f?c?Ai:Di:c?il:ol)(e);return qt(y||e,function(r,o){y&&(r=e[o=r]),Or(u,o,Fr(r,t,n,o,e,a))}),u}function Mr(e,t,n){var r=n.length;if(null==e)return!r;for(e=tt(e);r--;){var o=n[r],a=t[o],u=e[o];if(u===i&&!(o in e)||!a(u))return!1}return!0}function Ur(e,t,n){if("function"!=typeof e)throw new ot(l);return oa(function(){e.apply(i,n)},t)}function Lr(e,t,n,r){var o=-1,i=Zt,u=!0,l=e.length,c=[],f=t.length;if(!l)return c;n&&(t=Jt(t,gn(n))),r?(i=Xt,u=!1):t.length>=a&&(i=bn,u=!1,t=new xr(t));e:for(;++o<l;){var s=e[o],p=null==n?s:n(s);if(s=r||0!==s?s:0,u&&p==p){for(var d=f;d--;)if(t[d]===p)continue e;c.push(s)}else i(t,p,r)||c.push(s)}return c}hr.templateSettings={escape:Te,evaluate:Se,interpolate:Pe,variable:"",imports:{_:hr}},hr.prototype=vr.prototype,hr.prototype.constructor=hr,gr.prototype=mr(vr.prototype),gr.prototype.constructor=gr,yr.prototype=mr(vr.prototype),yr.prototype.constructor=yr,br.prototype.clear=function(){this.__data__=rr?rr(null):{},this.size=0},br.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},br.prototype.get=function(e){var t=this.__data__;if(rr){var n=t[e];return n===c?i:n}return ft.call(t,e)?t[e]:i},br.prototype.has=function(e){var t=this.__data__;return rr?t[e]!==i:ft.call(t,e)},br.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=rr&&t===i?c:t,this},_r.prototype.clear=function(){this.__data__=[],this.size=0},_r.prototype.delete=function(e){var t=this.__data__,n=Nr(t,e);return!(n<0||(n==t.length-1?t.pop():Rt.call(t,n,1),--this.size,0))},_r.prototype.get=function(e){var t=this.__data__,n=Nr(t,e);return n<0?i:t[n][1]},_r.prototype.has=function(e){return Nr(this.__data__,e)>-1},_r.prototype.set=function(e,t){var n=this.__data__,r=Nr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},wr.prototype.clear=function(){this.size=0,this.__data__={hash:new br,map:new(Jn||_r),string:new br}},wr.prototype.delete=function(e){var t=Ui(this,e).delete(e);return this.size-=t?1:0,t},wr.prototype.get=function(e){return Ui(this,e).get(e)},wr.prototype.has=function(e){return Ui(this,e).has(e)},wr.prototype.set=function(e,t){var n=Ui(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},xr.prototype.add=xr.prototype.push=function(e){return this.__data__.set(e,c),this},xr.prototype.has=function(e){return this.__data__.has(e)},Cr.prototype.clear=function(){this.__data__=new _r,this.size=0},Cr.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Cr.prototype.get=function(e){return this.__data__.get(e)},Cr.prototype.has=function(e){return this.__data__.has(e)},Cr.prototype.set=function(e,t){var n=this.__data__;if(n instanceof _r){var r=n.__data__;if(!Jn||r.length<a-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new wr(r)}return n.set(e,t),this.size=n.size,this};var zr=li(Qr),Br=li(Gr,!0);function Hr(e,t){var n=!0;return zr(e,function(e,r,o){return n=!!t(e,r,o)}),n}function Wr(e,t,n){for(var r=-1,o=e.length;++r<o;){var a=e[r],u=t(a);if(null!=u&&(l===i?u==u&&!Ru(u):n(u,l)))var l=u,c=a}return c}function Vr(e,t){var n=[];return zr(e,function(e,r,o){t(e,r,o)&&n.push(e)}),n}function $r(e,t,n,r,o){var i=-1,a=e.length;for(n||(n=Ki),o||(o=[]);++i<a;){var u=e[i];t>0&&n(u)?t>1?$r(u,t-1,n,r,o):en(o,u):r||(o[o.length]=u)}return o}var Kr=ci(),qr=ci(!0);function Qr(e,t){return e&&Kr(e,t,ol)}function Gr(e,t){return e&&qr(e,t,ol)}function Yr(e,t){return Yt(t,function(t){return ku(e[t])})}function Zr(e,t){for(var n=0,r=(t=Qo(t,e)).length;null!=e&&n<r;)e=e[fa(t[n++])];return n&&n==r?e:i}function Xr(e,t,n){var r=t(e);return gu(e)?r:en(r,n(e))}function Jr(e){return null==e?e===i?ie:X:on&&on in tt(e)?function(e){var t=ft.call(e,on),n=e[on];try{e[on]=i;var r=!0}catch(e){}var o=dt.call(e);return r&&(t?e[on]=n:delete e[on]),o}(e):function(e){return dt.call(e)}(e)}function eo(e,t){return e>t}function to(e,t){return null!=e&&ft.call(e,t)}function no(e,t){return null!=e&&t in tt(e)}function ro(e,t,n){for(var o=n?Xt:Zt,a=e[0].length,u=e.length,l=u,c=r(u),f=1/0,s=[];l--;){var p=e[l];l&&t&&(p=Jt(p,gn(t))),f=qn(p.length,f),c[l]=!n&&(t||a>=120&&p.length>=120)?new xr(l&&p):i}p=e[0];var d=-1,h=c[0];e:for(;++d<a&&s.length<f;){var m=p[d],v=t?t(m):m;if(m=n||0!==m?m:0,!(h?bn(h,v):o(s,v,n))){for(l=u;--l;){var g=c[l];if(!(g?bn(g,v):o(e[l],v,n)))continue e}h&&h.push(v),s.push(m)}}return s}function oo(e,t,n){var r=null==(e=na(e,t=Qo(t,e)))?e:e[fa(Ca(t))];return null==r?i:$t(r,e,n)}function io(e){return Pu(e)&&Jr(e)==B}function ao(e,t,n,r,o){return e===t||(null==e||null==t||!Pu(e)&&!Pu(t)?e!=e&&t!=t:function(e,t,n,r,o,a){var u=gu(e),l=gu(t),c=u?H:Wi(e),f=l?H:Wi(t),s=(c=c==B?J:c)==J,p=(f=f==B?J:f)==J,d=c==f;if(d&&wu(e)){if(!wu(t))return!1;u=!0,s=!1}if(d&&!s)return a||(a=new Cr),u||Fu(e)?Ni(e,t,n,r,o,a):function(e,t,n,r,o,i,a){switch(n){case ce:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case le:return!(e.byteLength!=t.byteLength||!i(new xt(e),new xt(t)));case V:case $:case Z:return du(+e,+t);case q:return e.name==t.name&&e.message==t.message;case te:case re:return e==t+"";case Y:var u=Tn;case ne:var l=r&m;if(u||(u=Nn),e.size!=t.size&&!l)return!1;var c=a.get(e);if(c)return c==t;r|=v,a.set(e,t);var f=Ni(u(e),u(t),r,o,i,a);return a.delete(e),f;case oe:if(pr)return pr.call(e)==pr.call(t)}return!1}(e,t,c,n,r,o,a);if(!(n&m)){var h=s&&ft.call(e,"__wrapped__"),g=p&&ft.call(t,"__wrapped__");if(h||g){var y=h?e.value():e,b=g?t.value():t;return a||(a=new Cr),o(y,b,n,r,a)}}return!!d&&(a||(a=new Cr),function(e,t,n,r,o,a){var u=n&m,l=Di(e),c=l.length,f=Di(t).length;if(c!=f&&!u)return!1;for(var s=c;s--;){var p=l[s];if(!(u?p in t:ft.call(t,p)))return!1}var d=a.get(e);if(d&&a.get(t))return d==t;var h=!0;a.set(e,t),a.set(t,e);for(var v=u;++s<c;){p=l[s];var g=e[p],y=t[p];if(r)var b=u?r(y,g,p,t,e,a):r(g,y,p,e,t,a);if(!(b===i?g===y||o(g,y,n,r,a):b)){h=!1;break}v||(v="constructor"==p)}if(h&&!v){var _=e.constructor,w=t.constructor;_!=w&&"constructor"in e&&"constructor"in t&&!("function"==typeof _&&_ instanceof _&&"function"==typeof w&&w instanceof w)&&(h=!1)}return a.delete(e),a.delete(t),h}(e,t,n,r,o,a))}(e,t,n,r,ao,o))}function uo(e,t,n,r){var o=n.length,a=o,u=!r;if(null==e)return!a;for(e=tt(e);o--;){var l=n[o];if(u&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++o<a;){var c=(l=n[o])[0],f=e[c],s=l[1];if(u&&l[2]){if(f===i&&!(c in e))return!1}else{var p=new Cr;if(r)var d=r(f,s,c,e,t,p);if(!(d===i?ao(s,f,m|v,r,p):d))return!1}}return!0}function lo(e){return!(!Su(e)||pt&&pt in e)&&(ku(e)?vt:Ke).test(sa(e))}function co(e){return"function"==typeof e?e:null==e?Nl:"object"==typeof e?gu(e)?vo(e[0],e[1]):mo(e):Ll(e)}function fo(e){if(!Xi(e))return $n(e);var t=[];for(var n in tt(e))ft.call(e,n)&&"constructor"!=n&&t.push(n);return t}function so(e){if(!Su(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=Xi(e),n=[];for(var r in e)("constructor"!=r||!t&&ft.call(e,r))&&n.push(r);return n}function po(e,t){return e<t}function ho(e,t){var n=-1,o=bu(e)?r(e.length):[];return zr(e,function(e,r,i){o[++n]=t(e,r,i)}),o}function mo(e){var t=Li(e);return 1==t.length&&t[0][2]?ea(t[0][0],t[0][1]):function(n){return n===e||uo(n,e,t)}}function vo(e,t){return Gi(e)&&Ji(t)?ea(fa(e),t):function(n){var r=Ju(n,e);return r===i&&r===t?el(n,e):ao(t,r,m|v)}}function go(e,t,n,r,o){e!==t&&Kr(t,function(a,u){if(Su(a))o||(o=new Cr),function(e,t,n,r,o,a,u){var l=On(e,n),c=On(t,n),f=u.get(c);if(f)Pr(e,n,f);else{var s=a?a(l,c,n+"",e,t,u):i,p=s===i;if(p){var d=gu(c),h=!d&&wu(c),m=!d&&!h&&Fu(c);s=c,d||h||m?gu(l)?s=l:_u(l)?s=oi(l):h?(p=!1,s=Xo(c,!0)):m?(p=!1,s=ei(c,!0)):s=[]:Iu(c)||vu(c)?(s=l,vu(l)?s=Vu(l):(!Su(l)||r&&ku(l))&&(s=$i(c))):p=!1}p&&(u.set(c,s),o(s,c,r,a,u),u.delete(c)),Pr(e,n,s)}}(e,t,u,n,go,r,o);else{var l=r?r(On(e,u),a,u+"",e,t,o):i;l===i&&(l=a),Pr(e,u,l)}},il)}function yo(e,t){var n=e.length;if(n)return qi(t+=t<0?n:0,n)?e[t]:i}function bo(e,t,n){var r=-1;return t=Jt(t.length?t:[Nl],gn(Mi())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(ho(e,function(e,n,o){return{criteria:Jt(t,function(t){return t(e)}),index:++r,value:e}}),function(e,t){return function(e,t,n){for(var r=-1,o=e.criteria,i=t.criteria,a=o.length,u=n.length;++r<a;){var l=ti(o[r],i[r]);if(l){if(r>=u)return l;var c=n[r];return l*("desc"==c?-1:1)}}return e.index-t.index}(e,t,n)})}function _o(e,t,n){for(var r=-1,o=t.length,i={};++r<o;){var a=t[r],u=Zr(e,a);n(u,a)&&Po(i,Qo(a,e),u)}return i}function wo(e,t,n,r){var o=r?cn:ln,i=-1,a=t.length,u=e;for(e===t&&(t=oi(t)),n&&(u=Jt(e,gn(n)));++i<a;)for(var l=0,c=t[i],f=n?n(c):c;(l=o(u,f,l,r))>-1;)u!==e&&Rt.call(u,l,1),Rt.call(e,l,1);return e}function xo(e,t){for(var n=e?t.length:0,r=n-1;n--;){var o=t[n];if(n==r||o!==i){var i=o;qi(o)?Rt.call(e,o,1):zo(e,o)}}return e}function Co(e,t){return e+zn(Yn()*(t-e+1))}function ko(e,t){var n="";if(!e||t<1||t>j)return n;do{t%2&&(n+=e),(t=zn(t/2))&&(e+=e)}while(t);return n}function Eo(e,t){return ia(ta(e,t,Nl),e+"")}function To(e){return Er(dl(e))}function So(e,t){var n=dl(e);return la(n,Rr(t,0,n.length))}function Po(e,t,n,r){if(!Su(e))return e;for(var o=-1,a=(t=Qo(t,e)).length,u=a-1,l=e;null!=l&&++o<a;){var c=fa(t[o]),f=n;if(o!=u){var s=l[c];(f=r?r(s,c,l):i)===i&&(f=Su(s)?s:qi(t[o+1])?[]:{})}Or(l,c,f),l=l[c]}return e}var Oo=or?function(e,t){return or.set(e,t),e}:Nl,No=dn?function(e,t){return dn(e,"toString",{configurable:!0,enumerable:!1,value:Sl(t),writable:!0})}:Nl;function Io(e){return la(dl(e))}function Do(e,t,n){var o=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var a=r(i);++o<i;)a[o]=e[o+t];return a}function Ao(e,t){var n;return zr(e,function(e,r,o){return!(n=t(e,r,o))}),!!n}function jo(e,t,n){var r=0,o=null==e?r:e.length;if("number"==typeof t&&t==t&&o<=L){for(;r<o;){var i=r+o>>>1,a=e[i];null!==a&&!Ru(a)&&(n?a<=t:a<t)?r=i+1:o=i}return o}return Ro(e,t,Nl,n)}function Ro(e,t,n,r){t=n(t);for(var o=0,a=null==e?0:e.length,u=t!=t,l=null===t,c=Ru(t),f=t===i;o<a;){var s=zn((o+a)/2),p=n(e[s]),d=p!==i,h=null===p,m=p==p,v=Ru(p);if(u)var g=r||m;else g=f?m&&(r||d):l?m&&d&&(r||!h):c?m&&d&&!h&&(r||!v):!h&&!v&&(r?p<=t:p<t);g?o=s+1:a=s}return qn(a,U)}function Fo(e,t){for(var n=-1,r=e.length,o=0,i=[];++n<r;){var a=e[n],u=t?t(a):a;if(!n||!du(u,l)){var l=u;i[o++]=0===a?0:a}}return i}function Mo(e){return"number"==typeof e?e:Ru(e)?F:+e}function Uo(e){if("string"==typeof e)return e;if(gu(e))return Jt(e,Uo)+"";if(Ru(e))return dr?dr.call(e):"";var t=e+"";return"0"==t&&1/e==-A?"-0":t}function Lo(e,t,n){var r=-1,o=Zt,i=e.length,u=!0,l=[],c=l;if(n)u=!1,o=Xt;else if(i>=a){var f=t?null:ki(e);if(f)return Nn(f);u=!1,o=bn,c=new xr}else c=t?[]:l;e:for(;++r<i;){var s=e[r],p=t?t(s):s;if(s=n||0!==s?s:0,u&&p==p){for(var d=c.length;d--;)if(c[d]===p)continue e;t&&c.push(p),l.push(s)}else o(c,p,n)||(c!==l&&c.push(p),l.push(s))}return l}function zo(e,t){return null==(e=na(e,t=Qo(t,e)))||delete e[fa(Ca(t))]}function Bo(e,t,n,r){return Po(e,t,n(Zr(e,t)),r)}function Ho(e,t,n,r){for(var o=e.length,i=r?o:-1;(r?i--:++i<o)&&t(e[i],i,e););return n?Do(e,r?0:i,r?i+1:o):Do(e,r?i+1:0,r?o:i)}function Wo(e,t){var n=e;return n instanceof yr&&(n=n.value()),tn(t,function(e,t){return t.func.apply(t.thisArg,en([e],t.args))},n)}function Vo(e,t,n){var o=e.length;if(o<2)return o?Lo(e[0]):[];for(var i=-1,a=r(o);++i<o;)for(var u=e[i],l=-1;++l<o;)l!=i&&(a[i]=Lr(a[i]||u,e[l],t,n));return Lo($r(a,1),t,n)}function $o(e,t,n){for(var r=-1,o=e.length,a=t.length,u={};++r<o;){var l=r<a?t[r]:i;n(u,e[r],l)}return u}function Ko(e){return _u(e)?e:[]}function qo(e){return"function"==typeof e?e:Nl}function Qo(e,t){return gu(e)?e:Gi(e,t)?[e]:ca($u(e))}var Go=Eo;function Yo(e,t,n){var r=e.length;return n=n===i?r:n,!t&&n>=r?e:Do(e,t,n)}var Zo=Fn||function(e){return At.clearTimeout(e)};function Xo(e,t){if(t)return e.slice();var n=e.length,r=Pt?Pt(n):new e.constructor(n);return e.copy(r),r}function Jo(e){var t=new e.constructor(e.byteLength);return new xt(t).set(new xt(e)),t}function ei(e,t){var n=t?Jo(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function ti(e,t){if(e!==t){var n=e!==i,r=null===e,o=e==e,a=Ru(e),u=t!==i,l=null===t,c=t==t,f=Ru(t);if(!l&&!f&&!a&&e>t||a&&u&&c&&!l&&!f||r&&u&&c||!n&&c||!o)return 1;if(!r&&!a&&!f&&e<t||f&&n&&o&&!r&&!a||l&&n&&o||!u&&o||!c)return-1}return 0}function ni(e,t,n,o){for(var i=-1,a=e.length,u=n.length,l=-1,c=t.length,f=Kn(a-u,0),s=r(c+f),p=!o;++l<c;)s[l]=t[l];for(;++i<u;)(p||i<a)&&(s[n[i]]=e[i]);for(;f--;)s[l++]=e[i++];return s}function ri(e,t,n,o){for(var i=-1,a=e.length,u=-1,l=n.length,c=-1,f=t.length,s=Kn(a-l,0),p=r(s+f),d=!o;++i<s;)p[i]=e[i];for(var h=i;++c<f;)p[h+c]=t[c];for(;++u<l;)(d||i<a)&&(p[h+n[u]]=e[i++]);return p}function oi(e,t){var n=-1,o=e.length;for(t||(t=r(o));++n<o;)t[n]=e[n];return t}function ii(e,t,n,r){var o=!n;n||(n={});for(var a=-1,u=t.length;++a<u;){var l=t[a],c=r?r(n[l],e[l],l,n,e):i;c===i&&(c=e[l]),o?Ar(n,l,c):Or(n,l,c)}return n}function ai(e,t){return function(n,r){var o=gu(n)?Kt:Ir,i=t?t():{};return o(n,e,Mi(r,2),i)}}function ui(e){return Eo(function(t,n){var r=-1,o=n.length,a=o>1?n[o-1]:i,u=o>2?n[2]:i;for(a=e.length>3&&"function"==typeof a?(o--,a):i,u&&Qi(n[0],n[1],u)&&(a=o<3?i:a,o=1),t=tt(t);++r<o;){var l=n[r];l&&e(t,l,r,a)}return t})}function li(e,t){return function(n,r){if(null==n)return n;if(!bu(n))return e(n,r);for(var o=n.length,i=t?o:-1,a=tt(n);(t?i--:++i<o)&&!1!==r(a[i],i,a););return n}}function ci(e){return function(t,n,r){for(var o=-1,i=tt(t),a=r(t),u=a.length;u--;){var l=a[e?u:++o];if(!1===n(i[l],l,i))break}return t}}function fi(e){return function(t){var n=En(t=$u(t))?An(t):i,r=n?n[0]:t.charAt(0),o=n?Yo(n,1).join(""):t.slice(1);return r[e]()+o}}function si(e){return function(t){return tn(kl(vl(t).replace(yt,"")),e,"")}}function pi(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=mr(e.prototype),r=e.apply(n,t);return Su(r)?r:n}}function di(e){return function(t,n,r){var o=tt(t);if(!bu(t)){var a=Mi(n,3);t=ol(t),n=function(e){return a(o[e],e,o)}}var u=e(t,n,r);return u>-1?o[a?t[u]:u]:i}}function hi(e){return Ii(function(t){var n=t.length,r=n,o=gr.prototype.thru;for(e&&t.reverse();r--;){var a=t[r];if("function"!=typeof a)throw new ot(l);if(o&&!u&&"wrapper"==Ri(a))var u=new gr([],!0)}for(r=u?r:n;++r<n;){var c=Ri(a=t[r]),f="wrapper"==c?ji(a):i;u=f&&Yi(f[0])&&f[1]==(k|_|x|E)&&!f[4].length&&1==f[9]?u[Ri(f[0])].apply(u,f[3]):1==a.length&&Yi(a)?u[c]():u.thru(a)}return function(){var e=arguments,r=e[0];if(u&&1==e.length&&gu(r))return u.plant(r).value();for(var o=0,i=n?t[o].apply(this,e):r;++o<n;)i=t[o].call(this,i);return i}})}function mi(e,t,n,o,a,u,l,c,f,s){var p=t&k,d=t&g,h=t&y,m=t&(_|w),v=t&T,b=h?i:pi(e);return function g(){for(var y=arguments.length,_=r(y),w=y;w--;)_[w]=arguments[w];if(m)var x=Fi(g),C=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(_,x);if(o&&(_=ni(_,o,a,m)),u&&(_=ri(_,u,l,m)),y-=C,m&&y<s){var k=Pn(_,x);return xi(e,t,mi,g.placeholder,n,_,k,c,f,s-y)}var E=d?n:this,T=h?E[e]:e;return y=_.length,c?_=function(e,t){for(var n=e.length,r=qn(t.length,n),o=oi(e);r--;){var a=t[r];e[r]=qi(a,n)?o[a]:i}return e}(_,c):v&&y>1&&_.reverse(),p&&f<y&&(_.length=f),this&&this!==At&&this instanceof g&&(T=b||pi(T)),T.apply(E,_)}}function vi(e,t){return function(n,r){return function(e,t,n,r){return Qr(e,function(e,o,i){t(r,n(e),o,i)}),r}(n,e,t(r),{})}}function gi(e,t){return function(n,r){var o;if(n===i&&r===i)return t;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=Uo(n),r=Uo(r)):(n=Mo(n),r=Mo(r)),o=e(n,r)}return o}}function yi(e){return Ii(function(t){return t=Jt(t,gn(Mi())),Eo(function(n){var r=this;return e(t,function(e){return $t(e,r,n)})})})}function bi(e,t){var n=(t=t===i?" ":Uo(t)).length;if(n<2)return n?ko(t,e):t;var r=ko(t,Ln(e/Dn(t)));return En(t)?Yo(An(r),0,e).join(""):r.slice(0,e)}function _i(e){return function(t,n,o){return o&&"number"!=typeof o&&Qi(t,n,o)&&(n=o=i),t=zu(t),n===i?(n=t,t=0):n=zu(n),function(e,t,n,o){for(var i=-1,a=Kn(Ln((t-e)/(n||1)),0),u=r(a);a--;)u[o?a:++i]=e,e+=n;return u}(t,n,o=o===i?t<n?1:-1:zu(o),e)}}function wi(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=Wu(t),n=Wu(n)),e(t,n)}}function xi(e,t,n,r,o,a,u,l,c,f){var s=t&_;t|=s?x:C,(t&=~(s?C:x))&b||(t&=~(g|y));var p=[e,t,o,s?a:i,s?u:i,s?i:a,s?i:u,l,c,f],d=n.apply(i,p);return Yi(e)&&ra(d,p),d.placeholder=r,aa(d,e,t)}function Ci(e){var t=et[e];return function(e,n){if(e=Wu(e),n=null==n?0:qn(Bu(n),292)){var r=($u(e)+"e").split("e");return+((r=($u(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var ki=tr&&1/Nn(new tr([,-0]))[1]==A?function(e){return new tr(e)}:Rl;function Ei(e){return function(t){var n=Wi(t);return n==Y?Tn(t):n==ne?In(t):function(e,t){return Jt(t,function(t){return[t,e[t]]})}(t,e(t))}}function Ti(e,t,n,o,a,u,c,f){var p=t&y;if(!p&&"function"!=typeof e)throw new ot(l);var d=o?o.length:0;if(d||(t&=~(x|C),o=a=i),c=c===i?c:Kn(Bu(c),0),f=f===i?f:Bu(f),d-=a?a.length:0,t&C){var h=o,m=a;o=a=i}var v=p?i:ji(e),T=[e,t,n,o,a,h,m,u,c,f];if(v&&function(e,t){var n=e[1],r=t[1],o=n|r,i=o<(g|y|k),a=r==k&&n==_||r==k&&n==E&&e[7].length<=t[8]||r==(k|E)&&t[7].length<=t[8]&&n==_;if(!i&&!a)return e;r&g&&(e[2]=t[2],o|=n&g?0:b);var u=t[3];if(u){var l=e[3];e[3]=l?ni(l,u,t[4]):u,e[4]=l?Pn(e[3],s):t[4]}(u=t[5])&&(l=e[5],e[5]=l?ri(l,u,t[6]):u,e[6]=l?Pn(e[5],s):t[6]),(u=t[7])&&(e[7]=u),r&k&&(e[8]=null==e[8]?t[8]:qn(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=o}(T,v),e=T[0],t=T[1],n=T[2],o=T[3],a=T[4],!(f=T[9]=T[9]===i?p?0:e.length:Kn(T[9]-d,0))&&t&(_|w)&&(t&=~(_|w)),t&&t!=g)S=t==_||t==w?function(e,t,n){var o=pi(e);return function a(){for(var u=arguments.length,l=r(u),c=u,f=Fi(a);c--;)l[c]=arguments[c];var s=u<3&&l[0]!==f&&l[u-1]!==f?[]:Pn(l,f);return(u-=s.length)<n?xi(e,t,mi,a.placeholder,i,l,s,i,i,n-u):$t(this&&this!==At&&this instanceof a?o:e,this,l)}}(e,t,f):t!=x&&t!=(g|x)||a.length?mi.apply(i,T):function(e,t,n,o){var i=t&g,a=pi(e);return function t(){for(var u=-1,l=arguments.length,c=-1,f=o.length,s=r(f+l),p=this&&this!==At&&this instanceof t?a:e;++c<f;)s[c]=o[c];for(;l--;)s[c++]=arguments[++u];return $t(p,i?n:this,s)}}(e,t,n,o);else var S=function(e,t,n){var r=t&g,o=pi(e);return function t(){return(this&&this!==At&&this instanceof t?o:e).apply(r?n:this,arguments)}}(e,t,n);return aa((v?Oo:ra)(S,T),e,t)}function Si(e,t,n,r){return e===i||du(e,ut[n])&&!ft.call(r,n)?t:e}function Pi(e,t,n,r,o,a){return Su(e)&&Su(t)&&(a.set(t,e),go(e,t,i,Pi,a),a.delete(t)),e}function Oi(e){return Iu(e)?i:e}function Ni(e,t,n,r,o,a){var u=n&m,l=e.length,c=t.length;if(l!=c&&!(u&&c>l))return!1;var f=a.get(e);if(f&&a.get(t))return f==t;var s=-1,p=!0,d=n&v?new xr:i;for(a.set(e,t),a.set(t,e);++s<l;){var h=e[s],g=t[s];if(r)var y=u?r(g,h,s,t,e,a):r(h,g,s,e,t,a);if(y!==i){if(y)continue;p=!1;break}if(d){if(!rn(t,function(e,t){if(!bn(d,t)&&(h===e||o(h,e,n,r,a)))return d.push(t)})){p=!1;break}}else if(h!==g&&!o(h,g,n,r,a)){p=!1;break}}return a.delete(e),a.delete(t),p}function Ii(e){return ia(ta(e,i,ya),e+"")}function Di(e){return Xr(e,ol,Bi)}function Ai(e){return Xr(e,il,Hi)}var ji=or?function(e){return or.get(e)}:Rl;function Ri(e){for(var t=e.name+"",n=ir[t],r=ft.call(ir,t)?n.length:0;r--;){var o=n[r],i=o.func;if(null==i||i==e)return o.name}return t}function Fi(e){return(ft.call(hr,"placeholder")?hr:e).placeholder}function Mi(){var e=hr.iteratee||Il;return e=e===Il?co:e,arguments.length?e(arguments[0],arguments[1]):e}function Ui(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Li(e){for(var t=ol(e),n=t.length;n--;){var r=t[n],o=e[r];t[n]=[r,o,Ji(o)]}return t}function zi(e,t){var n=function(e,t){return null==e?i:e[t]}(e,t);return lo(n)?n:i}var Bi=Bn?function(e){return null==e?[]:(e=tt(e),Yt(Bn(e),function(t){return jt.call(e,t)}))}:Hl,Hi=Bn?function(e){for(var t=[];e;)en(t,Bi(e)),e=It(e);return t}:Hl,Wi=Jr;function Vi(e,t,n){for(var r=-1,o=(t=Qo(t,e)).length,i=!1;++r<o;){var a=fa(t[r]);if(!(i=null!=e&&n(e,a)))break;e=e[a]}return i||++r!=o?i:!!(o=null==e?0:e.length)&&Tu(o)&&qi(a,o)&&(gu(e)||vu(e))}function $i(e){return"function"!=typeof e.constructor||Xi(e)?{}:mr(It(e))}function Ki(e){return gu(e)||vu(e)||!!(Mt&&e&&e[Mt])}function qi(e,t){var n=typeof e;return!!(t=null==t?j:t)&&("number"==n||"symbol"!=n&&Qe.test(e))&&e>-1&&e%1==0&&e<t}function Qi(e,t,n){if(!Su(n))return!1;var r=typeof t;return!!("number"==r?bu(n)&&qi(t,n.length):"string"==r&&t in n)&&du(n[t],e)}function Gi(e,t){if(gu(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Ru(e))||Ne.test(e)||!Oe.test(e)||null!=t&&e in tt(t)}function Yi(e){var t=Ri(e),n=hr[t];if("function"!=typeof n||!(t in yr.prototype))return!1;if(e===n)return!0;var r=ji(n);return!!r&&e===r[0]}(Xn&&Wi(new Xn(new ArrayBuffer(1)))!=ce||Jn&&Wi(new Jn)!=Y||er&&"[object Promise]"!=Wi(er.resolve())||tr&&Wi(new tr)!=ne||nr&&Wi(new nr)!=ae)&&(Wi=function(e){var t=Jr(e),n=t==J?e.constructor:i,r=n?sa(n):"";if(r)switch(r){case ar:return ce;case ur:return Y;case lr:return"[object Promise]";case cr:return ne;case fr:return ae}return t});var Zi=lt?ku:Wl;function Xi(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||ut)}function Ji(e){return e==e&&!Su(e)}function ea(e,t){return function(n){return null!=n&&n[e]===t&&(t!==i||e in tt(n))}}function ta(e,t,n){return t=Kn(t===i?e.length-1:t,0),function(){for(var o=arguments,i=-1,a=Kn(o.length-t,0),u=r(a);++i<a;)u[i]=o[t+i];i=-1;for(var l=r(t+1);++i<t;)l[i]=o[i];return l[t]=n(u),$t(e,this,l)}}function na(e,t){return t.length<2?e:Zr(e,Do(t,0,-1))}var ra=ua(Oo),oa=Un||function(e,t){return At.setTimeout(e,t)},ia=ua(No);function aa(e,t,n){var r=t+"";return ia(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(Me,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return qt(z,function(n){var r="_."+n[0];t&n[1]&&!Zt(e,r)&&e.push(r)}),e.sort()}(function(e){var t=e.match(Ue);return t?t[1].split(Le):[]}(r),n)))}function ua(e){var t=0,n=0;return function(){var r=Qn(),o=N-(r-n);if(n=r,o>0){if(++t>=O)return arguments[0]}else t=0;return e.apply(i,arguments)}}function la(e,t){var n=-1,r=e.length,o=r-1;for(t=t===i?r:t;++n<t;){var a=Co(n,o),u=e[a];e[a]=e[n],e[n]=u}return e.length=t,e}var ca=function(e){var t=uu(e,function(e){return n.size===f&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(Ie,function(e,n,r,o){t.push(r?o.replace(Be,"$1"):n||e)}),t});function fa(e){if("string"==typeof e||Ru(e))return e;var t=e+"";return"0"==t&&1/e==-A?"-0":t}function sa(e){if(null!=e){try{return ct.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function pa(e){if(e instanceof yr)return e.clone();var t=new gr(e.__wrapped__,e.__chain__);return t.__actions__=oi(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var da=Eo(function(e,t){return _u(e)?Lr(e,$r(t,1,_u,!0)):[]}),ha=Eo(function(e,t){var n=Ca(t);return _u(n)&&(n=i),_u(e)?Lr(e,$r(t,1,_u,!0),Mi(n,2)):[]}),ma=Eo(function(e,t){var n=Ca(t);return _u(n)&&(n=i),_u(e)?Lr(e,$r(t,1,_u,!0),i,n):[]});function va(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:Bu(n);return o<0&&(o=Kn(r+o,0)),un(e,Mi(t,3),o)}function ga(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return n!==i&&(o=Bu(n),o=n<0?Kn(r+o,0):qn(o,r-1)),un(e,Mi(t,3),o,!0)}function ya(e){return null!=e&&e.length?$r(e,1):[]}function ba(e){return e&&e.length?e[0]:i}var _a=Eo(function(e){var t=Jt(e,Ko);return t.length&&t[0]===e[0]?ro(t):[]}),wa=Eo(function(e){var t=Ca(e),n=Jt(e,Ko);return t===Ca(n)?t=i:n.pop(),n.length&&n[0]===e[0]?ro(n,Mi(t,2)):[]}),xa=Eo(function(e){var t=Ca(e),n=Jt(e,Ko);return(t="function"==typeof t?t:i)&&n.pop(),n.length&&n[0]===e[0]?ro(n,i,t):[]});function Ca(e){var t=null==e?0:e.length;return t?e[t-1]:i}var ka=Eo(Ea);function Ea(e,t){return e&&e.length&&t&&t.length?wo(e,t):e}var Ta=Ii(function(e,t){var n=null==e?0:e.length,r=jr(e,t);return xo(e,Jt(t,function(e){return qi(e,n)?+e:e}).sort(ti)),r});function Sa(e){return null==e?e:Zn.call(e)}var Pa=Eo(function(e){return Lo($r(e,1,_u,!0))}),Oa=Eo(function(e){var t=Ca(e);return _u(t)&&(t=i),Lo($r(e,1,_u,!0),Mi(t,2))}),Na=Eo(function(e){var t=Ca(e);return t="function"==typeof t?t:i,Lo($r(e,1,_u,!0),i,t)});function Ia(e){if(!e||!e.length)return[];var t=0;return e=Yt(e,function(e){if(_u(e))return t=Kn(e.length,t),!0}),vn(t,function(t){return Jt(e,pn(t))})}function Da(e,t){if(!e||!e.length)return[];var n=Ia(e);return null==t?n:Jt(n,function(e){return $t(t,i,e)})}var Aa=Eo(function(e,t){return _u(e)?Lr(e,t):[]}),ja=Eo(function(e){return Vo(Yt(e,_u))}),Ra=Eo(function(e){var t=Ca(e);return _u(t)&&(t=i),Vo(Yt(e,_u),Mi(t,2))}),Fa=Eo(function(e){var t=Ca(e);return t="function"==typeof t?t:i,Vo(Yt(e,_u),i,t)}),Ma=Eo(Ia);var Ua=Eo(function(e){var t=e.length,n=t>1?e[t-1]:i;return Da(e,n="function"==typeof n?(e.pop(),n):i)});function La(e){var t=hr(e);return t.__chain__=!0,t}function za(e,t){return t(e)}var Ba=Ii(function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,o=function(t){return jr(t,e)};return!(t>1||this.__actions__.length)&&r instanceof yr&&qi(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:za,args:[o],thisArg:i}),new gr(r,this.__chain__).thru(function(e){return t&&!e.length&&e.push(i),e})):this.thru(o)});var Ha=ai(function(e,t,n){ft.call(e,n)?++e[n]:Ar(e,n,1)});var Wa=di(va),Va=di(ga);function $a(e,t){return(gu(e)?qt:zr)(e,Mi(t,3))}function Ka(e,t){return(gu(e)?Qt:Br)(e,Mi(t,3))}var qa=ai(function(e,t,n){ft.call(e,n)?e[n].push(t):Ar(e,n,[t])});var Qa=Eo(function(e,t,n){var o=-1,i="function"==typeof t,a=bu(e)?r(e.length):[];return zr(e,function(e){a[++o]=i?$t(t,e,n):oo(e,t,n)}),a}),Ga=ai(function(e,t,n){Ar(e,n,t)});function Ya(e,t){return(gu(e)?Jt:ho)(e,Mi(t,3))}var Za=ai(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]});var Xa=Eo(function(e,t){if(null==e)return[];var n=t.length;return n>1&&Qi(e,t[0],t[1])?t=[]:n>2&&Qi(t[0],t[1],t[2])&&(t=[t[0]]),bo(e,$r(t,1),[])}),Ja=Mn||function(){return At.Date.now()};function eu(e,t,n){return t=n?i:t,t=e&&null==t?e.length:t,Ti(e,k,i,i,i,i,t)}function tu(e,t){var n;if("function"!=typeof t)throw new ot(l);return e=Bu(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=i),n}}var nu=Eo(function(e,t,n){var r=g;if(n.length){var o=Pn(n,Fi(nu));r|=x}return Ti(e,r,t,n,o)}),ru=Eo(function(e,t,n){var r=g|y;if(n.length){var o=Pn(n,Fi(ru));r|=x}return Ti(t,r,e,n,o)});function ou(e,t,n){var r,o,a,u,c,f,s=0,p=!1,d=!1,h=!0;if("function"!=typeof e)throw new ot(l);function m(t){var n=r,a=o;return r=o=i,s=t,u=e.apply(a,n)}function v(e){var n=e-f;return f===i||n>=t||n<0||d&&e-s>=a}function g(){var e=Ja();if(v(e))return y(e);c=oa(g,function(e){var n=t-(e-f);return d?qn(n,a-(e-s)):n}(e))}function y(e){return c=i,h&&r?m(e):(r=o=i,u)}function b(){var e=Ja(),n=v(e);if(r=arguments,o=this,f=e,n){if(c===i)return function(e){return s=e,c=oa(g,t),p?m(e):u}(f);if(d)return c=oa(g,t),m(f)}return c===i&&(c=oa(g,t)),u}return t=Wu(t)||0,Su(n)&&(p=!!n.leading,a=(d="maxWait"in n)?Kn(Wu(n.maxWait)||0,t):a,h="trailing"in n?!!n.trailing:h),b.cancel=function(){c!==i&&Zo(c),s=0,r=f=o=c=i},b.flush=function(){return c===i?u:y(Ja())},b}var iu=Eo(function(e,t){return Ur(e,1,t)}),au=Eo(function(e,t,n){return Ur(e,Wu(t)||0,n)});function uu(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new ot(l);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(uu.Cache||wr),n}function lu(e){if("function"!=typeof e)throw new ot(l);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}uu.Cache=wr;var cu=Go(function(e,t){var n=(t=1==t.length&&gu(t[0])?Jt(t[0],gn(Mi())):Jt($r(t,1),gn(Mi()))).length;return Eo(function(r){for(var o=-1,i=qn(r.length,n);++o<i;)r[o]=t[o].call(this,r[o]);return $t(e,this,r)})}),fu=Eo(function(e,t){var n=Pn(t,Fi(fu));return Ti(e,x,i,t,n)}),su=Eo(function(e,t){var n=Pn(t,Fi(su));return Ti(e,C,i,t,n)}),pu=Ii(function(e,t){return Ti(e,E,i,i,i,t)});function du(e,t){return e===t||e!=e&&t!=t}var hu=wi(eo),mu=wi(function(e,t){return e>=t}),vu=io(function(){return arguments}())?io:function(e){return Pu(e)&&ft.call(e,"callee")&&!jt.call(e,"callee")},gu=r.isArray,yu=Lt?gn(Lt):function(e){return Pu(e)&&Jr(e)==le};function bu(e){return null!=e&&Tu(e.length)&&!ku(e)}function _u(e){return Pu(e)&&bu(e)}var wu=Hn||Wl,xu=zt?gn(zt):function(e){return Pu(e)&&Jr(e)==$};function Cu(e){if(!Pu(e))return!1;var t=Jr(e);return t==q||t==K||"string"==typeof e.message&&"string"==typeof e.name&&!Iu(e)}function ku(e){if(!Su(e))return!1;var t=Jr(e);return t==Q||t==G||t==W||t==ee}function Eu(e){return"number"==typeof e&&e==Bu(e)}function Tu(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=j}function Su(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Pu(e){return null!=e&&"object"==typeof e}var Ou=Bt?gn(Bt):function(e){return Pu(e)&&Wi(e)==Y};function Nu(e){return"number"==typeof e||Pu(e)&&Jr(e)==Z}function Iu(e){if(!Pu(e)||Jr(e)!=J)return!1;var t=It(e);if(null===t)return!0;var n=ft.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&ct.call(n)==ht}var Du=Ht?gn(Ht):function(e){return Pu(e)&&Jr(e)==te};var Au=Wt?gn(Wt):function(e){return Pu(e)&&Wi(e)==ne};function ju(e){return"string"==typeof e||!gu(e)&&Pu(e)&&Jr(e)==re}function Ru(e){return"symbol"==typeof e||Pu(e)&&Jr(e)==oe}var Fu=Vt?gn(Vt):function(e){return Pu(e)&&Tu(e.length)&&!!Tt[Jr(e)]};var Mu=wi(po),Uu=wi(function(e,t){return e<=t});function Lu(e){if(!e)return[];if(bu(e))return ju(e)?An(e):oi(e);if(Ut&&e[Ut])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Ut]());var t=Wi(e);return(t==Y?Tn:t==ne?Nn:dl)(e)}function zu(e){return e?(e=Wu(e))===A||e===-A?(e<0?-1:1)*R:e==e?e:0:0===e?e:0}function Bu(e){var t=zu(e),n=t%1;return t==t?n?t-n:t:0}function Hu(e){return e?Rr(Bu(e),0,M):0}function Wu(e){if("number"==typeof e)return e;if(Ru(e))return F;if(Su(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Su(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(je,"");var n=$e.test(e);return n||qe.test(e)?Nt(e.slice(2),n?2:8):Ve.test(e)?F:+e}function Vu(e){return ii(e,il(e))}function $u(e){return null==e?"":Uo(e)}var Ku=ui(function(e,t){if(Xi(t)||bu(t))ii(t,ol(t),e);else for(var n in t)ft.call(t,n)&&Or(e,n,t[n])}),qu=ui(function(e,t){ii(t,il(t),e)}),Qu=ui(function(e,t,n,r){ii(t,il(t),e,r)}),Gu=ui(function(e,t,n,r){ii(t,ol(t),e,r)}),Yu=Ii(jr);var Zu=Eo(function(e,t){e=tt(e);var n=-1,r=t.length,o=r>2?t[2]:i;for(o&&Qi(t[0],t[1],o)&&(r=1);++n<r;)for(var a=t[n],u=il(a),l=-1,c=u.length;++l<c;){var f=u[l],s=e[f];(s===i||du(s,ut[f])&&!ft.call(e,f))&&(e[f]=a[f])}return e}),Xu=Eo(function(e){return e.push(i,Pi),$t(ul,i,e)});function Ju(e,t,n){var r=null==e?i:Zr(e,t);return r===i?n:r}function el(e,t){return null!=e&&Vi(e,t,no)}var tl=vi(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),e[t]=n},Sl(Nl)),nl=vi(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),ft.call(e,t)?e[t].push(n):e[t]=[n]},Mi),rl=Eo(oo);function ol(e){return bu(e)?kr(e):fo(e)}function il(e){return bu(e)?kr(e,!0):so(e)}var al=ui(function(e,t,n){go(e,t,n)}),ul=ui(function(e,t,n,r){go(e,t,n,r)}),ll=Ii(function(e,t){var n={};if(null==e)return n;var r=!1;t=Jt(t,function(t){return t=Qo(t,e),r||(r=t.length>1),t}),ii(e,Ai(e),n),r&&(n=Fr(n,p|d|h,Oi));for(var o=t.length;o--;)zo(n,t[o]);return n});var cl=Ii(function(e,t){return null==e?{}:function(e,t){return _o(e,t,function(t,n){return el(e,n)})}(e,t)});function fl(e,t){if(null==e)return{};var n=Jt(Ai(e),function(e){return[e]});return t=Mi(t),_o(e,n,function(e,n){return t(e,n[0])})}var sl=Ei(ol),pl=Ei(il);function dl(e){return null==e?[]:yn(e,ol(e))}var hl=si(function(e,t,n){return t=t.toLowerCase(),e+(n?ml(t):t)});function ml(e){return Cl($u(e).toLowerCase())}function vl(e){return(e=$u(e))&&e.replace(Ge,xn).replace(bt,"")}var gl=si(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),yl=si(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),bl=fi("toLowerCase");var _l=si(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()});var wl=si(function(e,t,n){return e+(n?" ":"")+Cl(t)});var xl=si(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),Cl=fi("toUpperCase");function kl(e,t,n){return e=$u(e),(t=n?i:t)===i?function(e){return Ct.test(e)}(e)?function(e){return e.match(wt)||[]}(e):function(e){return e.match(ze)||[]}(e):e.match(t)||[]}var El=Eo(function(e,t){try{return $t(e,i,t)}catch(e){return Cu(e)?e:new Xe(e)}}),Tl=Ii(function(e,t){return qt(t,function(t){t=fa(t),Ar(e,t,nu(e[t],e))}),e});function Sl(e){return function(){return e}}var Pl=hi(),Ol=hi(!0);function Nl(e){return e}function Il(e){return co("function"==typeof e?e:Fr(e,p))}var Dl=Eo(function(e,t){return function(n){return oo(n,e,t)}}),Al=Eo(function(e,t){return function(n){return oo(e,n,t)}});function jl(e,t,n){var r=ol(t),o=Yr(t,r);null!=n||Su(t)&&(o.length||!r.length)||(n=t,t=e,e=this,o=Yr(t,ol(t)));var i=!(Su(n)&&"chain"in n&&!n.chain),a=ku(e);return qt(o,function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(i||t){var n=e(this.__wrapped__);return(n.__actions__=oi(this.__actions__)).push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,en([this.value()],arguments))})}),e}function Rl(){}var Fl=yi(Jt),Ml=yi(Gt),Ul=yi(rn);function Ll(e){return Gi(e)?pn(fa(e)):function(e){return function(t){return Zr(t,e)}}(e)}var zl=_i(),Bl=_i(!0);function Hl(){return[]}function Wl(){return!1}var Vl=gi(function(e,t){return e+t},0),$l=Ci("ceil"),Kl=gi(function(e,t){return e/t},1),ql=Ci("floor");var Ql,Gl=gi(function(e,t){return e*t},1),Yl=Ci("round"),Zl=gi(function(e,t){return e-t},0);return hr.after=function(e,t){if("function"!=typeof t)throw new ot(l);return e=Bu(e),function(){if(--e<1)return t.apply(this,arguments)}},hr.ary=eu,hr.assign=Ku,hr.assignIn=qu,hr.assignInWith=Qu,hr.assignWith=Gu,hr.at=Yu,hr.before=tu,hr.bind=nu,hr.bindAll=Tl,hr.bindKey=ru,hr.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return gu(e)?e:[e]},hr.chain=La,hr.chunk=function(e,t,n){t=(n?Qi(e,t,n):t===i)?1:Kn(Bu(t),0);var o=null==e?0:e.length;if(!o||t<1)return[];for(var a=0,u=0,l=r(Ln(o/t));a<o;)l[u++]=Do(e,a,a+=t);return l},hr.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,o=[];++t<n;){var i=e[t];i&&(o[r++]=i)}return o},hr.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],o=e;o--;)t[o-1]=arguments[o];return en(gu(n)?oi(n):[n],$r(t,1))},hr.cond=function(e){var t=null==e?0:e.length,n=Mi();return e=t?Jt(e,function(e){if("function"!=typeof e[1])throw new ot(l);return[n(e[0]),e[1]]}):[],Eo(function(n){for(var r=-1;++r<t;){var o=e[r];if($t(o[0],this,n))return $t(o[1],this,n)}})},hr.conforms=function(e){return function(e){var t=ol(e);return function(n){return Mr(n,e,t)}}(Fr(e,p))},hr.constant=Sl,hr.countBy=Ha,hr.create=function(e,t){var n=mr(e);return null==t?n:Dr(n,t)},hr.curry=function e(t,n,r){var o=Ti(t,_,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},hr.curryRight=function e(t,n,r){var o=Ti(t,w,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},hr.debounce=ou,hr.defaults=Zu,hr.defaultsDeep=Xu,hr.defer=iu,hr.delay=au,hr.difference=da,hr.differenceBy=ha,hr.differenceWith=ma,hr.drop=function(e,t,n){var r=null==e?0:e.length;return r?Do(e,(t=n||t===i?1:Bu(t))<0?0:t,r):[]},hr.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?Do(e,0,(t=r-(t=n||t===i?1:Bu(t)))<0?0:t):[]},hr.dropRightWhile=function(e,t){return e&&e.length?Ho(e,Mi(t,3),!0,!0):[]},hr.dropWhile=function(e,t){return e&&e.length?Ho(e,Mi(t,3),!0):[]},hr.fill=function(e,t,n,r){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&Qi(e,t,n)&&(n=0,r=o),function(e,t,n,r){var o=e.length;for((n=Bu(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:Bu(r))<0&&(r+=o),r=n>r?0:Hu(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},hr.filter=function(e,t){return(gu(e)?Yt:Vr)(e,Mi(t,3))},hr.flatMap=function(e,t){return $r(Ya(e,t),1)},hr.flatMapDeep=function(e,t){return $r(Ya(e,t),A)},hr.flatMapDepth=function(e,t,n){return n=n===i?1:Bu(n),$r(Ya(e,t),n)},hr.flatten=ya,hr.flattenDeep=function(e){return null!=e&&e.length?$r(e,A):[]},hr.flattenDepth=function(e,t){return null!=e&&e.length?$r(e,t=t===i?1:Bu(t)):[]},hr.flip=function(e){return Ti(e,T)},hr.flow=Pl,hr.flowRight=Ol,hr.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var o=e[t];r[o[0]]=o[1]}return r},hr.functions=function(e){return null==e?[]:Yr(e,ol(e))},hr.functionsIn=function(e){return null==e?[]:Yr(e,il(e))},hr.groupBy=qa,hr.initial=function(e){return null!=e&&e.length?Do(e,0,-1):[]},hr.intersection=_a,hr.intersectionBy=wa,hr.intersectionWith=xa,hr.invert=tl,hr.invertBy=nl,hr.invokeMap=Qa,hr.iteratee=Il,hr.keyBy=Ga,hr.keys=ol,hr.keysIn=il,hr.map=Ya,hr.mapKeys=function(e,t){var n={};return t=Mi(t,3),Qr(e,function(e,r,o){Ar(n,t(e,r,o),e)}),n},hr.mapValues=function(e,t){var n={};return t=Mi(t,3),Qr(e,function(e,r,o){Ar(n,r,t(e,r,o))}),n},hr.matches=function(e){return mo(Fr(e,p))},hr.matchesProperty=function(e,t){return vo(e,Fr(t,p))},hr.memoize=uu,hr.merge=al,hr.mergeWith=ul,hr.method=Dl,hr.methodOf=Al,hr.mixin=jl,hr.negate=lu,hr.nthArg=function(e){return e=Bu(e),Eo(function(t){return yo(t,e)})},hr.omit=ll,hr.omitBy=function(e,t){return fl(e,lu(Mi(t)))},hr.once=function(e){return tu(2,e)},hr.orderBy=function(e,t,n,r){return null==e?[]:(gu(t)||(t=null==t?[]:[t]),gu(n=r?i:n)||(n=null==n?[]:[n]),bo(e,t,n))},hr.over=Fl,hr.overArgs=cu,hr.overEvery=Ml,hr.overSome=Ul,hr.partial=fu,hr.partialRight=su,hr.partition=Za,hr.pick=cl,hr.pickBy=fl,hr.property=Ll,hr.propertyOf=function(e){return function(t){return null==e?i:Zr(e,t)}},hr.pull=ka,hr.pullAll=Ea,hr.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?wo(e,t,Mi(n,2)):e},hr.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?wo(e,t,i,n):e},hr.pullAt=Ta,hr.range=zl,hr.rangeRight=Bl,hr.rearg=pu,hr.reject=function(e,t){return(gu(e)?Yt:Vr)(e,lu(Mi(t,3)))},hr.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,o=[],i=e.length;for(t=Mi(t,3);++r<i;){var a=e[r];t(a,r,e)&&(n.push(a),o.push(r))}return xo(e,o),n},hr.rest=function(e,t){if("function"!=typeof e)throw new ot(l);return Eo(e,t=t===i?t:Bu(t))},hr.reverse=Sa,hr.sampleSize=function(e,t,n){return t=(n?Qi(e,t,n):t===i)?1:Bu(t),(gu(e)?Tr:So)(e,t)},hr.set=function(e,t,n){return null==e?e:Po(e,t,n)},hr.setWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:Po(e,t,n,r)},hr.shuffle=function(e){return(gu(e)?Sr:Io)(e)},hr.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Qi(e,t,n)?(t=0,n=r):(t=null==t?0:Bu(t),n=n===i?r:Bu(n)),Do(e,t,n)):[]},hr.sortBy=Xa,hr.sortedUniq=function(e){return e&&e.length?Fo(e):[]},hr.sortedUniqBy=function(e,t){return e&&e.length?Fo(e,Mi(t,2)):[]},hr.split=function(e,t,n){return n&&"number"!=typeof n&&Qi(e,t,n)&&(t=n=i),(n=n===i?M:n>>>0)?(e=$u(e))&&("string"==typeof t||null!=t&&!Du(t))&&!(t=Uo(t))&&En(e)?Yo(An(e),0,n):e.split(t,n):[]},hr.spread=function(e,t){if("function"!=typeof e)throw new ot(l);return t=null==t?0:Kn(Bu(t),0),Eo(function(n){var r=n[t],o=Yo(n,0,t);return r&&en(o,r),$t(e,this,o)})},hr.tail=function(e){var t=null==e?0:e.length;return t?Do(e,1,t):[]},hr.take=function(e,t,n){return e&&e.length?Do(e,0,(t=n||t===i?1:Bu(t))<0?0:t):[]},hr.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?Do(e,(t=r-(t=n||t===i?1:Bu(t)))<0?0:t,r):[]},hr.takeRightWhile=function(e,t){return e&&e.length?Ho(e,Mi(t,3),!1,!0):[]},hr.takeWhile=function(e,t){return e&&e.length?Ho(e,Mi(t,3)):[]},hr.tap=function(e,t){return t(e),e},hr.throttle=function(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new ot(l);return Su(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),ou(e,t,{leading:r,maxWait:t,trailing:o})},hr.thru=za,hr.toArray=Lu,hr.toPairs=sl,hr.toPairsIn=pl,hr.toPath=function(e){return gu(e)?Jt(e,fa):Ru(e)?[e]:oi(ca($u(e)))},hr.toPlainObject=Vu,hr.transform=function(e,t,n){var r=gu(e),o=r||wu(e)||Fu(e);if(t=Mi(t,4),null==n){var i=e&&e.constructor;n=o?r?new i:[]:Su(e)&&ku(i)?mr(It(e)):{}}return(o?qt:Qr)(e,function(e,r,o){return t(n,e,r,o)}),n},hr.unary=function(e){return eu(e,1)},hr.union=Pa,hr.unionBy=Oa,hr.unionWith=Na,hr.uniq=function(e){return e&&e.length?Lo(e):[]},hr.uniqBy=function(e,t){return e&&e.length?Lo(e,Mi(t,2)):[]},hr.uniqWith=function(e,t){return t="function"==typeof t?t:i,e&&e.length?Lo(e,i,t):[]},hr.unset=function(e,t){return null==e||zo(e,t)},hr.unzip=Ia,hr.unzipWith=Da,hr.update=function(e,t,n){return null==e?e:Bo(e,t,qo(n))},hr.updateWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:Bo(e,t,qo(n),r)},hr.values=dl,hr.valuesIn=function(e){return null==e?[]:yn(e,il(e))},hr.without=Aa,hr.words=kl,hr.wrap=function(e,t){return fu(qo(t),e)},hr.xor=ja,hr.xorBy=Ra,hr.xorWith=Fa,hr.zip=Ma,hr.zipObject=function(e,t){return $o(e||[],t||[],Or)},hr.zipObjectDeep=function(e,t){return $o(e||[],t||[],Po)},hr.zipWith=Ua,hr.entries=sl,hr.entriesIn=pl,hr.extend=qu,hr.extendWith=Qu,jl(hr,hr),hr.add=Vl,hr.attempt=El,hr.camelCase=hl,hr.capitalize=ml,hr.ceil=$l,hr.clamp=function(e,t,n){return n===i&&(n=t,t=i),n!==i&&(n=(n=Wu(n))==n?n:0),t!==i&&(t=(t=Wu(t))==t?t:0),Rr(Wu(e),t,n)},hr.clone=function(e){return Fr(e,h)},hr.cloneDeep=function(e){return Fr(e,p|h)},hr.cloneDeepWith=function(e,t){return Fr(e,p|h,t="function"==typeof t?t:i)},hr.cloneWith=function(e,t){return Fr(e,h,t="function"==typeof t?t:i)},hr.conformsTo=function(e,t){return null==t||Mr(e,t,ol(t))},hr.deburr=vl,hr.defaultTo=function(e,t){return null==e||e!=e?t:e},hr.divide=Kl,hr.endsWith=function(e,t,n){e=$u(e),t=Uo(t);var r=e.length,o=n=n===i?r:Rr(Bu(n),0,r);return(n-=t.length)>=0&&e.slice(n,o)==t},hr.eq=du,hr.escape=function(e){return(e=$u(e))&&Ee.test(e)?e.replace(Ce,Cn):e},hr.escapeRegExp=function(e){return(e=$u(e))&&Ae.test(e)?e.replace(De,"\\$&"):e},hr.every=function(e,t,n){var r=gu(e)?Gt:Hr;return n&&Qi(e,t,n)&&(t=i),r(e,Mi(t,3))},hr.find=Wa,hr.findIndex=va,hr.findKey=function(e,t){return an(e,Mi(t,3),Qr)},hr.findLast=Va,hr.findLastIndex=ga,hr.findLastKey=function(e,t){return an(e,Mi(t,3),Gr)},hr.floor=ql,hr.forEach=$a,hr.forEachRight=Ka,hr.forIn=function(e,t){return null==e?e:Kr(e,Mi(t,3),il)},hr.forInRight=function(e,t){return null==e?e:qr(e,Mi(t,3),il)},hr.forOwn=function(e,t){return e&&Qr(e,Mi(t,3))},hr.forOwnRight=function(e,t){return e&&Gr(e,Mi(t,3))},hr.get=Ju,hr.gt=hu,hr.gte=mu,hr.has=function(e,t){return null!=e&&Vi(e,t,to)},hr.hasIn=el,hr.head=ba,hr.identity=Nl,hr.includes=function(e,t,n,r){e=bu(e)?e:dl(e),n=n&&!r?Bu(n):0;var o=e.length;return n<0&&(n=Kn(o+n,0)),ju(e)?n<=o&&e.indexOf(t,n)>-1:!!o&&ln(e,t,n)>-1},hr.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:Bu(n);return o<0&&(o=Kn(r+o,0)),ln(e,t,o)},hr.inRange=function(e,t,n){return t=zu(t),n===i?(n=t,t=0):n=zu(n),function(e,t,n){return e>=qn(t,n)&&e<Kn(t,n)}(e=Wu(e),t,n)},hr.invoke=rl,hr.isArguments=vu,hr.isArray=gu,hr.isArrayBuffer=yu,hr.isArrayLike=bu,hr.isArrayLikeObject=_u,hr.isBoolean=function(e){return!0===e||!1===e||Pu(e)&&Jr(e)==V},hr.isBuffer=wu,hr.isDate=xu,hr.isElement=function(e){return Pu(e)&&1===e.nodeType&&!Iu(e)},hr.isEmpty=function(e){if(null==e)return!0;if(bu(e)&&(gu(e)||"string"==typeof e||"function"==typeof e.splice||wu(e)||Fu(e)||vu(e)))return!e.length;var t=Wi(e);if(t==Y||t==ne)return!e.size;if(Xi(e))return!fo(e).length;for(var n in e)if(ft.call(e,n))return!1;return!0},hr.isEqual=function(e,t){return ao(e,t)},hr.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:i)?n(e,t):i;return r===i?ao(e,t,i,n):!!r},hr.isError=Cu,hr.isFinite=function(e){return"number"==typeof e&&Wn(e)},hr.isFunction=ku,hr.isInteger=Eu,hr.isLength=Tu,hr.isMap=Ou,hr.isMatch=function(e,t){return e===t||uo(e,t,Li(t))},hr.isMatchWith=function(e,t,n){return n="function"==typeof n?n:i,uo(e,t,Li(t),n)},hr.isNaN=function(e){return Nu(e)&&e!=+e},hr.isNative=function(e){if(Zi(e))throw new Xe(u);return lo(e)},hr.isNil=function(e){return null==e},hr.isNull=function(e){return null===e},hr.isNumber=Nu,hr.isObject=Su,hr.isObjectLike=Pu,hr.isPlainObject=Iu,hr.isRegExp=Du,hr.isSafeInteger=function(e){return Eu(e)&&e>=-j&&e<=j},hr.isSet=Au,hr.isString=ju,hr.isSymbol=Ru,hr.isTypedArray=Fu,hr.isUndefined=function(e){return e===i},hr.isWeakMap=function(e){return Pu(e)&&Wi(e)==ae},hr.isWeakSet=function(e){return Pu(e)&&Jr(e)==ue},hr.join=function(e,t){return null==e?"":Vn.call(e,t)},hr.kebabCase=gl,hr.last=Ca,hr.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=Bu(n))<0?Kn(r+o,0):qn(o,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,o):un(e,fn,o,!0)},hr.lowerCase=yl,hr.lowerFirst=bl,hr.lt=Mu,hr.lte=Uu,hr.max=function(e){return e&&e.length?Wr(e,Nl,eo):i},hr.maxBy=function(e,t){return e&&e.length?Wr(e,Mi(t,2),eo):i},hr.mean=function(e){return sn(e,Nl)},hr.meanBy=function(e,t){return sn(e,Mi(t,2))},hr.min=function(e){return e&&e.length?Wr(e,Nl,po):i},hr.minBy=function(e,t){return e&&e.length?Wr(e,Mi(t,2),po):i},hr.stubArray=Hl,hr.stubFalse=Wl,hr.stubObject=function(){return{}},hr.stubString=function(){return""},hr.stubTrue=function(){return!0},hr.multiply=Gl,hr.nth=function(e,t){return e&&e.length?yo(e,Bu(t)):i},hr.noConflict=function(){return At._===this&&(At._=mt),this},hr.noop=Rl,hr.now=Ja,hr.pad=function(e,t,n){e=$u(e);var r=(t=Bu(t))?Dn(e):0;if(!t||r>=t)return e;var o=(t-r)/2;return bi(zn(o),n)+e+bi(Ln(o),n)},hr.padEnd=function(e,t,n){e=$u(e);var r=(t=Bu(t))?Dn(e):0;return t&&r<t?e+bi(t-r,n):e},hr.padStart=function(e,t,n){e=$u(e);var r=(t=Bu(t))?Dn(e):0;return t&&r<t?bi(t-r,n)+e:e},hr.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Gn($u(e).replace(Re,""),t||0)},hr.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Qi(e,t,n)&&(t=n=i),n===i&&("boolean"==typeof t?(n=t,t=i):"boolean"==typeof e&&(n=e,e=i)),e===i&&t===i?(e=0,t=1):(e=zu(e),t===i?(t=e,e=0):t=zu(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var o=Yn();return qn(e+o*(t-e+Ot("1e-"+((o+"").length-1))),t)}return Co(e,t)},hr.reduce=function(e,t,n){var r=gu(e)?tn:hn,o=arguments.length<3;return r(e,Mi(t,4),n,o,zr)},hr.reduceRight=function(e,t,n){var r=gu(e)?nn:hn,o=arguments.length<3;return r(e,Mi(t,4),n,o,Br)},hr.repeat=function(e,t,n){return t=(n?Qi(e,t,n):t===i)?1:Bu(t),ko($u(e),t)},hr.replace=function(){var e=arguments,t=$u(e[0]);return e.length<3?t:t.replace(e[1],e[2])},hr.result=function(e,t,n){var r=-1,o=(t=Qo(t,e)).length;for(o||(o=1,e=i);++r<o;){var a=null==e?i:e[fa(t[r])];a===i&&(r=o,a=n),e=ku(a)?a.call(e):a}return e},hr.round=Yl,hr.runInContext=e,hr.sample=function(e){return(gu(e)?Er:To)(e)},hr.size=function(e){if(null==e)return 0;if(bu(e))return ju(e)?Dn(e):e.length;var t=Wi(e);return t==Y||t==ne?e.size:fo(e).length},hr.snakeCase=_l,hr.some=function(e,t,n){var r=gu(e)?rn:Ao;return n&&Qi(e,t,n)&&(t=i),r(e,Mi(t,3))},hr.sortedIndex=function(e,t){return jo(e,t)},hr.sortedIndexBy=function(e,t,n){return Ro(e,t,Mi(n,2))},hr.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=jo(e,t);if(r<n&&du(e[r],t))return r}return-1},hr.sortedLastIndex=function(e,t){return jo(e,t,!0)},hr.sortedLastIndexBy=function(e,t,n){return Ro(e,t,Mi(n,2),!0)},hr.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var n=jo(e,t,!0)-1;if(du(e[n],t))return n}return-1},hr.startCase=wl,hr.startsWith=function(e,t,n){return e=$u(e),n=null==n?0:Rr(Bu(n),0,e.length),t=Uo(t),e.slice(n,n+t.length)==t},hr.subtract=Zl,hr.sum=function(e){return e&&e.length?mn(e,Nl):0},hr.sumBy=function(e,t){return e&&e.length?mn(e,Mi(t,2)):0},hr.template=function(e,t,n){var r=hr.templateSettings;n&&Qi(e,t,n)&&(t=i),e=$u(e),t=Qu({},t,r,Si);var o,a,u=Qu({},t.imports,r.imports,Si),l=ol(u),c=yn(u,l),f=0,s=t.interpolate||Ye,p="__p += '",d=nt((t.escape||Ye).source+"|"+s.source+"|"+(s===Pe?He:Ye).source+"|"+(t.evaluate||Ye).source+"|$","g"),h="//# sourceURL="+("sourceURL"in t?t.sourceURL:"lodash.templateSources["+ ++Et+"]")+"\n";e.replace(d,function(t,n,r,i,u,l){return r||(r=i),p+=e.slice(f,l).replace(Ze,kn),n&&(o=!0,p+="' +\n__e("+n+") +\n'"),u&&(a=!0,p+="';\n"+u+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),f=l+t.length,t}),p+="';\n";var m=t.variable;m||(p="with (obj) {\n"+p+"\n}\n"),p=(a?p.replace(be,""):p).replace(_e,"$1").replace(we,"$1;"),p="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var v=El(function(){return Je(l,h+"return "+p).apply(i,c)});if(v.source=p,Cu(v))throw v;return v},hr.times=function(e,t){if((e=Bu(e))<1||e>j)return[];var n=M,r=qn(e,M);t=Mi(t),e-=M;for(var o=vn(r,t);++n<e;)t(n);return o},hr.toFinite=zu,hr.toInteger=Bu,hr.toLength=Hu,hr.toLower=function(e){return $u(e).toLowerCase()},hr.toNumber=Wu,hr.toSafeInteger=function(e){return e?Rr(Bu(e),-j,j):0===e?e:0},hr.toString=$u,hr.toUpper=function(e){return $u(e).toUpperCase()},hr.trim=function(e,t,n){if((e=$u(e))&&(n||t===i))return e.replace(je,"");if(!e||!(t=Uo(t)))return e;var r=An(e),o=An(t);return Yo(r,_n(r,o),wn(r,o)+1).join("")},hr.trimEnd=function(e,t,n){if((e=$u(e))&&(n||t===i))return e.replace(Fe,"");if(!e||!(t=Uo(t)))return e;var r=An(e);return Yo(r,0,wn(r,An(t))+1).join("")},hr.trimStart=function(e,t,n){if((e=$u(e))&&(n||t===i))return e.replace(Re,"");if(!e||!(t=Uo(t)))return e;var r=An(e);return Yo(r,_n(r,An(t))).join("")},hr.truncate=function(e,t){var n=S,r=P;if(Su(t)){var o="separator"in t?t.separator:o;n="length"in t?Bu(t.length):n,r="omission"in t?Uo(t.omission):r}var a=(e=$u(e)).length;if(En(e)){var u=An(e);a=u.length}if(n>=a)return e;var l=n-Dn(r);if(l<1)return r;var c=u?Yo(u,0,l).join(""):e.slice(0,l);if(o===i)return c+r;if(u&&(l+=c.length-l),Du(o)){if(e.slice(l).search(o)){var f,s=c;for(o.global||(o=nt(o.source,$u(We.exec(o))+"g")),o.lastIndex=0;f=o.exec(s);)var p=f.index;c=c.slice(0,p===i?l:p)}}else if(e.indexOf(Uo(o),l)!=l){var d=c.lastIndexOf(o);d>-1&&(c=c.slice(0,d))}return c+r},hr.unescape=function(e){return(e=$u(e))&&ke.test(e)?e.replace(xe,jn):e},hr.uniqueId=function(e){var t=++st;return $u(e)+t},hr.upperCase=xl,hr.upperFirst=Cl,hr.each=$a,hr.eachRight=Ka,hr.first=ba,jl(hr,(Ql={},Qr(hr,function(e,t){ft.call(hr.prototype,t)||(Ql[t]=e)}),Ql),{chain:!1}),hr.VERSION="4.17.5",qt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){hr[e].placeholder=hr}),qt(["drop","take"],function(e,t){yr.prototype[e]=function(n){n=n===i?1:Kn(Bu(n),0);var r=this.__filtered__&&!t?new yr(this):this.clone();return r.__filtered__?r.__takeCount__=qn(n,r.__takeCount__):r.__views__.push({size:qn(n,M),type:e+(r.__dir__<0?"Right":"")}),r},yr.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),qt(["filter","map","takeWhile"],function(e,t){var n=t+1,r=n==I||3==n;yr.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Mi(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}}),qt(["head","last"],function(e,t){var n="take"+(t?"Right":"");yr.prototype[e]=function(){return this[n](1).value()[0]}}),qt(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");yr.prototype[e]=function(){return this.__filtered__?new yr(this):this[n](1)}}),yr.prototype.compact=function(){return this.filter(Nl)},yr.prototype.find=function(e){return this.filter(e).head()},yr.prototype.findLast=function(e){return this.reverse().find(e)},yr.prototype.invokeMap=Eo(function(e,t){return"function"==typeof e?new yr(this):this.map(function(n){return oo(n,e,t)})}),yr.prototype.reject=function(e){return this.filter(lu(Mi(e)))},yr.prototype.slice=function(e,t){e=Bu(e);var n=this;return n.__filtered__&&(e>0||t<0)?new yr(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==i&&(n=(t=Bu(t))<0?n.dropRight(-t):n.take(t-e)),n)},yr.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},yr.prototype.toArray=function(){return this.take(M)},Qr(yr.prototype,function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=hr[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);o&&(hr.prototype[t]=function(){var t=this.__wrapped__,u=r?[1]:arguments,l=t instanceof yr,c=u[0],f=l||gu(t),s=function(e){var t=o.apply(hr,en([e],u));return r&&p?t[0]:t};f&&n&&"function"==typeof c&&1!=c.length&&(l=f=!1);var p=this.__chain__,d=!!this.__actions__.length,h=a&&!p,m=l&&!d;if(!a&&f){t=m?t:new yr(this);var v=e.apply(t,u);return v.__actions__.push({func:za,args:[s],thisArg:i}),new gr(v,p)}return h&&m?e.apply(this,u):(v=this.thru(s),h?r?v.value()[0]:v.value():v)})}),qt(["pop","push","shift","sort","splice","unshift"],function(e){var t=it[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);hr.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var o=this.value();return t.apply(gu(o)?o:[],e)}return this[n](function(n){return t.apply(gu(n)?n:[],e)})}}),Qr(yr.prototype,function(e,t){var n=hr[t];if(n){var r=n.name+"";(ir[r]||(ir[r]=[])).push({name:t,func:n})}}),ir[mi(i,y).name]=[{name:"wrapper",func:i}],yr.prototype.clone=function(){var e=new yr(this.__wrapped__);return e.__actions__=oi(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=oi(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=oi(this.__views__),e},yr.prototype.reverse=function(){if(this.__filtered__){var e=new yr(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},yr.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=gu(e),r=t<0,o=n?e.length:0,i=function(e,t,n){for(var r=-1,o=n.length;++r<o;){var i=n[r],a=i.size;switch(i.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=qn(t,e+a);break;case"takeRight":e=Kn(e,t-a)}}return{start:e,end:t}}(0,o,this.__views__),a=i.start,u=i.end,l=u-a,c=r?u:a-1,f=this.__iteratees__,s=f.length,p=0,d=qn(l,this.__takeCount__);if(!n||!r&&o==l&&d==l)return Wo(e,this.__actions__);var h=[];e:for(;l--&&p<d;){for(var m=-1,v=e[c+=t];++m<s;){var g=f[m],y=g.iteratee,b=g.type,_=y(v);if(b==D)v=_;else if(!_){if(b==I)continue e;break e}}h[p++]=v}return h},hr.prototype.at=Ba,hr.prototype.chain=function(){return La(this)},hr.prototype.commit=function(){return new gr(this.value(),this.__chain__)},hr.prototype.next=function(){this.__values__===i&&(this.__values__=Lu(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},hr.prototype.plant=function(e){for(var t,n=this;n instanceof vr;){var r=pa(n);r.__index__=0,r.__values__=i,t?o.__wrapped__=r:t=r;var o=r;n=n.__wrapped__}return o.__wrapped__=e,t},hr.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof yr){var t=e;return this.__actions__.length&&(t=new yr(this)),(t=t.reverse()).__actions__.push({func:za,args:[Sa],thisArg:i}),new gr(t,this.__chain__)}return this.thru(Sa)},hr.prototype.toJSON=hr.prototype.valueOf=hr.prototype.value=function(){return Wo(this.__wrapped__,this.__actions__)},hr.prototype.first=hr.prototype.head,Ut&&(hr.prototype[Ut]=function(){return this}),hr}();At._=Rn,(o=function(){return Rn}.call(t,n,t,r))===i||(r.exports=o)}).call(this)}).call(this,n(37),n(36)(e))},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();c(n(38));n(35),n(32);var o=c(n(30)),i=c(n(16)),a=c(n(13)),u=c(n(0)),l=n(3);function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),r(t,[{key:"render",value:function(){return u.default.createElement("div",{className:"app"},u.default.createElement(o.default,null),u.default.createElement(i.default,null),u.default.createElement(a.default,null))}}]),t}();(0,l.render)(u.default.createElement(f,null),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50LWNzcy9jb250ZW50LmNzcz8zOTkyIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQtY3NzL3RvZG8uY3NzPzcwZDUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC90b2RvSXRlbXMuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvdG9kb0xpc3QuanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50LWNzcy9mb290ZXIuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQtY3NzL2Zvb3Rlci5jc3M/OTFmMCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2Zvb3Rlci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9Ub2RvU2VydmljZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9saXN0Q29udC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9jb250ZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50LWNzcy9jb250ZW50LmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc1RleHROb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1mbGlwLW1vdmUvZGlzdC9yZWFjdC1mbGlwLW1vdmUuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC1jc3MvdG9kby5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC1jc3MvaGVhZGVyLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50LWNzcy9oZWFkZXIuY3NzPzQ1YjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2hlYWRlci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC1jc3MvYWRkbmV3LXBvcHVwLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50LWNzcy9hZGRuZXctcG9wdXAuY3NzPzNhZjMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS5jc3M/NzUyOCIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzeCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZm4iLCJtZW1vIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwid2luZG93IiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiYXBwbHkiLCJ0aGlzIiwiYXJndW1lbnRzIiwiZ2V0RWxlbWVudCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsIm9wdGlvbnMiLCJsZW5ndGgiLCJpdGVtIiwiZG9tU3R5bGUiLCJpZCIsInJlZnMiLCJqIiwicGFydHMiLCJwdXNoIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJsaXN0IiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiaW5zZXJ0SW50byIsIkVycm9yIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiaW5kZXhPZiIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRycyIsInR5cGUiLCJhZGRBdHRycyIsImVsIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJzZXRBdHRyaWJ1dGUiLCJvYmoiLCJ1cGRhdGUiLCJyZW1vdmUiLCJyZXN1bHQiLCJ0cmFuc2Zvcm0iLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImJpbmQiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwiYnRvYSIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwidW5kZWZpbmVkIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiYmxvYiIsIm9sZFNyYyIsImhyZWYiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJpbmRleCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsInVzZVNvdXJjZU1hcCIsInRvU3RyaW5nIiwibWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY29uY2F0IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJobXIiLCJsb2NhbHMiLCJUb2RvSXRlbXMiLCJwcm9wcyIsIl9jbGFzc0NhbGxDaGVjayIsIl90aGlzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfX3Byb3RvX18iLCJnZXRQcm90b3R5cGVPZiIsImNyZWF0ZVRhc2tzIiwiX3JlYWN0MiIsImRlZmF1bHQiLCJDb21wb25lbnQiLCJkZWxldGUiLCJsaWtlIiwiX3RoaXMyIiwiY2xhc3NOYW1lIiwiZGF0YS1lbXB0eS1tZXNzYWdlIiwiY2xhc3MiLCJ0ZXh0IiwiZGVzY3JpcHRpb24iLCJvbkNsaWNrIiwiaXNMaWtlZCIsImNvbXBsZXRlZCIsImNvbXBsZXRlIiwic2V0dGluZyIsIm9uU3VibWl0IiwiZWRpdCIsInJlZiIsImEiLCJfaW5wdXRUaXRsZSIsImRlZmF1bHRWYWx1ZSIsImIiLCJfaW5wdXREZXNjcmlwdGlvbiIsImFkZENvbW1lbnQiLCJfaW5wdXRDb21tZW50IiwicGxhY2Vob2xkZXIiLCJjb21tZW50cyIsImNvbW1lbnQiLCJ0b2RvRW50cmllcyIsImVudHJpZXMiLCJsb2ciLCJsaXN0SXRlbXMiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImlubmVySFRNTCIsImdldEl0ZW0iLCJfcmVhY3RGbGlwTW92ZTIiLCJkdXJhdGlvbiIsImVhc2luZyIsIlRvZG9MaXN0IiwiY3JlYXRlUmVmIiwic3RhdGUiLCJpdGVtcyIsInBhcnNlIiwiYWRkSXRlbSIsInRpdGxlIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsIl9pbnB1dFRleHQiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImFyZyIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiYXNzaWduIiwidGVzdDEiLCJTdHJpbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsInNwbGl0IiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsInZhbCIsIlR5cGVFcnJvciIsInRvT2JqZWN0IiwiX3JlYWN0IiwiRm9vdGVyIiwibmV3SXRlbSIsIkRhdGUiLCJub3ciLCJzZXRTdGF0ZSIsInByZXZTdGF0ZSIsImxpa2VJdGVtIiwiaXRlbUluZGV4IiwiZmluZEl0ZW0iLCJzZWxlY3RlZEtleSIsIml0ZW1TZXQiLCJkZWxldGVJdGVtIiwiZmlsdGVyZWRJdGVtcyIsIl9Ub2RvU2VydmljZXMiLCJMaXN0Q29udGVudCIsIl90b2RvSXRlbXMyIiwiaGFuZGxlTGlrZSIsImhhbmRsZVJlbW92ZVRvZG9FbGVtIiwiaGFuZGxlQWRkaW5nSXRlbSIsIkNvbnRlbnQiLCJfdG9kb0xpc3QyIiwiX2xpc3RDb250MiIsImRlZmF1bHRWaWV3Iiwib3duZXJEb2N1bWVudCIsIk5vZGUiLCJub2RlVHlwZSIsIm5vZGVOYW1lIiwiaXNOb2RlIiwiaXNUZXh0Tm9kZSIsImNvbnRhaW5zTm9kZSIsIm91dGVyTm9kZSIsImlubmVyTm9kZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJpcyIsIngiLCJ5Iiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwiZG9jIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJjYW5Vc2VET00iLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsImJhIiwiQSIsIkMiLCJlYSIsImZhIiwiaGEiLCJqYSIsIkQiLCJmcmFtZXNUb1BvcCIsIkUiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImYiLCJoIiwiZyIsImsiLCJ2IiwiQXJyYXkiLCJzbGljZSIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImhhc0NhdWdodEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsIm5hIiwib2EiLCJwYSIsInFhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJyYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwic2EiLCJyZWdpc3RyYXRpb25OYW1lIiwidGEiLCJ1YSIsImRlcGVuZGVuY2llcyIsInZhIiwid2EiLCJ4YSIsImZyZWV6ZSIsInBsdWdpbnMiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiY3VycmVudFRhcmdldCIsIkdhIiwiaXNBcnJheSIsIkhhIiwiSWEiLCJKYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwiY29uc3RydWN0b3IiLCJyZWxlYXNlIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJzdGF0ZU5vZGUiLCJkaXNhYmxlZCIsIk9hIiwiUGEiLCJRYSIsImluamVjdGlvbiIsImdldExpc3RlbmVyIiwicnVuRXZlbnRzSW5CYXRjaCIsInJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2giLCJSYSIsIk1hdGgiLCJyYW5kb20iLCJGIiwiU2EiLCJUYSIsInRhZyIsIlVhIiwiVmEiLCJYYSIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiTCIsImJiIiwiY2IiLCJkaXNwYXRjaENvbmZpZyIsImRiIiwiX3RhcmdldEluc3QiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiYWx0ZXJuYXRlIiwiamIiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImtiIiwibGIiLCJkb2N1bWVudEVsZW1lbnQiLCJNIiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm1iIiwibmIiLCJvYiIsInBiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIk4iLCJuYXRpdmVFdmVudCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwicmIiLCJldmVudFBvb2wiLCJwb3AiLCJzYiIsImRlc3RydWN0b3IiLCJxYiIsImdldFBvb2xlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJleHRlbmQiLCJ0YiIsImRhdGEiLCJ1YiIsInZiIiwid2IiLCJ4YiIsImRvY3VtZW50TW9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIktiIiwiTGIiLCJrZXlDb2RlIiwiTWIiLCJkZXRhaWwiLCJOYiIsIlFiIiwid2hpY2giLCJPYiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsIlBiIiwiUmIiLCJTYiIsIlRiIiwiVWIiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwiVmIiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50IiwiV2IiLCJYYiIsIlliIiwiWmIiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwibmVlZHNTdGF0ZVJlc3RvcmUiLCJyZXN0b3JlU3RhdGVJZk5lZWRlZCIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwiZmMiLCJ0b0xvd2VyQ2FzZSIsImdjIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJoYyIsImljIiwia2MiLCJfdmFsdWVUcmFja2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwic2V0IiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsImpjIiwibGMiLCJjaGVja2VkIiwibWMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiTyIsIlN5bWJvbCIsIm5jIiwib2MiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJpdGVyYXRvciIsInljIiwiemMiLCJkaXNwbGF5TmFtZSIsIkFjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsInJlcGxhY2UiLCJsaW5lTnVtYmVyIiwiQmMiLCJDYyIsIkRjIiwiVSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJWIiwiSGMiLCJTYyIsInRvVXBwZXJDYXNlIiwiVGMiLCJGYyIsImlzTmFOIiwiR2MiLCJ0ZXN0IiwiRWMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIlVjIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJWYyIsIldjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIlhjIiwiWWMiLCJaYyIsIiRjIiwidGFiSW5kZXgiLCJhZCIsImNoYW5nZSIsImJkIiwiY2QiLCJkZCIsImVkIiwiZmQiLCJnZCIsImhkIiwiZGV0YWNoRXZlbnQiLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwicGQiLCJ2aWV3IiwicWQiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwicmQiLCJnZXRNb2RpZmllclN0YXRlIiwic2QiLCJ0ZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50Iiwic3JjRWxlbWVudCIsInRvRWxlbWVudCIsInVkIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJ2ZCIsInBhcmVudFdpbmRvdyIsIndkIiwiZWZmZWN0VGFnIiwieGQiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwieWQiLCJ6ZCIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJDZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJEZCIsImNsaXBib2FyZERhdGEiLCJFZCIsIkZkIiwiY2hhckNvZGUiLCJHZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJIZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJJZCIsImxvY2F0aW9uIiwicmVwZWF0IiwibG9jYWxlIiwiSmQiLCJkYXRhVHJhbnNmZXIiLCJLZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJMZCIsIk1kIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJOZCIsIk9kIiwiUGQiLCJpc0ludGVyYWN0aXZlIiwiUWQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJSZCIsIlNkIiwiVGQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIlVkIiwiVmQiLCJXIiwiV2QiLCJYZCIsIllkIiwiWmQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiJGQiLCJhZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImJlIiwiY2UiLCJkZSIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJlZSIsInRvcEFuaW1hdGlvbkVuZCIsInRvcEFuaW1hdGlvbkl0ZXJhdGlvbiIsInRvcEFuaW1hdGlvblN0YXJ0IiwidG9wQmx1ciIsInRvcENhbmNlbCIsInRvcENoYW5nZSIsInRvcENsaWNrIiwidG9wQ2xvc2UiLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcEZvY3VzIiwidG9wSW5wdXQiLCJ0b3BLZXlEb3duIiwidG9wS2V5UHJlc3MiLCJ0b3BLZXlVcCIsInRvcExvYWQiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFNjcm9sbCIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInRvcFRleHRJbnB1dCIsInRvcFRvZ2dsZSIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wVHJhbnNpdGlvbkVuZCIsInRvcFdoZWVsIiwiZmUiLCJ0b3BBYm9ydCIsInRvcENhblBsYXkiLCJ0b3BDYW5QbGF5VGhyb3VnaCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BQYXVzZSIsInRvcFBsYXkiLCJ0b3BQbGF5aW5nIiwidG9wUHJvZ3Jlc3MiLCJ0b3BSYXRlQ2hhbmdlIiwidG9wU2Vla2VkIiwidG9wU2Vla2luZyIsInRvcFN0YWxsZWQiLCJ0b3BTdXNwZW5kIiwidG9wVGltZVVwZGF0ZSIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJnZSIsImhlIiwiaWUiLCJqZSIsImtlIiwibGUiLCJ0ZXh0Q29udGVudCIsIm5vZGUiLCJvZmZzZXQiLCJtZSIsImNvbnRlbnRFZGl0YWJsZSIsIm5lIiwib2UiLCJzZWxlY3QiLCJwZSIsInFlIiwicmUiLCJzZSIsInVlIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIndlIiwib25TZWxlY3QiLCJ4ZSIsInBlbmRpbmdQcm9wcyIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJtb2RlIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImV4cGlyYXRpb25UaW1lIiwieWUiLCJ6ZSIsImlzUmVhY3RDb21wb25lbnQiLCJBZSIsImNoaWxkcmVuIiwiJCR0eXBlb2YiLCJCZSIsIkNlIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiYmFzZVN0YXRlIiwiZmlyc3QiLCJsYXN0IiwiY2FsbGJhY2tMaXN0IiwiaGFzRm9yY2VVcGRhdGUiLCJpc0luaXRpYWxpemVkIiwiY2FwdHVyZWRWYWx1ZXMiLCJLZSIsIm5leHQiLCJTZXQiLCJMZSIsIk1lIiwiTmUiLCJPZSIsIlBlIiwicGFydGlhbFN0YXRlIiwiUWUiLCJpc1JlcGxhY2UiLCJpc0ZvcmNlZCIsImNhbGxiYWNrIiwiY2FwdHVyZWRWYWx1ZSIsIlJlIiwiVGUiLCJVZSIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJWZSIsIldlIiwiTWFwIiwieiIsIkIiLCJxIiwidSIsInQiLCJRIiwiZG9uZSIsIkgiLCJYZSIsIlllIiwiWmUiLCJyZW5kZXIiLCJwZW5kaW5nQ29udGV4dCIsImNvbnRleHQiLCJZIiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlIiwicHVzaEhvc3RDb250ZXh0IiwicHVzaEhvc3RDb250YWluZXIiLCJHIiwicHVzaFByb3ZpZGVyIiwiUiIsImdldE1hc2tlZENvbnRleHQiLCJTIiwiZ2V0VW5tYXNrZWRDb250ZXh0IiwiaGFzQ29udGV4dENoYW5nZWQiLCJwdXNoQ29udGV4dFByb3ZpZGVyIiwicHVzaFRvcExldmVsQ29udGV4dE9iamVjdCIsImludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIiLCJlbnRlckh5ZHJhdGlvblN0YXRlIiwiV2EiLCJyZXNldEh5ZHJhdGlvblN0YXRlIiwiQ2IiLCJ0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSIsIkpjIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJ1cGRhdGVyIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNhY2hlQ29udGV4dCIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNNb3VudGVkIiwiZW5xdWV1ZVNldFN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiYWRvcHRDbGFzc0luc3RhbmNlIiwiY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbnN0cnVjdENsYXNzSW5zdGFuY2UiLCJtb3VudENsYXNzSW5zdGFuY2UiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZSIsInVwZGF0ZUNsYXNzSW5zdGFuY2UiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJTZSIsIktjIiwiTGMiLCJEYiIsIk1jIiwiRWIiLCJiZWdpbldvcmsiLCJlbGVtZW50IiwiaHlkcmF0ZSIsIl9jb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsImJmIiwic3RhY2siLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiZGYiLCJrZiIsIkkiLCJZYSIsIloiLCJOYyIsInlhIiwiaGFzIiwiY2EiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJPYyIsIlphIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJpYSIsInphIiwiZGEiLCJGYiIsIndnIiwidmUiLCJJYyIsIlBjIiwiR2IiLCJ5ZyIsIlFjIiwibGciLCJ0aW1lb3V0IiwibmV4dFNjaGVkdWxlZFJvb3QiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsIksiLCJsYSIsIlQiLCJKIiwiSGIiLCJhYSIsIlAiLCIkYSIsIkliIiwiQWEiLCJfb25Db21wbGV0ZSIsInZnIiwiQmEiLCJKYiIsImZpbmlzaGVkV29yayIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJ6ZyIsInciLCJhYiIsImtnIiwidGUiLCJnZyIsIkFnIiwiaGciLCJpZyIsImpnIiwidGltZVJlbWFpbmluZyIsIkJnIiwiY3JlYXRlQ3Vyc29yIiwiaXNFbXB0eSIsImNoZWNrVGhhdFN0YWNrSXNFbXB0eSIsInJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldiIsImpmIiwiZ2V0Q2hpbGRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGV4dCIsImdldEhvc3RDb250ZXh0IiwiZ2V0Um9vdEhvc3RDb250YWluZXIiLCJwb3BIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRleHQiLCJlZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsImNoaWxkQ29udGV4dFR5cGVzIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY29udGV4dFR5cGVzIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJwb3BDb250ZXh0UHJvdmlkZXIiLCJwb3BUb3BMZXZlbENvbnRleHRPYmplY3QiLCJjdXJzb3IiLCJwcm9jZXNzQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCIsImdmIiwicG9wUHJvdmlkZXIiLCJoZiIsImh5ZHJhdGlvbiIsInByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSIsInBvcEh5ZHJhdGlvblN0YXRlIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsImdldE5leHRIeWRyYXRhYmxlU2libGluZyIsImdldEZpcnN0SHlkcmF0YWJsZUNoaWxkIiwiaHlkcmF0ZUluc3RhbmNlIiwiaHlkcmF0ZVRleHRJbnN0YW5jZSIsImZmIiwiY3JlYXRlSW5zdGFuY2UiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsInByZXBhcmVVcGRhdGUiLCJwZXJzaXN0ZW5jZSIsIm11dGF0aW9uIiwiY29tcGxldGVXb3JrIiwiaGFuZGxlciIsIiRlIiwidGhyb3dFeGNlcHRpb24iLCJ1bndpbmRXb3JrIiwidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwiYWYiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImdldFB1YmxpY0luc3RhbmNlIiwiY29tbWl0TW91bnQiLCJjb21taXRVcGRhdGUiLCJyZXNldFRleHRDb250ZW50IiwiY29tbWl0VGV4dFVwZGF0ZSIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tbWl0UmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFBsYWNlbWVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdExpZmVDeWNsZXMiLCJjb21taXRFcnJvckxvZ2dpbmciLCJjb21wb25lbnRTdGFjayIsImNvbW1pdEF0dGFjaFJlZiIsImNvbW1pdERldGFjaFJlZiIsImNmIiwiYWRkIiwic2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrIiwiY2FuY2VsRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiUmMiLCJyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsInJlcXVlc3RXb3JrIiwiZmx1c2hSb290IiwiYmF0Y2hlZFVwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZmx1c2hDb250cm9sbGVkIiwiZGVmZXJyZWRVcGRhdGVzIiwic3luY1VwZGF0ZXMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsImNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJsZWdhY3lDb250ZXh0IiwibGYiLCJBZCIsImNyZWF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUiLCJnZXRQdWJsaWNSb290SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJCZCIsImluamVjdEludG9EZXZUb29scyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiR2UiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsIm1mIiwibmYiLCJvZiIsInFmIiwicGVyZm9ybWFuY2UiLCJyZiIsInNmIiwidGYiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwidWYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsImRpZFRpbWVvdXQiLCJDZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkRmIiwicG9zdE1lc3NhZ2UiLCJzZXRUaW1lb3V0IiwiSW5maW5pdHkiLCJjbGVhclRpbWVvdXQiLCJGZiIsIkNoaWxkcmVuIiwiRWYiLCJHZiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiSGYiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiSWYiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkpmIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJuYW1lc3BhY2VVUkkiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiUmYiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJTZiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIlRmIiwiVWYiLCJ0cmltIiwic2V0UHJvcGVydHkiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJWZiIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJjcmVhdGVFbGVtZW50TlMiLCJiZyIsImNnIiwiX19odG1sIiwib25jbGljayIsImRnIiwiZWciLCJmZyIsIm1nIiwibmciLCJzZXRJbml0aWFsUHJvcGVydGllcyIsImRpZmZQcm9wZXJ0aWVzIiwidXBkYXRlUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRUZXh0Iiwid2FybkZvclVubWF0Y2hlZFRleHQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwib2ciLCJwZyIsInFnIiwiWCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsInJnIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsInNnIiwiX2ludGVybmFsUm9vdCIsInRnIiwidWciLCJhdXRvRm9jdXMiLCJ0aGVuIiwiY29tbWl0IiwidW5tb3VudCIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNyZWF0ZUJhdGNoIiwidGFnTmFtZSIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsImhpZGRlbiIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlIiwiQ2ciLCJFZyIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJEZyIsIkZnIiwicGYiLCJHZyIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIkhnIiwiSWciLCJ3YXJuT25jZSIsIm1zZyIsImhhc1dhcm5lZCIsIndhcm4iLCJwYXJlbnROb2RlUG9zaXRpb25TdGF0aWMiLCJjaGlsZElzRGlzYWJsZWQiLCJlbnRlclByZXNldHMiLCJlbGV2YXRvciIsImZhZGUiLCJhY2NvcmRpb25WZXJ0aWNhbCIsInRyYW5zZm9ybU9yaWdpbiIsImFjY29yZGlvbkhvcml6b250YWwiLCJub25lIiwibGVhdmVQcmVzZXRzIiwiYXBwZWFyUHJlc2V0cyIsImRlZmF1bHRQcmVzZXQiLCJkaXNhYmxlUHJlc2V0IiwiZmluZCIsInByZWRpY2F0ZSIsImFyciIsImV2ZXJ5IiwiX2lzQXJyYXkiLCJjYWNoZSIsImh5cGhlbmF0ZSIsInN0ciIsIl90eXBlb2YiLCJjbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfZXh0ZW5kcyIsImluaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJhcHBseVN0eWxlc1RvRE9NTm9kZSIsIl9yZWYiLCJkb21Ob2RlIiwiZ2V0UG9zaXRpb25EZWx0YSIsIl9yZWYzIiwiY2hpbGREb21Ob2RlIiwiY2hpbGRCb3VuZGluZ0JveCIsInBhcmVudEJvdW5kaW5nQm94IiwiZ2V0UG9zaXRpb24iLCJkZWZhdWx0Qm94IiwicmlnaHQiLCJib3R0b20iLCJoZWlnaHQiLCJ3aWR0aCIsIm9sZFJlbGF0aXZlQm94IiwicGFyZW50Qm94IiwibmV3QWJzb2x1dGVCb3giLCJuZXdSZWxhdGl2ZUJveCIsInRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9ucyIsIi1vLXRyYW5zaXRpb24iLCItbW96LXRyYW5zaXRpb24iLCItd2Via2l0LXRyYW5zaXRpb24iLCJtYXRjaCIsImdldFByb3BlcnR5VmFsdWUiLCJ3aGljaFRyYW5zaXRpb25FdmVudCIsIm5vQnJvd3NlclN1cHBvcnQiLCJnZXRLZXkiLCJjaGlsZERhdGEiLCJnZXRFbGVtZW50Q2hpbGRyZW4iLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwidG9BcnJheSIsImVuaGFuY2VkRmxpcE1vdmUiLCJDb21wb3NlZENvbXBvbmVudCIsIl9jbGFzcyIsIl90ZW1wIiwiX0NvbXBvbmVudCIsIkZsaXBNb3ZlUHJvcENvbnZlcnRlciIsImNoZWNrQ2hpbGRyZW4iLCJjb252ZXJ0UHJvcHMiLCJ3b3JraW5nUHJvcHMiLCJvblN0YXJ0Iiwib25GaW5pc2giLCJvblN0YXJ0QWxsIiwib25GaW5pc2hBbGwiLCJ0eXBlTmFtZSIsImRpc2FibGVBbGxBbmltYXRpb25zIiwibWFpbnRhaW5Db250YWluZXJIZWlnaHQiLCJ2ZXJ0aWNhbEFsaWdubWVudCIsImNvbnZlcnRUaW1pbmdQcm9wIiwiZGVsYXkiLCJzdGFnZ2VyRHVyYXRpb25CeSIsInN0YWdnZXJEZWxheUJ5IiwiYXBwZWFyQW5pbWF0aW9uIiwiY29udmVydEFuaW1hdGlvblByb3AiLCJlbnRlckFuaW1hdGlvbiIsImxlYXZlQW5pbWF0aW9uIiwiZGVsZWdhdGVkIiwicHJpbWFyeVByb3BLZXlzIiwiZGVsZWdhdGVkUHJvcHMiLCJvbWl0IiwicG9zaXRpb24iLCJwcm9wIiwicmF3VmFsdWUiLCJwYXJzZUludCIsImRlZmF1bHRQcm9wcyIsInByZXNldHMiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwcm9wQ29udmVydGVyIiwiRmxpcE1vdmUiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJhcHBlYXJpbmciLCJjaGlsZHJlbkRhdGEiLCJwYXJlbnREYXRhIiwiYm91bmRpbmdCb3giLCJoZWlnaHRQbGFjZWhvbGRlckRhdGEiLCJyZW1haW5pbmdBbmltYXRpb25zIiwiY2hpbGRyZW5Ub0FuaW1hdGUiLCJmaW5kRE9NQ29udGFpbmVyIiwicmVhY3RfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsIkhUTUxFbGVtZW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJ1bkFuaW1hdGlvbiIsImR5bmFtaWNDaGlsZHJlbiIsImRvZXNDaGlsZE5lZWRUb0JlQW5pbWF0ZWQiLCJjaGlsZHJlbkluaXRpYWxTdHlsZXMiLCJjb21wdXRlSW5pdGlhbFN0eWxlcyIsImFuaW1hdGVDaGlsZCIsImNhbGxDaGlsZHJlbkhvb2siLCJnZXRDaGlsZERhdGEiLCJfdGhpcyRwcm9wcyIsImlzQXBwZWFyaW5nV2l0aEFuaW1hdGlvbiIsImlzRW50ZXJpbmdXaXRoQW5pbWF0aW9uIiwiZW50ZXJpbmciLCJpc0xlYXZpbmdXaXRoQW5pbWF0aW9uIiwibGVhdmluZyIsIl9nZXRQb3NpdGlvbkRlbHRhIiwiZFgiLCJkWSIsImlzQW5pbWF0aW9uRGlzYWJsZWQiLCJwcmVwRm9yQW5pbWF0aW9uIiwibmV4dFByb3BzIiwidXBkYXRlQm91bmRpbmdCb3hDYWNoZXMiLCJuZXh0Q2hpbGRyZW4iLCJjYWxjdWxhdGVOZXh0U2V0T2ZDaGlsZHJlbiIsInByZXZpb3VzUHJvcHMiLCJub3RCb3RoQXJyYXlzIiwiZGlmZmVyZW50TGVuZ3RocyIsImFycmF5c0VxdWFsIiwidXBkYXRlZENoaWxkcmVuIiwibmV4dENoaWxkIiwiZmluZENoaWxkQnlLZXkiLCJpc0VudGVyaW5nIiwibnVtT2ZDaGlsZHJlbkxlYXZpbmciLCJuZXh0Q2hpbGRJbmRleCIsIl90aGlzMyIsIl9wcm9wcyIsImxlYXZpbmdDaGlsZCIsImNvbXB1dGVkIiwibWFyZ2lucyIsInJlZHVjZSIsImFjYyIsIm1hcmdpbiIsIl9iYWJlbEhlbHBlcnMkZXh0ZW5kcyIsInByb3BlcnR5VmFsIiwiTnVtYmVyIiwicmVtb3ZlTm9kZUZyb21ET01GbG93IiwiX3JlZjQiLCJwYXJlbnREb21Ob2RlIiwicmVkdWN0aW9uSW5IZWlnaHQiLCJ1cGRhdGVIZWlnaHRQbGFjZWhvbGRlciIsImNoaWxkSW5pdGlhbFN0eWxlcyIsIl90aGlzNCIsImNyZWF0ZVRyYW5zaXRpb25TdHJpbmciLCJiaW5kVHJhbnNpdGlvbkVuZEhhbmRsZXIiLCJfdGhpczUiLCJ0cmFuc2l0aW9uRW5kSGFuZGxlciIsImV2IiwidHJpZ2dlckZpbmlzaEhvb2tzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUNoaWxkRGF0YSIsIl90aGlzNiIsIl9yZWYyIiwiaG9vayIsIl90aGlzNyIsImVsZW1lbnRzIiwiZG9tTm9kZXMiLCJjaGlsZEtleSIsImhhc0NoaWxkRGF0YSIsIl90aGlzOCIsImNoaWxkcmVuQm91bmRpbmdCb3hlcyIsIl9nZXRQb3NpdGlvbiIsImdldFJlbGF0aXZlQm91bmRpbmdCb3giLCJzZXRDaGlsZERhdGEiLCJfZ2V0UG9zaXRpb25EZWx0YTIiLCJjcmVhdGVIZWlnaHRQbGFjZWhvbGRlciIsIl90aGlzOSIsInBsYWNlaG9sZGVyVHlwZSIsInZpc2liaWxpdHkiLCJjaGlsZHJlbldpdGhSZWZzIiwiX3RoaXMxMCIsImZvdW5kTm9kZSIsInJlYWN0X2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiVEVYVF9OT0RFIiwiZ2V0TmF0aXZlTm9kZSIsIl90aGlzMTEiLCJfcHJvcHMyIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCJmdW5jIiwiY291bnQiLCI9IiwiOiIsImVzY2FwZSIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9kZWZhdWx0VmFsdWUiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiZm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsInVuc3RhYmxlX0FzeW5jTW9kZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJpc1ZhbGlkRWxlbWVudCIsInNhdmVUb2RvIiwiSGVhZGVyIiwic2hvd1BvcHVwIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiRnVuY3Rpb24iLCJldmFsIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJMQVJHRV9BUlJBWV9TSVpFIiwiQ09SRV9FUlJPUl9URVhUIiwiRlVOQ19FUlJPUl9URVhUIiwiSEFTSF9VTkRFRklORUQiLCJNQVhfTUVNT0laRV9TSVpFIiwiUExBQ0VIT0xERVIiLCJDTE9ORV9ERUVQX0ZMQUciLCJDTE9ORV9GTEFUX0ZMQUciLCJDTE9ORV9TWU1CT0xTX0ZMQUciLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsIkNPTVBBUkVfVU5PUkRFUkVEX0ZMQUciLCJXUkFQX0JJTkRfRkxBRyIsIldSQVBfQklORF9LRVlfRkxBRyIsIldSQVBfQ1VSUllfQk9VTkRfRkxBRyIsIldSQVBfQ1VSUllfRkxBRyIsIldSQVBfQ1VSUllfUklHSFRfRkxBRyIsIldSQVBfUEFSVElBTF9GTEFHIiwiV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUciLCJXUkFQX0FSWV9GTEFHIiwiV1JBUF9SRUFSR19GTEFHIiwiV1JBUF9GTElQX0ZMQUciLCJERUZBVUxUX1RSVU5DX0xFTkdUSCIsIkRFRkFVTFRfVFJVTkNfT01JU1NJT04iLCJIT1RfQ09VTlQiLCJIT1RfU1BBTiIsIkxBWllfRklMVEVSX0ZMQUciLCJMQVpZX01BUF9GTEFHIiwiSU5GSU5JVFkiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUFYX0lOVEVHRVIiLCJOQU4iLCJNQVhfQVJSQVlfTEVOR1RIIiwiTUFYX0FSUkFZX0lOREVYIiwiSEFMRl9NQVhfQVJSQVlfTEVOR1RIIiwid3JhcEZsYWdzIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYXN5bmNUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImRvbUV4Y1RhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm51bGxUYWciLCJvYmplY3RUYWciLCJwcm94eVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsInVuZGVmaW5lZFRhZyIsIndlYWtNYXBUYWciLCJ3ZWFrU2V0VGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsInJlRW1wdHlTdHJpbmdMZWFkaW5nIiwicmVFbXB0eVN0cmluZ01pZGRsZSIsInJlRW1wdHlTdHJpbmdUcmFpbGluZyIsInJlRXNjYXBlZEh0bWwiLCJyZVVuZXNjYXBlZEh0bWwiLCJyZUhhc0VzY2FwZWRIdG1sIiwiUmVnRXhwIiwicmVIYXNVbmVzY2FwZWRIdG1sIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwicmVJbnRlcnBvbGF0ZSIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJyZVByb3BOYW1lIiwicmVSZWdFeHBDaGFyIiwicmVIYXNSZWdFeHBDaGFyIiwicmVUcmltIiwicmVUcmltU3RhcnQiLCJyZVRyaW1FbmQiLCJyZVdyYXBDb21tZW50IiwicmVXcmFwRGV0YWlscyIsInJlU3BsaXREZXRhaWxzIiwicmVBc2NpaVdvcmQiLCJyZUVzY2FwZUNoYXIiLCJyZUVzVGVtcGxhdGUiLCJyZUZsYWdzIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzSG9zdEN0b3IiLCJyZUlzT2N0YWwiLCJyZUlzVWludCIsInJlTGF0aW4iLCJyZU5vTWF0Y2giLCJyZVVuZXNjYXBlZFN0cmluZyIsInJzQ29tYm9SYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQXN0cmFsIiwicnNCcmVhayIsInJzQ29tYm8iLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNVcHBlciIsInJzTWlzY0xvd2VyIiwicnNNaXNjVXBwZXIiLCJyZU9wdE1vZCIsInJzU2VxIiwicnNFbW9qaSIsInJzU3ltYm9sIiwicmVBcG9zIiwicmVDb21ib01hcmsiLCJyZVVuaWNvZGUiLCJyZVVuaWNvZGVXb3JkIiwicmVIYXNVbmljb2RlIiwicmVIYXNVbmljb2RlV29yZCIsImNvbnRleHRQcm9wcyIsInRlbXBsYXRlQ291bnRlciIsInR5cGVkQXJyYXlUYWdzIiwiY2xvbmVhYmxlVGFncyIsInN0cmluZ0VzY2FwZXMiLCJcXCIsIiciLCJcbiIsIlxyIiwi4oCoIiwi4oCpIiwiZnJlZVBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwiZnJlZVBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsImZyZWVTZWxmIiwicm9vdCIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsInRoaXNBcmciLCJhcnJheUFnZ3JlZ2F0b3IiLCJhcnJheSIsInNldHRlciIsIml0ZXJhdGVlIiwiYWNjdW11bGF0b3IiLCJhcnJheUVhY2giLCJhcnJheUVhY2hSaWdodCIsImFycmF5RXZlcnkiLCJhcnJheUZpbHRlciIsInJlc0luZGV4IiwiYXJyYXlJbmNsdWRlcyIsImJhc2VJbmRleE9mIiwiYXJyYXlJbmNsdWRlc1dpdGgiLCJjb21wYXJhdG9yIiwiYXJyYXlNYXAiLCJhcnJheVB1c2giLCJ2YWx1ZXMiLCJhcnJheVJlZHVjZSIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlUmlnaHQiLCJhcnJheVNvbWUiLCJhc2NpaVNpemUiLCJiYXNlUHJvcGVydHkiLCJiYXNlRmluZEtleSIsImNvbGxlY3Rpb24iLCJlYWNoRnVuYyIsImJhc2VGaW5kSW5kZXgiLCJmcm9tSW5kZXgiLCJmcm9tUmlnaHQiLCJzdHJpY3RJbmRleE9mIiwiYmFzZUlzTmFOIiwiYmFzZUluZGV4T2ZXaXRoIiwiYmFzZU1lYW4iLCJiYXNlU3VtIiwiYmFzZVByb3BlcnR5T2YiLCJiYXNlUmVkdWNlIiwiYmFzZVRpbWVzIiwiYmFzZVVuYXJ5IiwiYmFzZVZhbHVlcyIsImNhY2hlSGFzIiwiY2hhcnNTdGFydEluZGV4Iiwic3RyU3ltYm9scyIsImNoclN5bWJvbHMiLCJjaGFyc0VuZEluZGV4IiwiZGVidXJyTGV0dGVyIiwiw4AiLCLDgSIsIsOCIiwiw4MiLCLDhCIsIsOFIiwiw6AiLCLDoSIsIsOiIiwiw6MiLCLDpCIsIsOlIiwiw4ciLCLDpyIsIsOQIiwiw7AiLCLDiCIsIsOJIiwiw4oiLCLDiyIsIsOoIiwiw6kiLCLDqiIsIsOrIiwiw4wiLCLDjSIsIsOOIiwiw48iLCLDrCIsIsOtIiwiw64iLCLDryIsIsORIiwiw7EiLCLDkiIsIsOTIiwiw5QiLCLDlSIsIsOWIiwiw5giLCLDsiIsIsOzIiwiw7QiLCLDtSIsIsO2Iiwiw7giLCLDmSIsIsOaIiwiw5siLCLDnCIsIsO5Iiwiw7oiLCLDuyIsIsO8Iiwiw50iLCLDvSIsIsO/Iiwiw4YiLCLDpiIsIsOeIiwiw74iLCLDnyIsIsSAIiwixIIiLCLEhCIsIsSBIiwixIMiLCLEhSIsIsSGIiwixIgiLCLEiiIsIsSMIiwixIciLCLEiSIsIsSLIiwixI0iLCLEjiIsIsSQIiwixI8iLCLEkSIsIsSSIiwixJQiLCLEliIsIsSYIiwixJoiLCLEkyIsIsSVIiwixJciLCLEmSIsIsSbIiwixJwiLCLEniIsIsSgIiwixKIiLCLEnSIsIsSfIiwixKEiLCLEoyIsIsSkIiwixKYiLCLEpSIsIsSnIiwixKgiLCLEqiIsIsSsIiwixK4iLCLEsCIsIsSpIiwixKsiLCLErSIsIsSvIiwixLEiLCLEtCIsIsS1IiwixLYiLCLEtyIsIsS4IiwixLkiLCLEuyIsIsS9IiwixL8iLCLFgSIsIsS6IiwixLwiLCLEviIsIsWAIiwixYIiLCLFgyIsIsWFIiwixYciLCLFiiIsIsWEIiwixYYiLCLFiCIsIsWLIiwixYwiLCLFjiIsIsWQIiwixY0iLCLFjyIsIsWRIiwixZQiLCLFliIsIsWYIiwixZUiLCLFlyIsIsWZIiwixZoiLCLFnCIsIsWeIiwixaAiLCLFmyIsIsWdIiwixZ8iLCLFoSIsIsWiIiwixaQiLCLFpiIsIsWjIiwixaUiLCLFpyIsIsWoIiwixaoiLCLFrCIsIsWuIiwixbAiLCLFsiIsIsWpIiwixasiLCLFrSIsIsWvIiwixbEiLCLFsyIsIsW0IiwixbUiLCLFtiIsIsW3IiwixbgiLCLFuSIsIsW7Iiwixb0iLCLFuiIsIsW8Iiwixb4iLCLEsiIsIsSzIiwixZIiLCLFkyIsIsWJIiwixb8iLCJlc2NhcGVIdG1sQ2hhciIsIiYiLCI8IiwiPiIsIlwiIiwiZXNjYXBlU3RyaW5nQ2hhciIsImNociIsImhhc1VuaWNvZGUiLCJzdHJpbmciLCJtYXBUb0FycmF5Iiwic2l6ZSIsIm92ZXJBcmciLCJyZXBsYWNlSG9sZGVycyIsInNhZmVHZXQiLCJzZXRUb0FycmF5Iiwic2V0VG9QYWlycyIsInN0cmluZ1NpemUiLCJsYXN0SW5kZXgiLCJ1bmljb2RlU2l6ZSIsInN0cmluZ1RvQXJyYXkiLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInVuZXNjYXBlSHRtbENoYXIiLCImYW1wOyIsIiZsdDsiLCImZ3Q7IiwiJnF1b3Q7IiwiJiMzOTsiLCJfIiwicnVuSW5Db250ZXh0IiwidWlkIiwiZGVmYXVsdHMiLCJwaWNrIiwiYXJyYXlQcm90byIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiY29yZUpzRGF0YSIsImZ1bmNUb1N0cmluZyIsImlkQ291bnRlciIsIm1hc2tTcmNLZXkiLCJleGVjIiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsIkJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJhbGxvY1Vuc2FmZSIsImdldFByb3RvdHlwZSIsIm9iamVjdENyZWF0ZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzeW1JdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJjdHhTZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsImNlaWwiLCJuYXRpdmVGbG9vciIsImZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsImlzRmluaXRlIiwibmF0aXZlSm9pbiIsIm5hdGl2ZUtleXMiLCJuYXRpdmVNYXgiLCJtYXgiLCJuYXRpdmVNaW4iLCJuYXRpdmVOb3ciLCJuYXRpdmVQYXJzZUludCIsIm5hdGl2ZVJhbmRvbSIsIm5hdGl2ZVJldmVyc2UiLCJyZXZlcnNlIiwiRGF0YVZpZXciLCJQcm9taXNlIiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJwcm90byIsImlzT2JqZWN0IiwiYmFzZUxvZGFzaCIsImNoYWluQWxsIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiY2xlYXIiLCJlbnRyeSIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsIlN0YWNrIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImVxIiwiYmFzZUFzc2lnblZhbHVlIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsImJhc2VBZ2dyZWdhdG9yIiwiYmFzZUVhY2giLCJiYXNlQXNzaWduIiwiY29weU9iamVjdCIsImJhc2VBdCIsInNraXAiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJpc0RlZXAiLCJpc0ZsYXQiLCJpc0Z1bGwiLCJpbml0Q2xvbmVBcnJheSIsImdldFRhZyIsImlzRnVuYyIsImNsb25lQnVmZmVyIiwiaW5pdENsb25lT2JqZWN0IiwiZ2V0U3ltYm9sc0luIiwiY29weVN5bWJvbHNJbiIsImtleXNJbiIsImJhc2VBc3NpZ25JbiIsImdldFN5bWJvbHMiLCJjb3B5U3ltYm9scyIsInN5bWJvbCIsInJlZ2V4cCIsIkN0b3IiLCJjbG9uZUFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNsb25lRGF0YVZpZXciLCJjbG9uZVR5cGVkQXJyYXkiLCJpbml0Q2xvbmVCeVRhZyIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImdldEFsbEtleXNJbiIsImdldEFsbEtleXMiLCJiYXNlQ29uZm9ybXNUbyIsImJhc2VEZWxheSIsIndhaXQiLCJiYXNlRGlmZmVyZW5jZSIsImluY2x1ZGVzIiwiaXNDb21tb24iLCJ2YWx1ZXNMZW5ndGgiLCJvdXRlciIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsImV2YWx1YXRlIiwiaW50ZXJwb2xhdGUiLCJ2YXJpYWJsZSIsImltcG9ydHMiLCJoYXNoIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJpc0Z1bmN0aW9uIiwiYmFzZUdldCIsInBhdGgiLCJjYXN0UGF0aCIsInRvS2V5IiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYmFzZUdldFRhZyIsImlzT3duIiwidW5tYXNrZWQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VHdCIsIm90aGVyIiwiYmFzZUhhcyIsImJhc2VIYXNJbiIsImJhc2VJbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsInNlZW4iLCJiYXNlSW52b2tlIiwicGFyZW50IiwiYmFzZUlzQXJndW1lbnRzIiwiYmFzZUlzRXF1YWwiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwibWVzc2FnZSIsImNvbnZlcnQiLCJpc1BhcnRpYWwiLCJlcXVhbEJ5VGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJza2lwQ3RvciIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvYmpDdG9yIiwib3RoQ3RvciIsImVxdWFsT2JqZWN0cyIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJiYXNlSXNOYXRpdmUiLCJiYXNlSXRlcmF0ZWUiLCJpZGVudGl0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwibmV3VmFsdWUiLCJpc1R5cGVkIiwiaXNBcnJheUxpa2VPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwidG9QbGFpbk9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJiYXNlTnRoIiwiYmFzZU9yZGVyQnkiLCJpdGVyYXRlZXMiLCJvcmRlcnMiLCJnZXRJdGVyYXRlZSIsImNvbXBhcmVyIiwic29ydCIsImJhc2VTb3J0QnkiLCJjcml0ZXJpYSIsIm9iakNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJjb21wYXJlQXNjZW5kaW5nIiwiY29tcGFyZU11bHRpcGxlIiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImJhc2VQdWxsQXQiLCJpbmRleGVzIiwicHJldmlvdXMiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwiYmFzZVdoaWxlIiwiaXNEcm9wIiwiYmFzZVdyYXBwZXJWYWx1ZSIsImFjdGlvbnMiLCJhY3Rpb24iLCJiYXNlWG9yIiwiYmFzZVppcE9iamVjdCIsImFzc2lnbkZ1bmMiLCJ2YWxzTGVuZ3RoIiwiY2FzdEFycmF5TGlrZU9iamVjdCIsImNhc3RGdW5jdGlvbiIsInN0cmluZ1RvUGF0aCIsImNhc3RSZXN0IiwiY2FzdFNsaWNlIiwiY29weSIsImFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzSW5kZXgiLCJhcmdzTGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRJbmRleCIsImxlZnRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsImlzVW5jdXJyaWVkIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImlzTmV3IiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsImd1YXJkIiwiaXNJdGVyYXRlZUNhbGwiLCJpdGVyYWJsZSIsImNyZWF0ZUNhc2VGaXJzdCIsIm1ldGhvZE5hbWUiLCJ0cmFpbGluZyIsImNyZWF0ZUNvbXBvdW5kZXIiLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJjb3VudEhvbGRlcnMiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImFyckxlbmd0aCIsIm9sZEFycmF5IiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsInN0ZXAiLCJ0b0Zpbml0ZSIsImJhc2VSYW5nZSIsImNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24iLCJ0b051bWJlciIsIndyYXBGdW5jIiwiaXNDdXJyeSIsIm5ld0RhdGEiLCJzZXREYXRhIiwic2V0V3JhcFRvU3RyaW5nIiwiY3JlYXRlUm91bmQiLCJwcmVjaXNpb24iLCJ0b0ludGVnZXIiLCJwYWlyIiwibm9vcCIsImNyZWF0ZVRvUGFpcnMiLCJiYXNlVG9QYWlycyIsImNyZWF0ZVdyYXAiLCJzcmNCaXRtYXNrIiwibmV3Qml0bWFzayIsImlzQ29tYm8iLCJtZXJnZURhdGEiLCJjcmVhdGVDdXJyeSIsImNyZWF0ZVBhcnRpYWwiLCJjcmVhdGVCaW5kIiwiY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiIsImN1c3RvbURlZmF1bHRzTWVyZ2UiLCJjdXN0b21PbWl0Q2xvbmUiLCJhcnJWYWx1ZSIsImZsYXR0ZW4iLCJvdGhlckZ1bmMiLCJzdHViQXJyYXkiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImlzTGVuZ3RoIiwiQXJyYXlCdWZmZXIiLCJyZXNvbHZlIiwiY3RvclN0cmluZyIsImlzTWFza2FibGUiLCJzdHViRmFsc2UiLCJvdGhlckFyZ3MiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImRldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJyYW5kIiwibWVtb2l6ZSIsIm1lbW9pemVDYXBwZWQiLCJjaGFyQ29kZUF0IiwicXVvdGUiLCJzdWJTdHJpbmciLCJjbG9uZSIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJpbnRlcnNlY3Rpb24iLCJtYXBwZWQiLCJpbnRlcnNlY3Rpb25CeSIsImludGVyc2VjdGlvbldpdGgiLCJwdWxsIiwicHVsbEFsbCIsInB1bGxBdCIsInVuaW9uIiwidW5pb25CeSIsInVuaW9uV2l0aCIsInVuemlwIiwiZ3JvdXAiLCJ1bnppcFdpdGgiLCJ3aXRob3V0IiwieG9yIiwieG9yQnkiLCJ4b3JXaXRoIiwiemlwIiwiemlwV2l0aCIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ3cmFwcGVyQXQiLCJjb3VudEJ5IiwiZmluZExhc3QiLCJmb3JFYWNoUmlnaHQiLCJncm91cEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJwYXJ0aXRpb24iLCJzb3J0QnkiLCJiaW5kS2V5IiwiZGVib3VuY2UiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0aW1lckV4cGlyZWQiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwibGVhZGluZ0VkZ2UiLCJjYW5jZWwiLCJmbHVzaCIsImRlZmVyIiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwib3ZlckFyZ3MiLCJ0cmFuc2Zvcm1zIiwiZnVuY3NMZW5ndGgiLCJwYXJ0aWFsIiwicGFydGlhbFJpZ2h0IiwicmVhcmciLCJndCIsImd0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJpc051bWJlciIsImlzU3RyaW5nIiwibHQiLCJsdGUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnQiLCJpbnZlcnRCeSIsImludm9rZSIsIm1lcmdlIiwiYmFzZVBpY2siLCJwaWNrQnkiLCJ0b1BhaXJzIiwidG9QYWlyc0luIiwiY2FtZWxDYXNlIiwid29yZCIsImNhcGl0YWxpemUiLCJ1cHBlckZpcnN0Iiwia2ViYWJDYXNlIiwibG93ZXJDYXNlIiwibG93ZXJGaXJzdCIsInNuYWtlQ2FzZSIsInN0YXJ0Q2FzZSIsInVwcGVyQ2FzZSIsInBhdHRlcm4iLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZCIsIm1ldGhvZE9mIiwibWl4aW4iLCJvdmVyIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInJvdW5kIiwic3VidHJhY3QiLCJtaW51ZW5kIiwic3VidHJhaGVuZCIsImFmdGVyIiwiY2FzdEFycmF5IiwiY2h1bmsiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwiYmFzZUNvbmZvcm1zIiwicHJvcGVydGllcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImZpbGwiLCJiYXNlRmlsbCIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW5EZWVwIiwiZmxhdHRlbkRlcHRoIiwiZmxpcCIsImZyb21QYWlycyIsImZ1bmN0aW9ucyIsImZ1bmN0aW9uc0luIiwiaW5pdGlhbCIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJtYXRjaGVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib25jZSIsIm9yZGVyQnkiLCJwcm9wZXJ0eU9mIiwicHVsbEFsbEJ5IiwicHVsbEFsbFdpdGgiLCJyZWplY3QiLCJyZXN0Iiwic2FtcGxlU2l6ZSIsInNldFdpdGgiLCJzaHVmZmxlIiwic29ydGVkVW5pcSIsInNvcnRlZFVuaXFCeSIsInNlcGFyYXRvciIsImxpbWl0Iiwic3ByZWFkIiwidGFpbCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9QYXRoIiwiaXNBcnJMaWtlIiwidW5hcnkiLCJ1bmlxIiwidW5pcUJ5IiwidW5pcVdpdGgiLCJ1bnNldCIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsIndyYXAiLCJ6aXBPYmplY3QiLCJ6aXBPYmplY3REZWVwIiwiZW50cmllc0luIiwiZXh0ZW5kV2l0aCIsImNsYW1wIiwiY2xvbmVEZWVwIiwiY2xvbmVEZWVwV2l0aCIsImNsb25lV2l0aCIsImNvbmZvcm1zVG8iLCJkZWZhdWx0VG8iLCJlbmRzV2l0aCIsImVzY2FwZVJlZ0V4cCIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNNYXRjaCIsImlzTWF0Y2hXaXRoIiwiaXNOYXRpdmUiLCJpc05pbCIsImlzTnVsbCIsImlzU2FmZUludGVnZXIiLCJpc1VuZGVmaW5lZCIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImxhc3RJbmRleE9mIiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJub0NvbmZsaWN0IiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicGFkU3RhcnQiLCJyYWRpeCIsImZsb2F0aW5nIiwidGVtcCIsInJlZHVjZVJpZ2h0Iiwic2FtcGxlIiwic29tZSIsInNvcnRlZEluZGV4Iiwic29ydGVkSW5kZXhCeSIsInNvcnRlZEluZGV4T2YiLCJzb3J0ZWRMYXN0SW5kZXgiLCJzb3J0ZWRMYXN0SW5kZXhCeSIsInNvcnRlZExhc3RJbmRleE9mIiwic3RhcnRzV2l0aCIsInN1bSIsInN1bUJ5IiwidGVtcGxhdGUiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJyZURlbGltaXRlcnMiLCJzb3VyY2VVUkwiLCJlc2NhcGVWYWx1ZSIsImludGVycG9sYXRlVmFsdWUiLCJlc1RlbXBsYXRlVmFsdWUiLCJldmFsdWF0ZVZhbHVlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltRW5kIiwidHJpbVN0YXJ0IiwidHJ1bmNhdGUiLCJvbWlzc2lvbiIsIm5ld0VuZCIsInVuaXF1ZUlkIiwicHJlZml4IiwiZWFjaCIsImVhY2hSaWdodCIsIlZFUlNJT04iLCJpc0ZpbHRlciIsInRha2VOYW1lIiwiZHJvcE5hbWUiLCJjaGVja0l0ZXJhdGVlIiwiaXNUYWtlciIsImxvZGFzaEZ1bmMiLCJyZXRVbndyYXBwZWQiLCJpc0xhenkiLCJ1c2VMYXp5IiwiaXNIeWJyaWQiLCJpc1Vud3JhcHBlZCIsIm9ubHlMYXp5IiwiY2hhaW5OYW1lIiwiZGlyIiwiaXNSaWdodCIsImdldFZpZXciLCJpdGVyTGVuZ3RoIiwidGFrZUNvdW50IiwiaXRlckluZGV4Iiwid3JhcHBlZCIsInRvSlNPTiIsIl9yZWFjdERvbSIsIkFwcCIsIl9oZWFkZXIyIiwiX2NvbnRlbnQyIiwiX2Zvb3RlcjIiLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6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QyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLEtBQUFDLElBQUEsS0FDQUMsSUFBQSxLQUFBQyxJQUFBLEtBQ0FDLElBQUEsS0FFQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsS0FBQUMsSUFBQSxLQUNBQyxJQUFBLEtBQUFDLElBQUEsS0FDQUMsSUFBQSxLQUFBQyxJQUFBLE1BK3NCQUMsR0FBQXpNLElBMXNCQTBNLElBQUEsUUFDQUMsSUFBQSxPQUNBQyxJQUFBLE9BQ0FDLElBQUEsU0FDQS9RLElBQUEsVUErc0JBLFNBQUFnUixHQUFBQyxHQUNBLFdBQUFuUixHQUFBbVIsR0FzQkEsU0FBQUMsR0FBQUMsR0FDQSxPQUFBM1IsR0FBQXBxQyxLQUFBKzdDLEdBc0NBLFNBQUFDLEdBQUE5MkQsR0FDQSxJQUFBVCxHQUFBLEVBQ0FoQyxFQUFBOE4sTUFBQXJMLEVBQUErMkQsTUFLQSxPQUhBLzJELEVBQUEvQyxRQUFBLFNBQUE1RSxFQUFBNkUsR0FDQUssSUFBQWdDLElBQUFyQyxFQUFBN0UsS0FFQWtGLEVBV0EsU0FBQXk1RCxHQUFBbGMsRUFBQXQ5QyxHQUNBLGdCQUFBdUgsR0FDQSxPQUFBKzFDLEVBQUF0OUMsRUFBQXVILEtBYUEsU0FBQWt5RCxHQUFBdFAsRUFBQXRrRCxHQU1BLElBTEEsSUFBQTlELEdBQUEsRUFDQS9FLEVBQUFtdEQsRUFBQW50RCxPQUNBMnRELEVBQUEsRUFDQTVxRCxPQUVBZ0MsRUFBQS9FLEdBQUEsQ0FDQSxJQUFBbkMsRUFBQXN2RCxFQUFBcG9ELEdBQ0FsSCxJQUFBZ0wsR0FBQWhMLElBQUFtbEQsSUFDQW1LLEVBQUFwb0QsR0FBQWkrQyxFQUNBamdELEVBQUE0cUQsS0FBQTVvRCxHQUdBLE9BQUFoQyxFQVdBLFNBQUEyNUQsR0FBQTErRCxFQUFBMEUsR0FDQSxtQkFBQUEsRUFDQW1CLEVBQ0E3RixFQUFBMEUsR0FVQSxTQUFBaTZELEdBQUF2L0MsR0FDQSxJQUFBclksR0FBQSxFQUNBaEMsRUFBQThOLE1BQUF1TSxFQUFBbS9DLE1BS0EsT0FIQW4vQyxFQUFBM2EsUUFBQSxTQUFBNUUsR0FDQWtGLElBQUFnQyxHQUFBbEgsSUFFQWtGLEVBVUEsU0FBQTY1RCxHQUFBeC9DLEdBQ0EsSUFBQXJZLEdBQUEsRUFDQWhDLEVBQUE4TixNQUFBdU0sRUFBQW0vQyxNQUtBLE9BSEFuL0MsRUFBQTNhLFFBQUEsU0FBQTVFLEdBQ0FrRixJQUFBZ0MsSUFBQWxILE9BRUFrRixFQW9EQSxTQUFBODVELEdBQUFSLEdBQ0EsT0FBQUQsR0FBQUMsR0FrQ0EsU0FBQUEsR0FDQSxJQUFBdDVELEVBQUF5bkQsR0FBQXNTLFVBQUEsRUFDQSxLQUFBdFMsR0FBQWxxQyxLQUFBKzdDLE1BQ0F0NUQsRUFFQSxPQUFBQSxFQXRDQWc2RCxDQUFBVixHQUNBOU4sR0FBQThOLEdBVUEsU0FBQVcsR0FBQVgsR0FDQSxPQUFBRCxHQUFBQyxHQW9DQSxTQUFBQSxHQUNBLE9BQUFBLEVBQUF2bEIsTUFBQTBULFFBcENBeVMsQ0FBQVosR0E5a0JBLFNBQUFBLEdBQ0EsT0FBQUEsRUFBQTV3RCxNQUFBLElBOGtCQXl4RCxDQUFBYixHQVVBLElBQUFjLEdBQUEvTixJQXA3QkFnTyxRQUFVLElBQ1ZDLE9BQVMsSUFDVEMsT0FBUyxJQUNUQyxTQUFXLElBQ1hDLFFBQVUsTUFzL0JWLElBMHllQUMsR0ExeWVBLFNBQUFDLEVBQUE1bUMsR0FJQSxJQTZCQTZtQyxFQTdCQTlzRCxHQUhBaW1CLEVBQUEsTUFBQUEsRUFBQSswQixHQUFBNFIsR0FBQUcsU0FBQS9SLEdBQUF0dUQsU0FBQXU1QixFQUFBMm1DLEdBQUFJLEtBQUFoUyxHQUFBakIsTUFHQS81QyxNQUNBeEUsRUFBQXlxQixFQUFBenFCLEtBQ0FqTCxHQUFBMDFCLEVBQUExMUIsTUFDQW9oRCxHQUFBMXJCLEVBQUEwckIsU0FDQS90QyxHQUFBcWlCLEVBQUFyaUIsS0FDQWxYLEdBQUF1NUIsRUFBQXY1QixPQUNBNnBELEdBQUF0d0IsRUFBQXN3QixPQUNBaDhDLEdBQUEwckIsRUFBQTFyQixPQUNBWSxHQUFBOHFCLEVBQUE5cUIsVUFHQTh4RCxHQUFBanRELEVBQUEzUyxVQUNBNi9ELEdBQUF2YixHQUFBdGtELFVBQ0E4L0QsR0FBQXpnRSxHQUFBVyxVQUdBKy9ELEdBQUFubkMsRUFBQSxzQkFHQW9uQyxHQUFBSCxHQUFBeDRELFNBR0FwSCxHQUFBNi9ELEdBQUE3L0QsZUFHQWdnRSxHQUFBLEVBR0FDLElBQ0FULEVBQUEsU0FBQVUsS0FBQUosT0FBQXo3RCxNQUFBeTdELEdBQUF6N0QsS0FBQTg3RCxVQUFBLEtBQ0EsaUJBQUFYLEVBQUEsR0FRQVksR0FBQVAsR0FBQXo0RCxTQUdBaTVELEdBQUFOLEdBQUFsaEUsS0FBQU8sSUFHQWtoRSxHQUFBNVMsR0FBQTRSLEVBR0FpQixHQUFBdFgsR0FBQSxJQUNBOFcsR0FBQWxoRSxLQUFBbUIsSUFBQWdoQixRQUFBeW9DLEdBQUEsUUFDQXpvQyxRQUFBLHVFQUlBdy9DLEdBQUEzUyxHQUFBbDFCLEVBQUE2bkMsT0FBQTk2RCxFQUNBa2EsR0FBQStZLEVBQUEvWSxPQUNBNmdELEdBQUE5bkMsRUFBQThuQyxXQUNBQyxHQUFBRixNQUFBRSxZQUFBaDdELEVBQ0FpN0QsR0FBQXRDLEdBQUFqL0QsR0FBQTBKLGVBQUExSixJQUNBd2hFLEdBQUF4aEUsR0FBQTAzQyxPQUNBaHFDLEdBQUEreUQsR0FBQS95RCxxQkFDQWhKLEdBQUE2N0QsR0FBQTc3RCxPQUNBKzhELEdBQUFqaEQsTUFBQWtoRCxtQkFBQXA3RCxFQUNBcTdELEdBQUFuaEQsTUFBQVksU0FBQTlhLEVBQ0FzN0QsR0FBQXBoRCxNQUFBcWhELFlBQUF2N0QsRUFFQXJHLEdBQUEsV0FDQSxJQUNBLElBQUE4aUQsRUFBQStlLEdBQUE5aEUsR0FBQSxrQkFFQSxPQURBK2lELEtBQWUsT0FDZkEsRUFDTyxNQUFBOWdELEtBTFAsR0FTQTgvRCxHQUFBeG9DLEVBQUFvUSxlQUFBMmtCLEdBQUEza0IsY0FBQXBRLEVBQUFvUSxhQUNBcTRCLEdBQUFsekQsS0FBQUMsTUFBQXUvQyxHQUFBeC9DLEtBQUFDLEtBQUFELEVBQUFDLElBQ0FrekQsR0FBQTFvQyxFQUFBa1EsYUFBQTZrQixHQUFBN2tCLFlBQUFsUSxFQUFBa1EsV0FHQXk0QixHQUFBaHJELEdBQUFpckQsS0FDQUMsR0FBQWxyRCxHQUFBbXJELE1BQ0FDLEdBQUF0aUUsR0FBQXdOLHNCQUNBKzBELEdBQUFuQixNQUFBb0IsU0FBQWw4RCxFQUNBbThELEdBQUFscEMsRUFBQW1wQyxTQUNBQyxHQUFBcEMsR0FBQTM0RCxLQUNBZzdELEdBQUEzRCxHQUFBai9ELEdBQUFpRixLQUFBakYsSUFDQTZpRSxHQUFBM3JELEdBQUE0ckQsSUFDQUMsR0FBQTdyRCxHQUFBdTdCLElBQ0F1d0IsR0FBQWwwRCxFQUFBQyxJQUNBazBELEdBQUExcEMsRUFBQXlpQixTQUNBa25CLEdBQUFoc0QsR0FBQUMsT0FDQWdzRCxHQUFBNUMsR0FBQTZDLFFBR0FDLEdBQUF2QixHQUFBdm9DLEVBQUEsWUFDQWQsR0FBQXFwQyxHQUFBdm9DLEVBQUEsT0FDQStwQyxHQUFBeEIsR0FBQXZvQyxFQUFBLFdBQ0FqQyxHQUFBd3FDLEdBQUF2b0MsRUFBQSxPQUNBZ3FDLEdBQUF6QixHQUFBdm9DLEVBQUEsV0FDQWlxQyxHQUFBMUIsR0FBQTloRSxHQUFBLFVBR0F5akUsR0FBQUYsSUFBQSxJQUFBQSxHQUdBRyxNQUdBQyxHQUFBQyxHQUFBUCxJQUNBUSxHQUFBRCxHQUFBbnJDLElBQ0FxckMsR0FBQUYsR0FBQU4sSUFDQVMsR0FBQUgsR0FBQXRzQyxJQUNBMHNDLEdBQUFKLEdBQUFMLElBR0FVLEdBQUF6akQsTUFBQTdmLFVBQUEyRixFQUNBNDlELEdBQUFELE1BQUFFLFFBQUE3OUQsRUFDQTg5RCxHQUFBSCxNQUFBajhELFNBQUExQixFQXlIQSxTQUFBKzlELEdBQUEvakUsR0FDQSxHQUFBZ2tFLEdBQUFoa0UsS0FBQW9WLEdBQUFwVixtQkFBQWlrRSxJQUFBLENBQ0EsR0FBQWprRSxhQUFBa2tFLEdBQ0EsT0FBQWxrRSxFQUVBLEdBQUFNLEdBQUFuQixLQUFBYSxFQUFBLGVBQ0EsT0FBQW1rRSxHQUFBbmtFLEdBR0EsV0FBQWtrRSxHQUFBbGtFLEdBV0EsSUFBQW9rRSxHQUFBLFdBQ0EsU0FBQWprRSxLQUNBLGdCQUFBa2tFLEdBQ0EsSUFBQUMsR0FBQUQsR0FDQSxTQUVBLEdBQUFuRCxHQUNBLE9BQUFBLEdBQUFtRCxHQUVBbGtFLEVBQUFFLFVBQUFna0UsRUFDQSxJQUFBbi9ELEVBQUEsSUFBQS9FLEVBRUEsT0FEQUEsRUFBQUUsVUFBQTJGLEVBQ0FkLEdBWkEsR0FxQkEsU0FBQXEvRCxNQVdBLFNBQUFMLEdBQUFsa0UsRUFBQXdrRSxHQUNBdGpFLEtBQUF1akUsWUFBQXprRSxFQUNBa0IsS0FBQXdqRSxlQUNBeGpFLEtBQUF5akUsWUFBQUgsRUFDQXRqRSxLQUFBMGpFLFVBQUEsRUFDQTFqRSxLQUFBMmpFLFdBQUE3K0QsRUFnRkEsU0FBQWkrRCxHQUFBamtFLEdBQ0FrQixLQUFBdWpFLFlBQUF6a0UsRUFDQWtCLEtBQUF3akUsZUFDQXhqRSxLQUFBNGpFLFFBQUEsRUFDQTVqRSxLQUFBNmpFLGNBQUEsRUFDQTdqRSxLQUFBOGpFLGlCQUNBOWpFLEtBQUErakUsY0FBQXBlLEVBQ0EzbEQsS0FBQWdrRSxhQWdIQSxTQUFBQyxHQUFBLzVELEdBQ0EsSUFBQWxFLEdBQUEsRUFDQS9FLEVBQUEsTUFBQWlKLEVBQUEsRUFBQUEsRUFBQWpKLE9BR0EsSUFEQWpCLEtBQUFra0UsVUFDQWwrRCxFQUFBL0UsR0FBQSxDQUNBLElBQUFrakUsRUFBQWo2RCxFQUFBbEUsR0FDQWhHLEtBQUFxZSxJQUFBOGxELEVBQUEsR0FBQUEsRUFBQSxLQWlHQSxTQUFBQyxHQUFBbDZELEdBQ0EsSUFBQWxFLEdBQUEsRUFDQS9FLEVBQUEsTUFBQWlKLEVBQUEsRUFBQUEsRUFBQWpKLE9BR0EsSUFEQWpCLEtBQUFra0UsVUFDQWwrRCxFQUFBL0UsR0FBQSxDQUNBLElBQUFrakUsRUFBQWo2RCxFQUFBbEUsR0FDQWhHLEtBQUFxZSxJQUFBOGxELEVBQUEsR0FBQUEsRUFBQSxLQThHQSxTQUFBRSxHQUFBbjZELEdBQ0EsSUFBQWxFLEdBQUEsRUFDQS9FLEVBQUEsTUFBQWlKLEVBQUEsRUFBQUEsRUFBQWpKLE9BR0EsSUFEQWpCLEtBQUFra0UsVUFDQWwrRCxFQUFBL0UsR0FBQSxDQUNBLElBQUFrakUsRUFBQWo2RCxFQUFBbEUsR0FDQWhHLEtBQUFxZSxJQUFBOGxELEVBQUEsR0FBQUEsRUFBQSxLQWlHQSxTQUFBRyxHQUFBblYsR0FDQSxJQUFBbnBELEdBQUEsRUFDQS9FLEVBQUEsTUFBQWt1RCxFQUFBLEVBQUFBLEVBQUFsdUQsT0FHQSxJQURBakIsS0FBQXVrRSxTQUFBLElBQUFGLEtBQ0FyK0QsRUFBQS9FLEdBQ0FqQixLQUFBbWtDLElBQUFnckIsRUFBQW5wRCxJQTZDQSxTQUFBdytELEdBQUF0NkQsR0FDQSxJQUFBMFAsRUFBQTVaLEtBQUF1a0UsU0FBQSxJQUFBSCxHQUFBbDZELEdBQ0FsSyxLQUFBdzlELEtBQUE1akQsRUFBQTRqRCxLQXFHQSxTQUFBaUgsR0FBQTNsRSxFQUFBNGxFLEdBQ0EsSUFBQUMsRUFBQXp3RCxHQUFBcFYsR0FDQThsRSxHQUFBRCxHQUFBRSxHQUFBL2xFLEdBQ0FnbUUsR0FBQUgsSUFBQUMsR0FBQTVELEdBQUFsaUUsR0FDQWltRSxHQUFBSixJQUFBQyxJQUFBRSxHQUFBN1csR0FBQW52RCxHQUNBa21FLEVBQUFMLEdBQUFDLEdBQUFFLEdBQUFDLEVBQ0EvZ0UsRUFBQWdoRSxFQUFBelUsR0FBQXp4RCxFQUFBbUMsT0FBQW9MLE9BQ0FwTCxFQUFBK0MsRUFBQS9DLE9BRUEsUUFBQTBDLEtBQUE3RSxHQUNBNGxFLElBQUF0bEUsR0FBQW5CLEtBQUFhLEVBQUE2RSxJQUNBcWhFLElBRUEsVUFBQXJoRSxHQUVBbWhFLElBQUEsVUFBQW5oRSxHQUFBLFVBQUFBLElBRUFvaEUsSUFBQSxVQUFBcGhFLEdBQUEsY0FBQUEsR0FBQSxjQUFBQSxJQUVBc2hFLEdBQUF0aEUsRUFBQTFDLEtBRUErQyxFQUFBeEMsS0FBQW1DLEdBR0EsT0FBQUssRUFVQSxTQUFBa2hFLEdBQUE5VyxHQUNBLElBQUFudEQsRUFBQW10RCxFQUFBbnRELE9BQ0EsT0FBQUEsRUFBQW10RCxFQUFBK1csR0FBQSxFQUFBbGtFLEVBQUEsSUFBQTZELEVBV0EsU0FBQXNnRSxHQUFBaFgsRUFBQXJ2RCxHQUNBLE9BQUFzbUUsR0FBQUMsR0FBQWxYLEdBQUFtWCxHQUFBeG1FLEVBQUEsRUFBQXF2RCxFQUFBbnRELFNBVUEsU0FBQXVrRSxHQUFBcFgsR0FDQSxPQUFBaVgsR0FBQUMsR0FBQWxYLElBWUEsU0FBQXFYLEdBQUF4bUUsRUFBQTBFLEVBQUE3RSxJQUNBQSxJQUFBZ0csR0FBQTRnRSxHQUFBem1FLEVBQUEwRSxHQUFBN0UsTUFDQUEsSUFBQWdHLEdBQUFuQixLQUFBMUUsSUFDQTBtRSxHQUFBMW1FLEVBQUEwRSxFQUFBN0UsR0FjQSxTQUFBOG1FLEdBQUEzbUUsRUFBQTBFLEVBQUE3RSxHQUNBLElBQUErbUUsRUFBQTVtRSxFQUFBMEUsR0FDQXZFLEdBQUFuQixLQUFBZ0IsRUFBQTBFLElBQUEraEUsR0FBQUcsRUFBQS9tRSxLQUNBQSxJQUFBZ0csR0FBQW5CLEtBQUExRSxJQUNBMG1FLEdBQUExbUUsRUFBQTBFLEVBQUE3RSxHQVlBLFNBQUFnbkUsR0FBQTFYLEVBQUF6cUQsR0FFQSxJQURBLElBQUExQyxFQUFBbXRELEVBQUFudEQsT0FDQUEsS0FDQSxHQUFBeWtFLEdBQUF0WCxFQUFBbnRELEdBQUEsR0FBQTBDLEdBQ0EsT0FBQTFDLEVBR0EsU0FjQSxTQUFBOGtFLEdBQUFwVyxFQUFBdEIsRUFBQUMsRUFBQUMsR0FJQSxPQUhBeVgsR0FBQXJXLEVBQUEsU0FBQTd3RCxFQUFBNkUsRUFBQWdzRCxHQUNBdEIsRUFBQUUsRUFBQXp2RCxFQUFBd3ZELEVBQUF4dkQsR0FBQTZ3RCxLQUVBcEIsRUFZQSxTQUFBMFgsR0FBQWhuRSxFQUFBOEgsR0FDQSxPQUFBOUgsR0FBQWluRSxHQUFBbi9ELEVBQUF0RCxHQUFBc0QsR0FBQTlILEdBeUJBLFNBQUEwbUUsR0FBQTFtRSxFQUFBMEUsRUFBQTdFLEdBQ0EsYUFBQTZFLEdBQUFsRixHQUNBQSxHQUFBUSxFQUFBMEUsR0FDQWpGLGNBQUEsRUFDQUMsWUFBQSxFQUNBRyxRQUNBcTNDLFVBQUEsSUFHQWwzQyxFQUFBMEUsR0FBQTdFLEVBWUEsU0FBQXFuRSxHQUFBbG5FLEVBQUF1a0QsR0FNQSxJQUxBLElBQUF4OUMsR0FBQSxFQUNBL0UsRUFBQXVpRCxFQUFBdmlELE9BQ0ErQyxFQUFBOE4sRUFBQTdRLEdBQ0FtbEUsRUFBQSxNQUFBbm5FLElBRUErRyxFQUFBL0UsR0FDQStDLEVBQUFnQyxHQUFBb2dFLEVBQUF0aEUsRUFBQWxHLEdBQUFLLEVBQUF1a0QsRUFBQXg5QyxJQUVBLE9BQUFoQyxFQVlBLFNBQUF1aEUsR0FBQW5vRCxFQUFBaXBELEVBQUFDLEdBU0EsT0FSQWxwRCxPQUNBa3BELElBQUF4aEUsSUFDQXNZLEtBQUFrcEQsRUFBQWxwRCxFQUFBa3BELEdBRUFELElBQUF2aEUsSUFDQXNZLEtBQUFpcEQsRUFBQWpwRCxFQUFBaXBELElBR0FqcEQsRUFtQkEsU0FBQW1wRCxHQUFBem5FLEVBQUEwbkUsRUFBQUMsRUFBQTlpRSxFQUFBMUUsRUFBQTQ4QixHQUNBLElBQUE3M0IsRUFDQTBpRSxFQUFBRixFQUFBdGlCLEVBQ0F5aUIsRUFBQUgsRUFBQXJpQixFQUNBeWlCLEVBQUFKLEVBQUFwaUIsRUFLQSxHQUhBcWlCLElBQ0F6aUUsRUFBQS9FLEVBQUF3bkUsRUFBQTNuRSxFQUFBNkUsRUFBQTFFLEVBQUE0OEIsR0FBQTRxQyxFQUFBM25FLElBRUFrRixJQUFBYyxFQUNBLE9BQUFkLEVBRUEsSUFBQW8vRCxHQUFBdGtFLEdBQ0EsT0FBQUEsRUFFQSxJQUFBNmxFLEVBQUF6d0QsR0FBQXBWLEdBQ0EsR0FBQTZsRSxHQUVBLEdBREEzZ0UsRUE2N0dBLFNBQUFvcUQsR0FDQSxJQUFBbnRELEVBQUFtdEQsRUFBQW50RCxPQUNBK0MsRUFBQSxJQUFBb3FELEVBQUExNUMsWUFBQXpULEdBT0EsT0FKQUEsR0FBQSxpQkFBQW10RCxFQUFBLElBQUFodkQsR0FBQW5CLEtBQUFtd0QsRUFBQSxXQUNBcHFELEVBQUFnQyxNQUFBb29ELEVBQUFwb0QsTUFDQWhDLEVBQUFxcEMsTUFBQStnQixFQUFBL2dCLE9BRUFycEMsRUF0OEdBNmlFLENBQUEvbkUsSUFDQTRuRSxFQUNBLE9BQUFwQixHQUFBeG1FLEVBQUFrRixPQUVPLENBQ1AsSUFBQStSLEVBQUErd0QsR0FBQWhvRSxHQUNBaW9FLEVBQUFoeEQsR0FBQXV3QyxHQUFBdndDLEdBQUF3d0MsRUFFQSxHQUFBeWEsR0FBQWxpRSxHQUNBLE9BQUFrb0UsR0FBQWxvRSxFQUFBNG5FLEdBRUEsR0FBQTN3RCxHQUFBNHdDLEdBQUE1d0MsR0FBQWd3QyxHQUFBZ2hCLElBQUE5bkUsR0FFQSxHQURBK0UsRUFBQTJpRSxHQUFBSSxLQUEwQ0UsR0FBQW5vRSxJQUMxQzRuRSxFQUNBLE9BQUFDLEVBaW5FQSxTQUFBNS9ELEVBQUE5SCxHQUNBLE9BQUFpbkUsR0FBQW4vRCxFQUFBbWdFLEdBQUFuZ0UsR0FBQTlILEdBam5FQWtvRSxDQUFBcm9FLEVBbkhBLFNBQUFHLEVBQUE4SCxHQUNBLE9BQUE5SCxHQUFBaW5FLEdBQUFuL0QsRUFBQXFnRSxHQUFBcmdFLEdBQUE5SCxHQWtIQW9vRSxDQUFBcmpFLEVBQUFsRixJQW9tRUEsU0FBQWlJLEVBQUE5SCxHQUNBLE9BQUFpbkUsR0FBQW4vRCxFQUFBdWdFLEdBQUF2Z0UsR0FBQTlILEdBcG1FQXNvRSxDQUFBem9FLEVBQUFtbkUsR0FBQWppRSxFQUFBbEYsUUFFUyxDQUNULElBQUFrdEQsR0FBQWoyQyxHQUNBLE9BQUE5VyxFQUFBSCxLQUVBa0YsRUE0OEdBLFNBQUEvRSxFQUFBOFcsRUFBQTJ3RCxHQUNBLElBdmxEQWMsRUFiQUMsRUFDQXpqRSxFQW1tREEwakUsRUFBQXpvRSxFQUFBeVYsWUFDQSxPQUFBcUIsR0FDQSxLQUFBcXhDLEdBQ0EsT0FBQXVnQixHQUFBMW9FLEdBRUEsS0FBQWluRCxFQUNBLEtBQUFDLEVBQ0EsV0FBQXVoQixHQUFBem9FLEdBRUEsS0FBQW9vRCxHQUNBLE9BMW5EQSxTQUFBdWdCLEVBQUFsQixHQUNBLElBQUFtQixFQUFBbkIsRUFBQWlCLEdBQUFDLEVBQUFDLFFBQUFELEVBQUFDLE9BQ0EsV0FBQUQsRUFBQWx6RCxZQUFBbXpELEVBQUFELEVBQUFFLFdBQUFGLEVBQUFHLFlBd25EQUMsQ0FBQS9vRSxFQUFBeW5FLEdBRUEsS0FBQXBmLEdBQUEsS0FBQUMsR0FDQSxLQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FBQUMsR0FDQSxLQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FBQUMsR0FBQSxLQUFBQyxHQUNBLE9BQUFtZ0IsR0FBQWhwRSxFQUFBeW5FLEdBRUEsS0FBQWxnQixFQUNBLFdBQUFraEIsRUFFQSxLQUFBamhCLEVBQ0EsS0FBQU0sR0FDQSxXQUFBMmdCLEVBQUF6b0UsR0FFQSxLQUFBNG5ELEdBQ0EsT0E1bkRBN2lELEVBQUEsSUFEQXlqRSxFQTZuREF4b0UsR0E1bkRBeVYsWUFBQSt5RCxFQUFBMWdFLE9BQUF5aUQsR0FBQThWLEtBQUFtSSxLQUNBMUosVUFBQTBKLEVBQUExSixVQUNBLzVELEVBNG5EQSxLQUFBOGlELEdBQ0EsV0FBQTRnQixFQUVBLEtBQUExZ0IsR0FDQSxPQXRuREF3Z0IsRUFzbkRBdm9FLEVBcm5EQXlqRSxHQUFBbGtFLEdBQUFra0UsR0FBQXprRSxLQUFBdXBFLFFBdjNEQVUsQ0FBQXBwRSxFQUFBaVgsRUFBQTJ3RCxJQUlBN3FDLE1BQUEsSUFBQTJvQyxJQUNBLElBQUEyRCxFQUFBdHNDLEVBQUFqOUIsSUFBQUUsR0FDQSxHQUFBcXBFLEVBQ0EsT0FBQUEsRUFJQSxHQUZBdHNDLEVBQUF4ZCxJQUFBdmYsRUFBQWtGLEdBRUErcEQsR0FBQWp2RCxHQUtBLE9BSkFBLEVBQUE0RSxRQUFBLFNBQUEwa0UsR0FDQXBrRSxFQUFBbWdDLElBQUFvaUMsR0FBQTZCLEVBQUE1QixFQUFBQyxFQUFBMkIsRUFBQXRwRSxFQUFBKzhCLE1BR0E3M0IsRUFHQSxHQUFBMnBELEdBQUE3dUQsR0FLQSxPQUpBQSxFQUFBNEUsUUFBQSxTQUFBMGtFLEVBQUF6a0UsR0FDQUssRUFBQXFhLElBQUExYSxFQUFBNGlFLEdBQUE2QixFQUFBNUIsRUFBQUMsRUFBQTlpRSxFQUFBN0UsRUFBQSs4QixNQUdBNzNCLEVBR0EsSUFJQTZELEVBQUE4OEQsRUFBQTcvRCxHQUpBOGhFLEVBQ0FELEVBQUEwQixHQUFBQyxHQUNBM0IsRUFBQVMsR0FBQTNqRSxJQUVBM0UsR0FTQSxPQVJBMHZELEdBQUEzbUQsR0FBQS9JLEVBQUEsU0FBQXNwRSxFQUFBemtFLEdBQ0FrRSxJQUVBdWdFLEVBQUF0cEUsRUFEQTZFLEVBQUF5a0UsSUFJQXhDLEdBQUE1aEUsRUFBQUwsRUFBQTRpRSxHQUFBNkIsRUFBQTVCLEVBQUFDLEVBQUE5aUUsRUFBQTdFLEVBQUErOEIsTUFFQTczQixFQXlCQSxTQUFBdWtFLEdBQUF0cEUsRUFBQThILEVBQUFjLEdBQ0EsSUFBQTVHLEVBQUE0RyxFQUFBNUcsT0FDQSxTQUFBaEMsRUFDQSxPQUFBZ0MsRUFHQSxJQURBaEMsRUFBQVQsR0FBQVMsR0FDQWdDLEtBQUEsQ0FDQSxJQUFBMEMsRUFBQWtFLEVBQUE1RyxHQUNBazBDLEVBQUFwdUMsRUFBQXBELEdBQ0E3RSxFQUFBRyxFQUFBMEUsR0FFQSxHQUFBN0UsSUFBQWdHLEtBQUFuQixLQUFBMUUsS0FBQWsyQyxFQUFBcjJDLEdBQ0EsU0FHQSxTQWFBLFNBQUEwcEUsR0FBQWpuQixFQUFBa25CLEVBQUF6dEIsR0FDQSxzQkFBQXVHLEVBQ0EsVUFBQXQwQyxHQUFBNjJDLEdBRUEsT0FBQTdiLEdBQUEsV0FBb0NzWixFQUFBeGhELE1BQUErRSxFQUFBazJDLElBQStCeXRCLEdBY25FLFNBQUFDLEdBQUF0YSxFQUFBZSxFQUFBYixFQUFBVSxHQUNBLElBQUFocEQsR0FBQSxFQUNBMmlFLEVBQUE5WixHQUNBK1osR0FBQSxFQUNBM25FLEVBQUFtdEQsRUFBQW50RCxPQUNBK0MsS0FDQTZrRSxFQUFBMVosRUFBQWx1RCxPQUVBLElBQUFBLEVBQ0EsT0FBQStDLEVBRUFzcUQsSUFDQWEsRUFBQUYsR0FBQUUsRUFBQXFCLEdBQUFsQyxLQUVBVSxHQUNBMlosRUFBQTVaLEdBQ0E2WixHQUFBLEdBRUF6WixFQUFBbHVELFFBQUEyaUQsSUFDQStrQixFQUFBalksR0FDQWtZLEdBQUEsRUFDQXpaLEVBQUEsSUFBQW1WLEdBQUFuVixJQUVBMlosRUFDQSxPQUFBOWlFLEVBQUEvRSxHQUFBLENBQ0EsSUFBQW5DLEVBQUFzdkQsRUFBQXBvRCxHQUNBaTRDLEVBQUEsTUFBQXFRLEVBQUF4dkQsRUFBQXd2RCxFQUFBeHZELEdBR0EsR0FEQUEsRUFBQWt3RCxHQUFBLElBQUFsd0QsSUFBQSxFQUNBOHBFLEdBQUEzcUIsS0FBQSxDQUVBLElBREEsSUFBQThxQixFQUFBRixFQUNBRSxLQUNBLEdBQUE1WixFQUFBNFosS0FBQTlxQixFQUNBLFNBQUE2cUIsRUFHQTlrRSxFQUFBeEMsS0FBQTFDLFFBRUE2cEUsRUFBQXhaLEVBQUFsUixFQUFBK1EsSUFDQWhyRCxFQUFBeEMsS0FBQTFDLEdBR0EsT0FBQWtGLEVBdmtDQTYrRCxHQUFBbUcsa0JBUUFybkIsT0FBQTRHLEdBUUEwZ0IsU0FBQXpnQixHQVFBMGdCLFlBQUF6Z0IsR0FRQTBnQixTQUFBLEdBUUFDLFNBUUExSyxFQUFBbUUsS0FLQUEsR0FBQTFqRSxVQUFBa2tFLEdBQUFsa0UsVUFDQTBqRSxHQUFBMWpFLFVBQUF1VixZQUFBbXVELEdBRUFHLEdBQUE3akUsVUFBQStqRSxHQUFBRyxHQUFBbGtFLFdBQ0E2akUsR0FBQTdqRSxVQUFBdVYsWUFBQXN1RCxHQXNIQUQsR0FBQTVqRSxVQUFBK2pFLEdBQUFHLEdBQUFsa0UsV0FDQTRqRSxHQUFBNWpFLFVBQUF1VixZQUFBcXVELEdBb0dBa0IsR0FBQTlrRSxVQUFBK2tFLE1BdkVBLFdBQ0Fsa0UsS0FBQXVrRSxTQUFBdkMsTUFBQSxTQUNBaGlFLEtBQUF3OUQsS0FBQSxHQXNFQXlHLEdBQUE5a0UsVUFBQSxPQXpEQSxTQUFBd0UsR0FDQSxJQUFBSyxFQUFBaEUsS0FBQXM4QixJQUFBMzRCLFdBQUEzRCxLQUFBdWtFLFNBQUE1Z0UsR0FFQSxPQURBM0QsS0FBQXc5RCxNQUFBeDVELEVBQUEsSUFDQUEsR0F1REFpZ0UsR0FBQTlrRSxVQUFBUCxJQTNDQSxTQUFBK0UsR0FDQSxJQUFBaVcsRUFBQTVaLEtBQUF1a0UsU0FDQSxHQUFBdkMsR0FBQSxDQUNBLElBQUFoK0QsRUFBQTRWLEVBQUFqVyxHQUNBLE9BQUFLLElBQUErL0MsRUFBQWovQyxFQUFBZCxFQUVBLE9BQUE1RSxHQUFBbkIsS0FBQTJiLEVBQUFqVyxHQUFBaVcsRUFBQWpXLEdBQUFtQixHQXNDQW0vRCxHQUFBOWtFLFVBQUFtOUIsSUExQkEsU0FBQTM0QixHQUNBLElBQUFpVyxFQUFBNVosS0FBQXVrRSxTQUNBLE9BQUF2QyxHQUFBcG9ELEVBQUFqVyxLQUFBbUIsRUFBQTFGLEdBQUFuQixLQUFBMmIsRUFBQWpXLElBeUJBc2dFLEdBQUE5a0UsVUFBQWtmLElBWkEsU0FBQTFhLEVBQUE3RSxHQUNBLElBQUE4YSxFQUFBNVosS0FBQXVrRSxTQUdBLE9BRkF2a0UsS0FBQXc5RCxNQUFBeDlELEtBQUFzOEIsSUFBQTM0QixHQUFBLElBQ0FpVyxFQUFBalcsR0FBQXErRCxJQUFBbGpFLElBQUFnRyxFQUFBaS9DLEVBQUFqbEQsRUFDQWtCLE1BeUhBb2tFLEdBQUFqbEUsVUFBQStrRSxNQXBGQSxXQUNBbGtFLEtBQUF1a0UsWUFDQXZrRSxLQUFBdzlELEtBQUEsR0FtRkE0RyxHQUFBamxFLFVBQUEsT0F2RUEsU0FBQXdFLEdBQ0EsSUFBQWlXLEVBQUE1WixLQUFBdWtFLFNBQ0F2K0QsRUFBQTgvRCxHQUFBbHNELEVBQUFqVyxHQUVBLFFBQUFxQyxFQUFBLElBSUFBLEdBREE0VCxFQUFBM1ksT0FBQSxFQUVBMlksRUFBQVYsTUFFQWhXLEdBQUFqRixLQUFBMmIsRUFBQTVULEVBQUEsS0FFQWhHLEtBQUF3OUQsS0FDQSxLQTBEQTRHLEdBQUFqbEUsVUFBQVAsSUE5Q0EsU0FBQStFLEdBQ0EsSUFBQWlXLEVBQUE1WixLQUFBdWtFLFNBQ0F2K0QsRUFBQTgvRCxHQUFBbHNELEVBQUFqVyxHQUVBLE9BQUFxQyxFQUFBLEVBQUFsQixFQUFBOFUsRUFBQTVULEdBQUEsSUEyQ0FvK0QsR0FBQWpsRSxVQUFBbTlCLElBL0JBLFNBQUEzNEIsR0FDQSxPQUFBbWlFLEdBQUE5bEUsS0FBQXVrRSxTQUFBNWdFLElBQUEsR0ErQkF5Z0UsR0FBQWpsRSxVQUFBa2YsSUFsQkEsU0FBQTFhLEVBQUE3RSxHQUNBLElBQUE4YSxFQUFBNVosS0FBQXVrRSxTQUNBditELEVBQUE4L0QsR0FBQWxzRCxFQUFBalcsR0FRQSxPQU5BcUMsRUFBQSxLQUNBaEcsS0FBQXc5RCxLQUNBNWpELEVBQUFwWSxNQUFBbUMsRUFBQTdFLEtBRUE4YSxFQUFBNVQsR0FBQSxHQUFBbEgsRUFFQWtCLE1BMkdBcWtFLEdBQUFsbEUsVUFBQStrRSxNQXRFQSxXQUNBbGtFLEtBQUF3OUQsS0FBQSxFQUNBeDlELEtBQUF1a0UsVUFDQThFLEtBQUEsSUFBQXBGLEdBQ0F4OUQsSUFBQSxJQUFBd3dCLElBQUFtdEMsSUFDQTlHLE9BQUEsSUFBQTJHLEtBa0VBSSxHQUFBbGxFLFVBQUEsT0FyREEsU0FBQXdFLEdBQ0EsSUFBQUssRUFBQXNsRSxHQUFBdHBFLEtBQUEyRCxHQUFBLE9BQUFBLEdBRUEsT0FEQTNELEtBQUF3OUQsTUFBQXg1RCxFQUFBLElBQ0FBLEdBbURBcWdFLEdBQUFsbEUsVUFBQVAsSUF2Q0EsU0FBQStFLEdBQ0EsT0FBQTJsRSxHQUFBdHBFLEtBQUEyRCxHQUFBL0UsSUFBQStFLElBdUNBMGdFLEdBQUFsbEUsVUFBQW05QixJQTNCQSxTQUFBMzRCLEdBQ0EsT0FBQTJsRSxHQUFBdHBFLEtBQUEyRCxHQUFBMjRCLElBQUEzNEIsSUEyQkEwZ0UsR0FBQWxsRSxVQUFBa2YsSUFkQSxTQUFBMWEsRUFBQTdFLEdBQ0EsSUFBQThhLEVBQUEwdkQsR0FBQXRwRSxLQUFBMkQsR0FDQTY1RCxFQUFBNWpELEVBQUE0akQsS0FJQSxPQUZBNWpELEVBQUF5RSxJQUFBMWEsRUFBQTdFLEdBQ0FrQixLQUFBdzlELE1BQUE1akQsRUFBQTRqRCxRQUFBLElBQ0F4OUQsTUEyREFza0UsR0FBQW5sRSxVQUFBZ2xDLElBQUFtZ0MsR0FBQW5sRSxVQUFBcUMsS0FuQkEsU0FBQTFDLEdBRUEsT0FEQWtCLEtBQUF1a0UsU0FBQWxtRCxJQUFBdmYsRUFBQWlsRCxHQUNBL2pELE1Ba0JBc2tFLEdBQUFubEUsVUFBQW05QixJQU5BLFNBQUF4OUIsR0FDQSxPQUFBa0IsS0FBQXVrRSxTQUFBam9DLElBQUF4OUIsSUF1R0EwbEUsR0FBQXJsRSxVQUFBK2tFLE1BM0VBLFdBQ0Fsa0UsS0FBQXVrRSxTQUFBLElBQUFILEdBQ0Fwa0UsS0FBQXc5RCxLQUFBLEdBMEVBZ0gsR0FBQXJsRSxVQUFBLE9BOURBLFNBQUF3RSxHQUNBLElBQUFpVyxFQUFBNVosS0FBQXVrRSxTQUNBdmdFLEVBQUE0VixFQUFBLE9BQUFqVyxHQUdBLE9BREEzRCxLQUFBdzlELEtBQUE1akQsRUFBQTRqRCxLQUNBeDVELEdBMERBd2dFLEdBQUFybEUsVUFBQVAsSUE5Q0EsU0FBQStFLEdBQ0EsT0FBQTNELEtBQUF1a0UsU0FBQTNsRSxJQUFBK0UsSUE4Q0E2Z0UsR0FBQXJsRSxVQUFBbTlCLElBbENBLFNBQUEzNEIsR0FDQSxPQUFBM0QsS0FBQXVrRSxTQUFBam9DLElBQUEzNEIsSUFrQ0E2Z0UsR0FBQXJsRSxVQUFBa2YsSUFyQkEsU0FBQTFhLEVBQUE3RSxHQUNBLElBQUE4YSxFQUFBNVosS0FBQXVrRSxTQUNBLEdBQUEzcUQsYUFBQXdxRCxHQUFBLENBQ0EsSUFBQW1GLEVBQUEzdkQsRUFBQTJxRCxTQUNBLElBQUF0dEMsSUFBQXN5QyxFQUFBdG9FLE9BQUEyaUQsRUFBQSxFQUdBLE9BRkEybEIsRUFBQS9uRSxNQUFBbUMsRUFBQTdFLElBQ0FrQixLQUFBdzlELE9BQUE1akQsRUFBQTRqRCxLQUNBeDlELEtBRUE0WixFQUFBNVosS0FBQXVrRSxTQUFBLElBQUFGLEdBQUFrRixHQUlBLE9BRkEzdkQsRUFBQXlFLElBQUExYSxFQUFBN0UsR0FDQWtCLEtBQUF3OUQsS0FBQTVqRCxFQUFBNGpELEtBQ0F4OUQsTUE0Y0EsSUFBQWdtRSxHQUFBd0QsR0FBQUMsSUFVQUMsR0FBQUYsR0FBQUcsSUFBQSxHQVdBLFNBQUFDLEdBQUFqYSxFQUFBeGEsR0FDQSxJQUFBbnhDLEdBQUEsRUFLQSxPQUpBZ2lFLEdBQUFyVyxFQUFBLFNBQUE3d0QsRUFBQWtILEVBQUEycEQsR0FFQSxPQURBM3JELElBQUFteEMsRUFBQXIyQyxFQUFBa0gsRUFBQTJwRCxLQUdBM3JELEVBYUEsU0FBQTZsRSxHQUFBemIsRUFBQUUsRUFBQVUsR0FJQSxJQUhBLElBQUFocEQsR0FBQSxFQUNBL0UsRUFBQW10RCxFQUFBbnRELFNBRUErRSxFQUFBL0UsR0FBQSxDQUNBLElBQUFuQyxFQUFBc3ZELEVBQUFwb0QsR0FDQThmLEVBQUF3b0MsRUFBQXh2RCxHQUVBLFNBQUFnbkIsSUFBQW00QixJQUFBbjVDLEVBQ0FnaEIsT0FBQWdrRCxHQUFBaGtELEdBQ0FrcEMsRUFBQWxwQyxFQUFBbTRCLElBRUEsSUFBQUEsRUFBQW40QixFQUNBOWhCLEVBQUFsRixFQUdBLE9BQUFrRixFQXVDQSxTQUFBK2xFLEdBQUFwYSxFQUFBeGEsR0FDQSxJQUFBbnhDLEtBTUEsT0FMQWdpRSxHQUFBclcsRUFBQSxTQUFBN3dELEVBQUFrSCxFQUFBMnBELEdBQ0F4YSxFQUFBcjJDLEVBQUFrSCxFQUFBMnBELElBQ0EzckQsRUFBQXhDLEtBQUExQyxLQUdBa0YsRUFjQSxTQUFBZ21FLEdBQUE1YixFQUFBNmIsRUFBQTkwQixFQUFBKzBCLEVBQUFsbUUsR0FDQSxJQUFBZ0MsR0FBQSxFQUNBL0UsRUFBQW10RCxFQUFBbnRELE9BS0EsSUFIQWswQyxNQUFBZzFCLElBQ0FubUUsWUFFQWdDLEVBQUEvRSxHQUFBLENBQ0EsSUFBQW5DLEVBQUFzdkQsRUFBQXBvRCxHQUNBaWtFLEVBQUEsR0FBQTkwQixFQUFBcjJDLEdBQ0FtckUsRUFBQSxFQUVBRCxHQUFBbHJFLEVBQUFtckUsRUFBQSxFQUFBOTBCLEVBQUErMEIsRUFBQWxtRSxHQUVBa3JELEdBQUFsckQsRUFBQWxGLEdBRVNvckUsSUFDVGxtRSxJQUFBL0MsUUFBQW5DLEdBR0EsT0FBQWtGLEVBY0EsSUFBQW9tRSxHQUFBQyxLQVlBQyxHQUFBRCxJQUFBLEdBVUEsU0FBQVosR0FBQXhxRSxFQUFBcXZELEdBQ0EsT0FBQXJ2RCxHQUFBbXJFLEdBQUFuckUsRUFBQXF2RCxFQUFBN3FELElBV0EsU0FBQWttRSxHQUFBMXFFLEVBQUFxdkQsR0FDQSxPQUFBcnZELEdBQUFxckUsR0FBQXJyRSxFQUFBcXZELEVBQUE3cUQsSUFZQSxTQUFBOG1FLEdBQUF0ckUsRUFBQTRJLEdBQ0EsT0FBQThtRCxHQUFBOW1ELEVBQUEsU0FBQWxFLEdBQ0EsT0FBQTZtRSxHQUFBdnJFLEVBQUEwRSxNQVlBLFNBQUE4bUUsR0FBQXhyRSxFQUFBeXJFLEdBTUEsSUFIQSxJQUFBMWtFLEVBQUEsRUFDQS9FLEdBSEF5cEUsRUFBQUMsR0FBQUQsRUFBQXpyRSxJQUdBZ0MsT0FFQSxNQUFBaEMsR0FBQStHLEVBQUEvRSxHQUNBaEMsSUFBQTJyRSxHQUFBRixFQUFBMWtFLE9BRUEsT0FBQUEsTUFBQS9FLEVBQUFoQyxFQUFBNkYsRUFjQSxTQUFBK2xFLEdBQUE1ckUsRUFBQTZyRSxFQUFBQyxHQUNBLElBQUEvbUUsRUFBQThtRSxFQUFBN3JFLEdBQ0EsT0FBQWlWLEdBQUFqVixHQUFBK0UsRUFBQWtyRCxHQUFBbHJELEVBQUErbUUsRUFBQTlyRSxJQVVBLFNBQUErckUsR0FBQWxzRSxHQUNBLGFBQUFBLEVBQ0FBLElBQUFnRyxFQUFBbWlELEdBQUFQLEVBRUEwWixVQUFBNWhFLEdBQUFNLEdBcTJGQSxTQUFBQSxHQUNBLElBQUFtc0UsRUFBQTdyRSxHQUFBbkIsS0FBQWEsRUFBQXNoRSxJQUNBcnFELEVBQUFqWCxFQUFBc2hFLElBRUEsSUFDQXRoRSxFQUFBc2hFLElBQUF0N0QsRUFDQSxJQUFBb21FLEdBQUEsRUFDTyxNQUFBenFFLElBRVAsSUFBQXVELEVBQUF3N0QsR0FBQXZoRSxLQUFBYSxHQVFBLE9BUEFvc0UsSUFDQUQsRUFDQW5zRSxFQUFBc2hFLElBQUFycUQsU0FFQWpYLEVBQUFzaEUsS0FHQXA4RCxFQXIzRkFtbkUsQ0FBQXJzRSxHQXk0R0EsU0FBQUEsR0FDQSxPQUFBMGdFLEdBQUF2aEUsS0FBQWEsR0F6NEdBc3NFLENBQUF0c0UsR0FZQSxTQUFBdXNFLEdBQUF2c0UsRUFBQXdzRSxHQUNBLE9BQUF4c0UsRUFBQXdzRSxFQVdBLFNBQUFDLEdBQUF0c0UsRUFBQTBFLEdBQ0EsYUFBQTFFLEdBQUFHLEdBQUFuQixLQUFBZ0IsRUFBQTBFLEdBV0EsU0FBQTZuRSxHQUFBdnNFLEVBQUEwRSxHQUNBLGFBQUExRSxHQUFBMEUsS0FBQW5GLEdBQUFTLEdBMEJBLFNBQUF3c0UsR0FBQUMsRUFBQXBkLEVBQUFVLEdBU0EsSUFSQSxJQUFBMlosRUFBQTNaLEVBQUFELEdBQUFGLEdBQ0E1dEQsRUFBQXlxRSxFQUFBLEdBQUF6cUUsT0FDQTBxRSxFQUFBRCxFQUFBenFFLE9BQ0EycUUsRUFBQUQsRUFDQUUsRUFBQS81RCxFQUFBNjVELEdBQ0FHLEVBQUE1akMsSUFDQWxrQyxLQUVBNG5FLEtBQUEsQ0FDQSxJQUFBeGQsRUFBQXNkLEVBQUFFLEdBQ0FBLEdBQUF0ZCxJQUNBRixFQUFBYSxHQUFBYixFQUFBb0MsR0FBQWxDLEtBRUF3ZCxFQUFBdkssR0FBQW5ULEVBQUFudEQsT0FBQTZxRSxHQUNBRCxFQUFBRCxJQUFBNWMsSUFBQVYsR0FBQXJ0RCxHQUFBLEtBQUFtdEQsRUFBQW50RCxRQUFBLEtBQ0EsSUFBQXFqRSxHQUFBc0gsR0FBQXhkLEdBQ0F0cEQsRUFFQXNwRCxFQUFBc2QsRUFBQSxHQUVBLElBQUExbEUsR0FBQSxFQUNBK2xFLEVBQUFGLEVBQUEsR0FFQS9DLEVBQ0EsT0FBQTlpRSxFQUFBL0UsR0FBQStDLEVBQUEvQyxPQUFBNnFFLEdBQUEsQ0FDQSxJQUFBaHRFLEVBQUFzdkQsRUFBQXBvRCxHQUNBaTRDLEVBQUFxUSxJQUFBeHZELEtBR0EsR0FEQUEsRUFBQWt3RCxHQUFBLElBQUFsd0QsSUFBQSxJQUNBaXRFLEVBQ0FyYixHQUFBcWIsRUFBQTl0QixHQUNBMHFCLEVBQUEza0UsRUFBQWk2QyxFQUFBK1EsSUFDQSxDQUVBLElBREE0YyxFQUFBRCxJQUNBQyxHQUFBLENBQ0EsSUFBQXIyQixFQUFBczJCLEVBQUFELEdBQ0EsS0FBQXIyQixFQUNBbWIsR0FBQW5iLEVBQUEwSSxHQUNBMHFCLEVBQUErQyxFQUFBRSxHQUFBM3RCLEVBQUErUSxJQUVBLFNBQUE4WixFQUdBaUQsR0FDQUEsRUFBQXZxRSxLQUFBeThDLEdBRUFqNkMsRUFBQXhDLEtBQUExQyxJQUdBLE9BQUFrRixFQStCQSxTQUFBZ29FLEdBQUEvc0UsRUFBQXlyRSxFQUFBMXZCLEdBR0EsSUFBQXVHLEVBQUEsT0FEQXRpRCxFQUFBZ3RFLEdBQUFodEUsRUFEQXlyRSxFQUFBQyxHQUFBRCxFQUFBenJFLEtBRUFBLElBQUEyckUsR0FBQXIxQyxHQUFBbTFDLEtBQ0EsYUFBQW5wQixFQUFBejhDLEVBQUEvRSxHQUFBd2hELEVBQUF0aUQsRUFBQSs3QyxHQVVBLFNBQUFreEIsR0FBQXB0RSxHQUNBLE9BQUFna0UsR0FBQWhrRSxJQUFBa3NFLEdBQUFsc0UsSUFBQWluRCxFQXVDQSxTQUFBb21CLEdBQUFydEUsRUFBQXdzRSxFQUFBOUUsRUFBQUMsRUFBQTVxQyxHQUNBLE9BQUEvOEIsSUFBQXdzRSxJQUdBLE1BQUF4c0UsR0FBQSxNQUFBd3NFLElBQUF4SSxHQUFBaGtFLEtBQUFna0UsR0FBQXdJLEdBQ0F4c0UsTUFBQXdzRSxLQW1CQSxTQUFBcnNFLEVBQUFxc0UsRUFBQTlFLEVBQUFDLEVBQUEyRixFQUFBdndDLEdBQ0EsSUFBQXd3QyxFQUFBbjRELEdBQUFqVixHQUNBcXRFLEVBQUFwNEQsR0FBQW8zRCxHQUNBaUIsRUFBQUYsRUFBQXJtQixFQUFBOGdCLEdBQUE3bkUsR0FDQXV0RSxFQUFBRixFQUFBdG1CLEVBQUE4Z0IsR0FBQXdFLEdBS0FtQixHQUhBRixLQUFBeG1CLEVBQUFZLEVBQUE0bEIsSUFHQTVsQixFQUNBK2xCLEdBSEFGLEtBQUF6bUIsRUFBQVksRUFBQTZsQixJQUdBN2xCLEVBQ0FnbUIsRUFBQUosR0FBQUMsRUFFQSxHQUFBRyxHQUFBM0wsR0FBQS9oRSxHQUFBLENBQ0EsSUFBQStoRSxHQUFBc0ssR0FDQSxTQUVBZSxHQUFBLEVBQ0FJLEdBQUEsRUFFQSxHQUFBRSxJQUFBRixFQUVBLE9BREE1d0MsTUFBQSxJQUFBMm9DLElBQ0E2SCxHQUFBcGUsR0FBQWh2RCxHQUNBMnRFLEdBQUEzdEUsRUFBQXFzRSxFQUFBOUUsRUFBQUMsRUFBQTJGLEVBQUF2d0MsR0F5MEVBLFNBQUE1OEIsRUFBQXFzRSxFQUFBdjFELEVBQUF5d0QsRUFBQUMsRUFBQTJGLEVBQUF2d0MsR0FDQSxPQUFBOWxCLEdBQ0EsS0FBQXN4QyxHQUNBLEdBQUFwb0QsRUFBQThvRSxZQUFBdUQsRUFBQXZELFlBQ0E5b0UsRUFBQTZvRSxZQUFBd0QsRUFBQXhELFdBQ0EsU0FFQTdvRSxJQUFBNG9FLE9BQ0F5RCxJQUFBekQsT0FFQSxLQUFBemdCLEdBQ0EsUUFBQW5vRCxFQUFBOG9FLFlBQUF1RCxFQUFBdkQsYUFDQXFFLEVBQUEsSUFBQXZNLEdBQUE1Z0UsR0FBQSxJQUFBNGdFLEdBQUF5TCxLQUtBLEtBQUFwbEIsRUFDQSxLQUFBQyxFQUNBLEtBQUFNLEVBR0EsT0FBQWlmLElBQUF6bUUsR0FBQXFzRSxHQUVBLEtBQUFqbEIsRUFDQSxPQUFBcG5ELEVBQUFaLE1BQUFpdEUsRUFBQWp0RSxNQUFBWSxFQUFBNHRFLFNBQUF2QixFQUFBdUIsUUFFQSxLQUFBaG1CLEdBQ0EsS0FBQUUsR0FJQSxPQUFBOW5ELEdBQUFxc0UsRUFBQSxHQUVBLEtBQUE5a0IsRUFDQSxJQUFBc21CLEVBQUF2UCxHQUVBLEtBQUF6VyxHQUNBLElBQUFpbUIsRUFBQXZHLEVBQUFuaUIsRUFHQSxHQUZBeW9CLE1BQUFsUCxJQUVBMytELEVBQUF1K0QsTUFBQThOLEVBQUE5TixPQUFBdVAsRUFDQSxTQUdBLElBQUE1RSxFQUFBdHNDLEVBQUFqOUIsSUFBQUssR0FDQSxHQUFBa3BFLEVBQ0EsT0FBQUEsR0FBQW1ELEVBRUE5RSxHQUFBbGlCLEVBR0F6b0IsRUFBQXhkLElBQUFwZixFQUFBcXNFLEdBQ0EsSUFBQXRuRSxFQUFBNG9FLEdBQUFFLEVBQUE3dEUsR0FBQTZ0RSxFQUFBeEIsR0FBQTlFLEVBQUFDLEVBQUEyRixFQUFBdndDLEdBRUEsT0FEQUEsRUFBQSxPQUFBNThCLEdBQ0ErRSxFQUVBLEtBQUFnakQsR0FDQSxHQUFBMGIsR0FDQSxPQUFBQSxHQUFBemtFLEtBQUFnQixJQUFBeWpFLEdBQUF6a0UsS0FBQXF0RSxHQUdBLFNBdDRFQTBCLENBQUEvdEUsRUFBQXFzRSxFQUFBaUIsRUFBQS9GLEVBQUFDLEVBQUEyRixFQUFBdndDLEdBRUEsS0FBQTJxQyxFQUFBbmlCLEdBQUEsQ0FDQSxJQUFBNG9CLEVBQUFSLEdBQUFydEUsR0FBQW5CLEtBQUFnQixFQUFBLGVBQ0FpdUUsRUFBQVIsR0FBQXR0RSxHQUFBbkIsS0FBQXF0RSxFQUFBLGVBRUEsR0FBQTJCLEdBQUFDLEVBQUEsQ0FDQSxJQUFBQyxFQUFBRixFQUFBaHVFLEVBQUFILFFBQUFHLEVBQ0FtdUUsRUFBQUYsRUFBQTVCLEVBQUF4c0UsUUFBQXdzRSxFQUdBLE9BREF6dkMsTUFBQSxJQUFBMm9DLElBQ0E0SCxFQUFBZSxFQUFBQyxFQUFBNUcsRUFBQUMsRUFBQTVxQyxJQUdBLFFBQUE4d0MsSUFHQTl3QyxNQUFBLElBQUEyb0MsSUFxNEVBLFNBQUF2bEUsRUFBQXFzRSxFQUFBOUUsRUFBQUMsRUFBQTJGLEVBQUF2d0MsR0FDQSxJQUFBa3hDLEVBQUF2RyxFQUFBbmlCLEVBQ0FncEIsRUFBQS9FLEdBQUFycEUsR0FDQXF1RSxFQUFBRCxFQUFBcHNFLE9BRUEwcUUsRUFEQXJELEdBQUFnRCxHQUNBcnFFLE9BRUEsR0FBQXFzRSxHQUFBM0IsSUFBQW9CLEVBQ0EsU0FHQSxJQURBLElBQUEvbUUsRUFBQXNuRSxFQUNBdG5FLEtBQUEsQ0FDQSxJQUFBckMsRUFBQTBwRSxFQUFBcm5FLEdBQ0EsS0FBQSttRSxFQUFBcHBFLEtBQUEybkUsRUFBQWxzRSxHQUFBbkIsS0FBQXF0RSxFQUFBM25FLElBQ0EsU0FJQSxJQUFBd2tFLEVBQUF0c0MsRUFBQWo5QixJQUFBSyxHQUNBLEdBQUFrcEUsR0FBQXRzQyxFQUFBajlCLElBQUEwc0UsR0FDQSxPQUFBbkQsR0FBQW1ELEVBRUEsSUFBQXRuRSxHQUFBLEVBQ0E2M0IsRUFBQXhkLElBQUFwZixFQUFBcXNFLEdBQ0F6dkMsRUFBQXhkLElBQUFpdEQsRUFBQXJzRSxHQUdBLElBREEsSUFBQXN1RSxFQUFBUixJQUNBL21FLEVBQUFzbkUsR0FBQSxDQUNBM3BFLEVBQUEwcEUsRUFBQXJuRSxHQUNBLElBQUE2L0QsRUFBQTVtRSxFQUFBMEUsR0FDQTZwRSxFQUFBbEMsRUFBQTNuRSxHQUVBLEdBQUE4aUUsRUFDQSxJQUFBZ0gsRUFBQVYsRUFDQXRHLEVBQUErRyxFQUFBM0gsRUFBQWxpRSxFQUFBMm5FLEVBQUFyc0UsRUFBQTQ4QixHQUNBNHFDLEVBQUFaLEVBQUEySCxFQUFBN3BFLEVBQUExRSxFQUFBcXNFLEVBQUF6dkMsR0FHQSxLQUFBNHhDLElBQUEzb0UsRUFDQStnRSxJQUFBMkgsR0FBQXBCLEVBQUF2RyxFQUFBMkgsRUFBQWhILEVBQUFDLEVBQUE1cUMsR0FDQTR4QyxHQUNBLENBQ0F6cEUsR0FBQSxFQUNBLE1BRUF1cEUsTUFBQSxlQUFBNXBFLEdBRUEsR0FBQUssSUFBQXVwRSxFQUFBLENBQ0EsSUFBQUcsRUFBQXp1RSxFQUFBeVYsWUFDQWk1RCxFQUFBckMsRUFBQTUyRCxZQUdBZzVELEdBQUFDLEdBQ0EsZ0JBQUExdUUsR0FBQSxnQkFBQXFzRSxLQUNBLG1CQUFBb0MsbUJBQ0EsbUJBQUFDLHFCQUNBM3BFLEdBQUEsR0FLQSxPQUZBNjNCLEVBQUEsT0FBQTU4QixHQUNBNDhCLEVBQUEsT0FBQXl2QyxHQUNBdG5FLEVBajhFQTRwRSxDQUFBM3VFLEVBQUFxc0UsRUFBQTlFLEVBQUFDLEVBQUEyRixFQUFBdndDLElBM0RBZ3lDLENBQUEvdUUsRUFBQXdzRSxFQUFBOUUsRUFBQUMsRUFBQTBGLEdBQUF0d0MsSUFtRkEsU0FBQWl5QyxHQUFBN3VFLEVBQUE4SCxFQUFBZ25FLEVBQUF0SCxHQUNBLElBQUF6Z0UsRUFBQStuRSxFQUFBOXNFLE9BQ0FBLEVBQUErRSxFQUNBZ29FLEdBQUF2SCxFQUVBLFNBQUF4bkUsRUFDQSxPQUFBZ0MsRUFHQSxJQURBaEMsRUFBQVQsR0FBQVMsR0FDQStHLEtBQUEsQ0FDQSxJQUFBNFQsRUFBQW0wRCxFQUFBL25FLEdBQ0EsR0FBQWdvRSxHQUFBcDBELEVBQUEsR0FDQUEsRUFBQSxLQUFBM2EsRUFBQTJhLEVBQUEsTUFDQUEsRUFBQSxLQUFBM2EsR0FFQSxTQUdBLE9BQUErRyxFQUFBL0UsR0FBQSxDQUVBLElBQUEwQyxHQURBaVcsRUFBQW0wRCxFQUFBL25FLElBQ0EsR0FDQTYvRCxFQUFBNW1FLEVBQUEwRSxHQUNBc3FFLEVBQUFyMEQsRUFBQSxHQUVBLEdBQUFvMEQsR0FBQXAwRCxFQUFBLElBQ0EsR0FBQWlzRCxJQUFBL2dFLEtBQUFuQixLQUFBMUUsR0FDQSxhQUVTLENBQ1QsSUFBQTQ4QixFQUFBLElBQUEyb0MsR0FDQSxHQUFBaUMsRUFDQSxJQUFBemlFLEVBQUF5aUUsRUFBQVosRUFBQW9JLEVBQUF0cUUsRUFBQTFFLEVBQUE4SCxFQUFBODBCLEdBRUEsS0FBQTczQixJQUFBYyxFQUNBcW5FLEdBQUE4QixFQUFBcEksRUFBQXhoQixFQUFBQyxFQUFBbWlCLEVBQUE1cUMsR0FDQTczQixHQUVBLFVBSUEsU0FXQSxTQUFBa3FFLEdBQUFwdkUsR0FDQSxTQUFBc2tFLEdBQUF0a0UsSUFxNEZBdWdFLFVBcjRGQXZnRSxLQUdBMHJFLEdBQUExckUsR0FBQTZnRSxHQUFBaFcsSUFDQXBvQyxLQUFBNmdELEdBQUF0akUsSUE0Q0EsU0FBQXF2RSxHQUFBcnZFLEdBR0EseUJBQUFBLEVBQ0FBLEVBRUEsTUFBQUEsRUFDQXN2RSxHQUVBLGlCQUFBdHZFLEVBQ0FvVixHQUFBcFYsR0FDQXV2RSxHQUFBdnZFLEVBQUEsR0FBQUEsRUFBQSxJQUNBd3ZFLEdBQUF4dkUsR0FFQUksR0FBQUosR0FVQSxTQUFBeXZFLEdBQUF0dkUsR0FDQSxJQUFBdXZFLEdBQUF2dkUsR0FDQSxPQUFBbWlFLEdBQUFuaUUsR0FFQSxJQUFBK0UsS0FDQSxRQUFBTCxLQUFBbkYsR0FBQVMsR0FDQUcsR0FBQW5CLEtBQUFnQixFQUFBMEUsSUFBQSxlQUFBQSxHQUNBSyxFQUFBeEMsS0FBQW1DLEdBR0EsT0FBQUssRUFVQSxTQUFBeXFFLEdBQUF4dkUsR0FDQSxJQUFBbWtFLEdBQUFua0UsR0FDQSxPQW84RkEsU0FBQUEsR0FDQSxJQUFBK0UsS0FDQSxTQUFBL0UsRUFDQSxRQUFBMEUsS0FBQW5GLEdBQUFTLEdBQ0ErRSxFQUFBeEMsS0FBQW1DLEdBR0EsT0FBQUssRUEzOEZBMHFFLENBQUF6dkUsR0FFQSxJQUFBMHZFLEVBQUFILEdBQUF2dkUsR0FDQStFLEtBRUEsUUFBQUwsS0FBQTFFLEdBQ0EsZUFBQTBFLElBQUFnckUsR0FBQXZ2RSxHQUFBbkIsS0FBQWdCLEVBQUEwRSxLQUNBSyxFQUFBeEMsS0FBQW1DLEdBR0EsT0FBQUssRUFZQSxTQUFBNHFFLEdBQUE5dkUsRUFBQXdzRSxHQUNBLE9BQUF4c0UsRUFBQXdzRSxFQVdBLFNBQUF1RCxHQUFBbGYsRUFBQXJCLEdBQ0EsSUFBQXRvRCxHQUFBLEVBQ0FoQyxFQUFBOHFFLEdBQUFuZixHQUFBNzlDLEVBQUE2OUMsRUFBQTF1RCxXQUtBLE9BSEEra0UsR0FBQXJXLEVBQUEsU0FBQTd3RCxFQUFBNkUsRUFBQWdzRCxHQUNBM3JELElBQUFnQyxHQUFBc29ELEVBQUF4dkQsRUFBQTZFLEVBQUFnc0QsS0FFQTNyRCxFQVVBLFNBQUFzcUUsR0FBQXZuRSxHQUNBLElBQUFnbkUsRUFBQWdCLEdBQUFob0UsR0FDQSxVQUFBZ25FLEVBQUE5c0UsUUFBQThzRSxFQUFBLE1BQ0FpQixHQUFBakIsRUFBQSxNQUFBQSxFQUFBLE9BRUEsU0FBQTl1RSxHQUNBLE9BQUFBLElBQUE4SCxHQUFBK21FLEdBQUE3dUUsRUFBQThILEVBQUFnbkUsSUFZQSxTQUFBTSxHQUFBM0QsRUFBQXVELEdBQ0EsT0FBQWdCLEdBQUF2RSxJQUFBd0UsR0FBQWpCLEdBQ0FlLEdBQUFwRSxHQUFBRixHQUFBdUQsR0FFQSxTQUFBaHZFLEdBQ0EsSUFBQTRtRSxFQUFBam5FLEdBQUFLLEVBQUF5ckUsR0FDQSxPQUFBN0UsSUFBQS9nRSxHQUFBK2dFLElBQUFvSSxFQUNBa0IsR0FBQWx3RSxFQUFBeXJFLEdBQ0F5QixHQUFBOEIsRUFBQXBJLEVBQUF4aEIsRUFBQUMsSUFlQSxTQUFBOHFCLEdBQUFud0UsRUFBQThILEVBQUFzb0UsRUFBQTVJLEVBQUE1cUMsR0FDQTU4QixJQUFBOEgsR0FHQXFqRSxHQUFBcmpFLEVBQUEsU0FBQWtuRSxFQUFBdHFFLEdBQ0EsR0FBQXkvRCxHQUFBNkssR0FDQXB5QyxNQUFBLElBQUEyb0MsSUErQkEsU0FBQXZsRSxFQUFBOEgsRUFBQXBELEVBQUEwckUsRUFBQUMsRUFBQTdJLEVBQUE1cUMsR0FDQSxJQUFBZ3FDLEVBQUFsSSxHQUFBMStELEVBQUEwRSxHQUNBc3FFLEVBQUF0USxHQUFBNTJELEVBQUFwRCxHQUNBd2tFLEVBQUF0c0MsRUFBQWo5QixJQUFBcXZFLEdBRUEsR0FBQTlGLEVBQ0ExQyxHQUFBeG1FLEVBQUEwRSxFQUFBd2tFLE9BREEsQ0FJQSxJQUFBb0gsRUFBQTlJLEVBQ0FBLEVBQUFaLEVBQUFvSSxFQUFBdHFFLEVBQUEsR0FBQTFFLEVBQUE4SCxFQUFBODBCLEdBQ0EvMkIsRUFFQThqRSxFQUFBMkcsSUFBQXpxRSxFQUVBLEdBQUE4akUsRUFBQSxDQUNBLElBQUFqRSxFQUFBendELEdBQUErNUQsR0FDQW5KLEdBQUFILEdBQUEzRCxHQUFBaU4sR0FDQXVCLEdBQUE3SyxJQUFBRyxHQUFBN1csR0FBQWdnQixHQUVBc0IsRUFBQXRCLEVBQ0F0SixHQUFBRyxHQUFBMEssRUFDQXQ3RCxHQUFBMnhELEdBQ0EwSixFQUFBMUosRUFFQTRKLEdBQUE1SixHQUNBMEosRUFBQWpLLEdBQUFPLEdBRUFmLEdBQ0E4RCxHQUFBLEVBQ0EyRyxFQUFBdkksR0FBQWlILEdBQUEsSUFFQXVCLEdBQ0E1RyxHQUFBLEVBQ0EyRyxFQUFBdEgsR0FBQWdHLEdBQUEsSUFHQXNCLEtBR0FHLEdBQUF6QixJQUFBcEosR0FBQW9KLElBQ0FzQixFQUFBMUosRUFDQWhCLEdBQUFnQixHQUNBMEosRUFBQUksR0FBQTlKLEtBRUF6QyxHQUFBeUMsSUFBQXdKLEdBQUE3RSxHQUFBM0UsTUFDQTBKLEVBQUF0SSxHQUFBZ0gsS0FJQXJGLEdBQUEsRUFHQUEsSUFFQS9zQyxFQUFBeGQsSUFBQTR2RCxFQUFBc0IsR0FDQUQsRUFBQUMsRUFBQXRCLEVBQUFvQixFQUFBNUksRUFBQTVxQyxHQUNBQSxFQUFBLE9BQUFveUMsSUFFQXhJLEdBQUF4bUUsRUFBQTBFLEVBQUE0ckUsSUF6RkFLLENBQUEzd0UsRUFBQThILEVBQUFwRCxFQUFBMHJFLEVBQUFELEdBQUEzSSxFQUFBNXFDLE9BRUEsQ0FDQSxJQUFBMHpDLEVBQUE5SSxFQUNBQSxFQUFBOUksR0FBQTErRCxFQUFBMEUsR0FBQXNxRSxFQUFBdHFFLEVBQUEsR0FBQTFFLEVBQUE4SCxFQUFBODBCLEdBQ0EvMkIsRUFFQXlxRSxJQUFBenFFLElBQ0F5cUUsRUFBQXRCLEdBRUF4SSxHQUFBeG1FLEVBQUEwRSxFQUFBNHJFLEtBRU9uSSxJQXdGUCxTQUFBeUksR0FBQXpoQixFQUFBcnZELEdBQ0EsSUFBQWtDLEVBQUFtdEQsRUFBQW50RCxPQUNBLEdBQUFBLEVBSUEsT0FBQWdrRSxHQURBbG1FLEtBQUEsRUFBQWtDLEVBQUEsRUFDQUEsR0FBQW10RCxFQUFBcnZELEdBQUErRixFQVlBLFNBQUFnckUsR0FBQW5nQixFQUFBb2dCLEVBQUFDLEdBQ0EsSUFBQWhxRSxHQUFBLEVBVUEsT0FUQStwRSxFQUFBOWdCLEdBQUE4Z0IsRUFBQTl1RSxPQUFBOHVFLEdBQUEzQixJQUFBNWQsR0FBQXlmLE9BOXZGQSxTQUFBN2hCLEVBQUE4aEIsR0FDQSxJQUFBanZFLEVBQUFtdEQsRUFBQW50RCxPQUdBLElBREFtdEQsRUFBQStoQixLQUFBRCxHQUNBanZFLEtBQ0FtdEQsRUFBQW50RCxHQUFBbXRELEVBQUFudEQsR0FBQW5DLE1BRUEsT0FBQXN2RCxFQWd3RkFnaUIsQ0FQQXZCLEdBQUFsZixFQUFBLFNBQUE3d0QsRUFBQTZFLEVBQUFnc0QsR0FJQSxPQUFnQjBnQixTQUhoQnBoQixHQUFBOGdCLEVBQUEsU0FBQXpoQixHQUNBLE9BQUFBLEVBQUF4dkQsS0FFZ0JrSCxVQUFBbEgsV0FHaEIsU0FBQUcsRUFBQXFzRSxHQUNBLE9BbTRCQSxTQUFBcnNFLEVBQUFxc0UsRUFBQTBFLEdBT0EsSUFOQSxJQUFBaHFFLEdBQUEsRUFDQXNxRSxFQUFBcnhFLEVBQUFveEUsU0FDQUUsRUFBQWpGLEVBQUErRSxTQUNBcHZFLEVBQUFxdkUsRUFBQXJ2RSxPQUNBdXZFLEVBQUFSLEVBQUEvdUUsU0FFQStFLEVBQUEvRSxHQUFBLENBQ0EsSUFBQStDLEVBQUF5c0UsR0FBQUgsRUFBQXRxRSxHQUFBdXFFLEVBQUF2cUUsSUFDQSxHQUFBaEMsRUFBQSxDQUNBLEdBQUFnQyxHQUFBd3FFLEVBQ0EsT0FBQXhzRSxFQUVBLElBQUF5bkMsRUFBQXVrQyxFQUFBaHFFLEdBQ0EsT0FBQWhDLEdBQUEsUUFBQXluQyxHQUFBLE1BVUEsT0FBQXhzQyxFQUFBK0csTUFBQXNsRSxFQUFBdGxFLE1BMzVCQTBxRSxDQUFBenhFLEVBQUFxc0UsRUFBQTBFLEtBNEJBLFNBQUFXLEdBQUExeEUsRUFBQXVrRCxFQUFBck8sR0FLQSxJQUpBLElBQUFudkMsR0FBQSxFQUNBL0UsRUFBQXVpRCxFQUFBdmlELE9BQ0ErQyxPQUVBZ0MsRUFBQS9FLEdBQUEsQ0FDQSxJQUFBeXBFLEVBQUFsbkIsRUFBQXg5QyxHQUNBbEgsRUFBQTJyRSxHQUFBeHJFLEVBQUF5ckUsR0FFQXYxQixFQUFBcjJDLEVBQUE0ckUsSUFDQWtHLEdBQUE1c0UsRUFBQTJtRSxHQUFBRCxFQUFBenJFLEdBQUFILEdBR0EsT0FBQWtGLEVBMkJBLFNBQUE2c0UsR0FBQXppQixFQUFBZSxFQUFBYixFQUFBVSxHQUNBLElBQUEvckQsRUFBQStyRCxFQUFBa0IsR0FBQXBCLEdBQ0E5b0QsR0FBQSxFQUNBL0UsRUFBQWt1RCxFQUFBbHVELE9BQ0E4cUUsRUFBQTNkLEVBUUEsSUFOQUEsSUFBQWUsSUFDQUEsRUFBQW1XLEdBQUFuVyxJQUVBYixJQUNBeWQsRUFBQTljLEdBQUFiLEVBQUFvQyxHQUFBbEMsT0FFQXRvRCxFQUFBL0UsR0FLQSxJQUpBLElBQUE2dUQsRUFBQSxFQUNBaHhELEVBQUFxd0QsRUFBQW5wRCxHQUNBaTRDLEVBQUFxUSxJQUFBeHZELE1BRUFneEQsRUFBQTdzRCxFQUFBOG9FLEVBQUE5dEIsRUFBQTZSLEVBQUFkLEtBQUEsR0FDQStjLElBQUEzZCxHQUNBbHJELEdBQUFqRixLQUFBOHRFLEVBQUFqYyxFQUFBLEdBRUE1c0QsR0FBQWpGLEtBQUFtd0QsRUFBQTBCLEVBQUEsR0FHQSxPQUFBMUIsRUFZQSxTQUFBMGlCLEdBQUExaUIsRUFBQTJpQixHQUlBLElBSEEsSUFBQTl2RSxFQUFBbXRELEVBQUEyaUIsRUFBQTl2RSxPQUFBLEVBQ0E4OEQsRUFBQTk4RCxFQUFBLEVBRUFBLEtBQUEsQ0FDQSxJQUFBK0UsRUFBQStxRSxFQUFBOXZFLEdBQ0EsR0FBQUEsR0FBQTg4RCxHQUFBLzNELElBQUFnckUsRUFBQSxDQUNBLElBQUFBLEVBQUFockUsRUFDQWkvRCxHQUFBai9ELEdBQ0E5QyxHQUFBakYsS0FBQW13RCxFQUFBcG9ELEVBQUEsR0FFQWlyRSxHQUFBN2lCLEVBQUFwb0QsSUFJQSxPQUFBb29ELEVBWUEsU0FBQStXLEdBQUFrQixFQUFBQyxHQUNBLE9BQUFELEVBQUF6RixHQUFBYyxNQUFBNEUsRUFBQUQsRUFBQSxJQWtDQSxTQUFBNkssR0FBQTVULEVBQUF2K0QsR0FDQSxJQUFBaUYsRUFBQSxHQUNBLElBQUFzNUQsR0FBQXYrRCxFQUFBLEdBQUFBLEVBQUF5bUQsRUFDQSxPQUFBeGhELEVBSUEsR0FDQWpGLEVBQUEsSUFDQWlGLEdBQUFzNUQsSUFFQXYrRCxFQUFBNmhFLEdBQUE3aEUsRUFBQSxNQUVBdStELFlBRU92K0QsR0FFUCxPQUFBaUYsRUFXQSxTQUFBbXRFLEdBQUE1dkIsRUFBQTV1QixHQUNBLE9BQUF5K0MsR0FBQUMsR0FBQTl2QixFQUFBNXVCLEVBQUF5N0MsSUFBQTdzQixFQUFBLElBVUEsU0FBQSt2QixHQUFBM2hCLEdBQ0EsT0FBQXVWLEdBQUEvVixHQUFBUSxJQVdBLFNBQUE0aEIsR0FBQTVoQixFQUFBNXdELEdBQ0EsSUFBQXF2RCxFQUFBZSxHQUFBUSxHQUNBLE9BQUEwVixHQUFBalgsRUFBQW1YLEdBQUF4bUUsRUFBQSxFQUFBcXZELEVBQUFudEQsU0FhQSxTQUFBMnZFLEdBQUEzeEUsRUFBQXlyRSxFQUFBNXJFLEVBQUEybkUsR0FDQSxJQUFBckQsR0FBQW5rRSxHQUNBLE9BQUFBLEVBU0EsSUFMQSxJQUFBK0csR0FBQSxFQUNBL0UsR0FIQXlwRSxFQUFBQyxHQUFBRCxFQUFBenJFLElBR0FnQyxPQUNBODhELEVBQUE5OEQsRUFBQSxFQUNBdXdFLEVBQUF2eUUsRUFFQSxNQUFBdXlFLEtBQUF4ckUsRUFBQS9FLEdBQUEsQ0FDQSxJQUFBMEMsRUFBQWluRSxHQUFBRixFQUFBMWtFLElBQ0F1cEUsRUFBQXp3RSxFQUVBLEdBQUFrSCxHQUFBKzNELEVBQUEsQ0FDQSxJQUFBOEgsRUFBQTJMLEVBQUE3dEUsSUFDQTRyRSxFQUFBOUksSUFBQVosRUFBQWxpRSxFQUFBNnRFLEdBQUExc0UsS0FDQUEsSUFDQXlxRSxFQUFBbk0sR0FBQXlDLEdBQ0FBLEVBQ0FaLEdBQUF5RixFQUFBMWtFLEVBQUEsV0FHQTQvRCxHQUFBNEwsRUFBQTd0RSxFQUFBNHJFLEdBQ0FpQyxJQUFBN3RFLEdBRUEsT0FBQTFFLEVBV0EsSUFBQXd5RSxHQUFBeFAsR0FBQSxTQUFBMWdCLEVBQUEzbkMsR0FFQSxPQURBcW9ELEdBQUE1akQsSUFBQWtqQyxFQUFBM25DLEdBQ0EybkMsR0FGQTZzQixHQWFBc0QsR0FBQWp6RSxHQUFBLFNBQUE4aUQsRUFBQStiLEdBQ0EsT0FBQTcrRCxHQUFBOGlELEVBQUEsWUFDQTdpRCxjQUFBLEVBQ0FDLFlBQUEsRUFDQUcsTUFBQTZ5RSxHQUFBclUsR0FDQW5uQixVQUFBLEtBTEFpNEIsR0FnQkEsU0FBQXdELEdBQUFqaUIsR0FDQSxPQUFBMFYsR0FBQWxXLEdBQUFRLElBWUEsU0FBQWtpQixHQUFBempCLEVBQUF6N0IsRUFBQUUsR0FDQSxJQUFBN3NCLEdBQUEsRUFDQS9FLEVBQUFtdEQsRUFBQW50RCxPQUVBMHhCLEVBQUEsSUFDQUEsS0FBQTF4QixFQUFBLEVBQUFBLEVBQUEweEIsSUFFQUUsSUFBQTV4QixJQUFBNHhCLEdBQ0EsSUFDQUEsR0FBQTV4QixHQUVBQSxFQUFBMHhCLEVBQUFFLEVBQUEsRUFBQUEsRUFBQUYsSUFBQSxFQUNBQSxLQUFBLEVBR0EsSUFEQSxJQUFBM3VCLEVBQUE4TixFQUFBN1EsS0FDQStFLEVBQUEvRSxHQUNBK0MsRUFBQWdDLEdBQUFvb0QsRUFBQXBvRCxFQUFBMnNCLEdBRUEsT0FBQTN1QixFQVlBLFNBQUE4dEUsR0FBQW5pQixFQUFBeGEsR0FDQSxJQUFBbnhDLEVBTUEsT0FKQWdpRSxHQUFBclcsRUFBQSxTQUFBN3dELEVBQUFrSCxFQUFBMnBELEdBRUEsUUFEQTNyRCxFQUFBbXhDLEVBQUFyMkMsRUFBQWtILEVBQUEycEQsUUFHQTNyRCxFQWVBLFNBQUErdEUsR0FBQTNqQixFQUFBdHZELEVBQUFrekUsR0FDQSxJQUFBQyxFQUFBLEVBQ0FDLEVBQUEsTUFBQTlqQixFQUFBNmpCLEVBQUE3akIsRUFBQW50RCxPQUVBLG9CQUFBbkMsU0FBQW96RSxHQUFBcnNCLEVBQUEsQ0FDQSxLQUFBb3NCLEVBQUFDLEdBQUEsQ0FDQSxJQUFBQyxFQUFBRixFQUFBQyxJQUFBLEVBQ0FqMEIsRUFBQW1RLEVBQUErakIsR0FFQSxPQUFBbDBCLElBQUE2ckIsR0FBQTdyQixLQUNBK3pCLEVBQUEvekIsR0FBQW4vQyxFQUFBbS9DLEVBQUFuL0MsR0FDQW16RSxFQUFBRSxFQUFBLEVBRUFELEVBQUFDLEVBR0EsT0FBQUQsRUFFQSxPQUFBRSxHQUFBaGtCLEVBQUF0dkQsRUFBQXN2RSxHQUFBNEQsR0FnQkEsU0FBQUksR0FBQWhrQixFQUFBdHZELEVBQUF3dkQsRUFBQTBqQixHQUNBbHpFLEVBQUF3dkQsRUFBQXh2RCxHQVNBLElBUEEsSUFBQW16RSxFQUFBLEVBQ0FDLEVBQUEsTUFBQTlqQixFQUFBLEVBQUFBLEVBQUFudEQsT0FDQW94RSxFQUFBdnpFLEtBQ0F3ekUsRUFBQSxPQUFBeHpFLEVBQ0F5ekUsRUFBQXpJLEdBQUFockUsR0FDQTB6RSxFQUFBMXpFLElBQUFnRyxFQUVBbXRFLEVBQUFDLEdBQUEsQ0FDQSxJQUFBQyxFQUFBdlIsSUFBQXFSLEVBQUFDLEdBQUEsR0FDQWowQixFQUFBcVEsRUFBQUYsRUFBQStqQixJQUNBTSxFQUFBeDBCLElBQUFuNUMsRUFDQTR0RSxFQUFBLE9BQUF6MEIsRUFDQTAwQixFQUFBMTBCLEtBQ0EyMEIsRUFBQTlJLEdBQUE3ckIsR0FFQSxHQUFBbzBCLEVBQ0EsSUFBQVEsRUFBQWIsR0FBQVcsT0FFQUUsRUFEU0wsRUFDVEcsSUFBQVgsR0FBQVMsR0FDU0gsRUFDVEssR0FBQUYsSUFBQVQsSUFBQVUsR0FDU0gsRUFDVEksR0FBQUYsSUFBQUMsSUFBQVYsSUFBQVksSUFDU0YsSUFBQUUsSUFHVFosRUFBQS96QixHQUFBbi9DLEVBQUFtL0MsRUFBQW4vQyxHQUVBK3pFLEVBQ0FaLEVBQUFFLEVBQUEsRUFFQUQsRUFBQUMsRUFHQSxPQUFBNVEsR0FBQTJRLEVBQUF0c0IsR0FZQSxTQUFBa3RCLEdBQUExa0IsRUFBQUUsR0FNQSxJQUxBLElBQUF0b0QsR0FBQSxFQUNBL0UsRUFBQW10RCxFQUFBbnRELE9BQ0EydEQsRUFBQSxFQUNBNXFELE9BRUFnQyxFQUFBL0UsR0FBQSxDQUNBLElBQUFuQyxFQUFBc3ZELEVBQUFwb0QsR0FDQWk0QyxFQUFBcVEsSUFBQXh2RCxLQUVBLElBQUFrSCxJQUFBMC9ELEdBQUF6bkIsRUFBQTh0QixHQUFBLENBQ0EsSUFBQUEsRUFBQTl0QixFQUNBajZDLEVBQUE0cUQsS0FBQSxJQUFBOXZELEVBQUEsRUFBQUEsR0FHQSxPQUFBa0YsRUFXQSxTQUFBK3VFLEdBQUFqMEUsR0FDQSx1QkFBQUEsRUFDQUEsRUFFQWdyRSxHQUFBaHJFLEdBQ0E0bUQsR0FFQTVtRCxFQVdBLFNBQUFrMEUsR0FBQWwwRSxHQUVBLG9CQUFBQSxFQUNBLE9BQUFBLEVBRUEsR0FBQW9WLEdBQUFwVixHQUVBLE9BQUFtd0QsR0FBQW53RCxFQUFBazBFLElBQUEsR0FFQSxHQUFBbEosR0FBQWhyRSxHQUNBLE9BQUE4akUsTUFBQTNrRSxLQUFBYSxHQUFBLEdBRUEsSUFBQWtGLEVBQUFsRixFQUFBLEdBQ0EsV0FBQWtGLEdBQUEsRUFBQWxGLElBQUF5bUQsRUFBQSxLQUFBdmhELEVBWUEsU0FBQWl2RSxHQUFBN2tCLEVBQUFFLEVBQUFVLEdBQ0EsSUFBQWhwRCxHQUFBLEVBQ0EyaUUsRUFBQTlaLEdBQ0E1dEQsRUFBQW10RCxFQUFBbnRELE9BQ0EybkUsR0FBQSxFQUNBNWtFLEtBQ0ErbkUsRUFBQS9uRSxFQUVBLEdBQUFnckQsRUFDQTRaLEdBQUEsRUFDQUQsRUFBQTVaLFFBRUEsR0FBQTl0RCxHQUFBMmlELEVBQUEsQ0FDQSxJQUFBdmxDLEVBQUFpd0MsRUFBQSxLQUFBNGtCLEdBQUE5a0IsR0FDQSxHQUFBL3ZDLEVBQ0EsT0FBQXUvQyxHQUFBdi9DLEdBRUF1cUQsR0FBQSxFQUNBRCxFQUFBalksR0FDQXFiLEVBQUEsSUFBQXpILFFBR0F5SCxFQUFBemQsS0FBQXRxRCxFQUVBOGtFLEVBQ0EsT0FBQTlpRSxFQUFBL0UsR0FBQSxDQUNBLElBQUFuQyxFQUFBc3ZELEVBQUFwb0QsR0FDQWk0QyxFQUFBcVEsSUFBQXh2RCxLQUdBLEdBREFBLEVBQUFrd0QsR0FBQSxJQUFBbHdELElBQUEsRUFDQThwRSxHQUFBM3FCLEtBQUEsQ0FFQSxJQURBLElBQUFrMUIsRUFBQXBILEVBQUE5cUUsT0FDQWt5RSxLQUNBLEdBQUFwSCxFQUFBb0gsS0FBQWwxQixFQUNBLFNBQUE2cUIsRUFHQXhhLEdBQ0F5ZCxFQUFBdnFFLEtBQUF5OEMsR0FFQWo2QyxFQUFBeEMsS0FBQTFDLFFBRUE2cEUsRUFBQW9ELEVBQUE5dEIsRUFBQStRLEtBQ0ErYyxJQUFBL25FLEdBQ0ErbkUsRUFBQXZxRSxLQUFBeThDLEdBRUFqNkMsRUFBQXhDLEtBQUExQyxJQUdBLE9BQUFrRixFQVdBLFNBQUFpdEUsR0FBQWh5RSxFQUFBeXJFLEdBR0EsY0FEQXpyRSxFQUFBZ3RFLEdBQUFodEUsRUFEQXlyRSxFQUFBQyxHQUFBRCxFQUFBenJFLGFBRUFBLEVBQUEyckUsR0FBQXIxQyxHQUFBbTFDLEtBYUEsU0FBQTBJLEdBQUFuMEUsRUFBQXlyRSxFQUFBbnhDLEVBQUFrdEMsR0FDQSxPQUFBbUssR0FBQTN4RSxFQUFBeXJFLEVBQUFueEMsRUFBQWt4QyxHQUFBeHJFLEVBQUF5ckUsSUFBQWpFLEdBY0EsU0FBQTRNLEdBQUFqbEIsRUFBQWpaLEVBQUFtK0IsRUFBQXZqQixHQUlBLElBSEEsSUFBQTl1RCxFQUFBbXRELEVBQUFudEQsT0FDQStFLEVBQUErcEQsRUFBQTl1RCxHQUFBLEdBRUE4dUQsRUFBQS9wRCxRQUFBL0UsSUFDQWswQyxFQUFBaVosRUFBQXBvRCxLQUFBb29ELEtBRUEsT0FBQWtsQixFQUNBekIsR0FBQXpqQixFQUFBMkIsRUFBQSxFQUFBL3BELEVBQUErcEQsRUFBQS9wRCxFQUFBLEVBQUEvRSxHQUNBNHdFLEdBQUF6akIsRUFBQTJCLEVBQUEvcEQsRUFBQSxJQUFBK3BELEVBQUE5dUQsRUFBQStFLEdBYUEsU0FBQXV0RSxHQUFBejBFLEVBQUEwMEUsR0FDQSxJQUFBeHZFLEVBQUFsRixFQUlBLE9BSEFrRixhQUFBKytELEtBQ0EvK0QsSUFBQWxGLFNBRUFzd0QsR0FBQW9rQixFQUFBLFNBQUF4dkUsRUFBQXl2RSxHQUNBLE9BQUFBLEVBQUFseUIsS0FBQXhoRCxNQUFBMHpFLEVBQUF2bEIsUUFBQWdCLElBQUFsckQsR0FBQXl2RSxFQUFBejRCLFFBQ09oM0MsR0FhUCxTQUFBMHZFLEdBQUFoSSxFQUFBcGQsRUFBQVUsR0FDQSxJQUFBL3RELEVBQUF5cUUsRUFBQXpxRSxPQUNBLEdBQUFBLEVBQUEsRUFDQSxPQUFBQSxFQUFBZ3lFLEdBQUF2SCxFQUFBLE9BS0EsSUFIQSxJQUFBMWxFLEdBQUEsRUFDQWhDLEVBQUE4TixFQUFBN1EsS0FFQStFLEVBQUEvRSxHQUlBLElBSEEsSUFBQW10RCxFQUFBc2QsRUFBQTFsRSxHQUNBNGxFLEdBQUEsSUFFQUEsRUFBQTNxRSxHQUNBMnFFLEdBQUE1bEUsSUFDQWhDLEVBQUFnQyxHQUFBMGlFLEdBQUExa0UsRUFBQWdDLElBQUFvb0QsRUFBQXNkLEVBQUFFLEdBQUF0ZCxFQUFBVSxJQUlBLE9BQUFpa0IsR0FBQWpKLEdBQUFobUUsRUFBQSxHQUFBc3FELEVBQUFVLEdBWUEsU0FBQTJrQixHQUFBOXJFLEVBQUFzbkQsRUFBQXlrQixHQU1BLElBTEEsSUFBQTV0RSxHQUFBLEVBQ0EvRSxFQUFBNEcsRUFBQTVHLE9BQ0E0eUUsRUFBQTFrQixFQUFBbHVELE9BQ0ErQyxPQUVBZ0MsRUFBQS9FLEdBQUEsQ0FDQSxJQUFBbkMsRUFBQWtILEVBQUE2dEUsRUFBQTFrQixFQUFBbnBELEdBQUFsQixFQUNBOHVFLEVBQUE1dkUsRUFBQTZELEVBQUE3QixHQUFBbEgsR0FFQSxPQUFBa0YsRUFVQSxTQUFBOHZFLEdBQUFoMUUsR0FDQSxPQUFBMndFLEdBQUEzd0UsUUFVQSxTQUFBaTFFLEdBQUFqMUUsR0FDQSx5QkFBQUEsSUFBQXN2RSxHQVdBLFNBQUF6RCxHQUFBN3JFLEVBQUFHLEdBQ0EsT0FBQWlWLEdBQUFwVixHQUNBQSxFQUVBbXdFLEdBQUFud0UsRUFBQUcsSUFBQUgsR0FBQWsxRSxHQUFBeHRFLEdBQUExSCxJQVlBLElBQUFtMUUsR0FBQTlDLEdBV0EsU0FBQStDLEdBQUE5bEIsRUFBQXo3QixFQUFBRSxHQUNBLElBQUE1eEIsRUFBQW10RCxFQUFBbnRELE9BRUEsT0FEQTR4QixNQUFBL3RCLEVBQUE3RCxFQUFBNHhCLEdBQ0FGLEdBQUFFLEdBQUE1eEIsRUFBQW10RCxFQUFBeWpCLEdBQUF6akIsRUFBQXo3QixFQUFBRSxHQVNBLElBQUFzVixHQUFBbzRCLElBQUEsU0FBQW4vRCxHQUNBLE9BQUEwckQsR0FBQTNrQixhQUFBL21DLElBV0EsU0FBQTRsRSxHQUFBYSxFQUFBbkIsR0FDQSxHQUFBQSxFQUNBLE9BQUFtQixFQUFBOTFELFFBRUEsSUFBQTlRLEVBQUE0bUUsRUFBQTVtRSxPQUNBK0MsRUFBQTg3RCxNQUFBNytELEdBQUEsSUFBQTRtRSxFQUFBbnpELFlBQUF6VCxHQUdBLE9BREE0bUUsRUFBQXNNLEtBQUFud0UsR0FDQUEsRUFVQSxTQUFBMmpFLEdBQUF5TSxHQUNBLElBQUFwd0UsRUFBQSxJQUFBb3dFLEVBQUExL0QsWUFBQTAvRCxFQUFBck0sWUFFQSxPQURBLElBQUFsSSxHQUFBNzdELEdBQUFxYSxJQUFBLElBQUF3aEQsR0FBQXVVLElBQ0Fwd0UsRUFnREEsU0FBQWlrRSxHQUFBb00sRUFBQTNOLEdBQ0EsSUFBQW1CLEVBQUFuQixFQUFBaUIsR0FBQTBNLEVBQUF4TSxRQUFBd00sRUFBQXhNLE9BQ0EsV0FBQXdNLEVBQUEzL0QsWUFBQW16RCxFQUFBd00sRUFBQXZNLFdBQUF1TSxFQUFBcHpFLFFBV0EsU0FBQXd2RSxHQUFBM3hFLEVBQUF3c0UsR0FDQSxHQUFBeHNFLElBQUF3c0UsRUFBQSxDQUNBLElBQUFnSixFQUFBeDFFLElBQUFnRyxFQUNBd3RFLEVBQUEsT0FBQXh6RSxFQUNBeTFFLEVBQUF6MUUsS0FDQXl6RSxFQUFBekksR0FBQWhyRSxHQUVBMnpFLEVBQUFuSCxJQUFBeG1FLEVBQ0E0dEUsRUFBQSxPQUFBcEgsRUFDQXFILEVBQUFySCxLQUNBc0gsRUFBQTlJLEdBQUF3QixHQUVBLElBQUFvSCxJQUFBRSxJQUFBTCxHQUFBenpFLEVBQUF3c0UsR0FDQWlILEdBQUFFLEdBQUFFLElBQUFELElBQUFFLEdBQ0FOLEdBQUFHLEdBQUFFLElBQ0EyQixHQUFBM0IsSUFDQTRCLEVBQ0EsU0FFQSxJQUFBakMsSUFBQUMsSUFBQUssR0FBQTl6RSxFQUFBd3NFLEdBQ0FzSCxHQUFBMEIsR0FBQUMsSUFBQWpDLElBQUFDLEdBQ0FHLEdBQUE0QixHQUFBQyxJQUNBOUIsR0FBQThCLElBQ0E1QixFQUNBLFNBR0EsU0F1REEsU0FBQTZCLEdBQUF4NUIsRUFBQXk1QixFQUFBQyxFQUFBQyxHQVVBLElBVEEsSUFBQUMsR0FBQSxFQUNBQyxFQUFBNzVCLEVBQUEvNUMsT0FDQTZ6RSxFQUFBSixFQUFBenpFLE9BQ0E4ekUsR0FBQSxFQUNBQyxFQUFBUCxFQUFBeHpFLE9BQ0FnMEUsRUFBQTVULEdBQUF3VCxFQUFBQyxFQUFBLEdBQ0E5d0UsRUFBQThOLEVBQUFrakUsRUFBQUMsR0FDQUMsR0FBQVAsSUFFQUksRUFBQUMsR0FDQWh4RSxFQUFBK3dFLEdBQUFOLEVBQUFNLEdBRUEsT0FBQUgsRUFBQUUsSUFDQUksR0FBQU4sRUFBQUMsS0FDQTd3RSxFQUFBMHdFLEVBQUFFLElBQUE1NUIsRUFBQTQ1QixJQUdBLEtBQUFLLEtBQ0FqeEUsRUFBQSt3RSxLQUFBLzVCLEVBQUE0NUIsS0FFQSxPQUFBNXdFLEVBY0EsU0FBQW14RSxHQUFBbjZCLEVBQUF5NUIsRUFBQUMsRUFBQUMsR0FXQSxJQVZBLElBQUFDLEdBQUEsRUFDQUMsRUFBQTc1QixFQUFBLzVDLE9BQ0FtMEUsR0FBQSxFQUNBTixFQUFBSixFQUFBenpFLE9BQ0FvMEUsR0FBQSxFQUNBQyxFQUFBYixFQUFBeHpFLE9BQ0FnMEUsRUFBQTVULEdBQUF3VCxFQUFBQyxFQUFBLEdBQ0E5d0UsRUFBQThOLEVBQUFtakUsRUFBQUssR0FDQUosR0FBQVAsSUFFQUMsRUFBQUssR0FDQWp4RSxFQUFBNHdFLEdBQUE1NUIsRUFBQTQ1QixHQUdBLElBREEsSUFBQTVpRCxFQUFBNGlELElBQ0FTLEVBQUFDLEdBQ0F0eEUsRUFBQWd1QixFQUFBcWpELEdBQUFaLEVBQUFZLEdBRUEsT0FBQUQsRUFBQU4sSUFDQUksR0FBQU4sRUFBQUMsS0FDQTd3RSxFQUFBZ3VCLEVBQUEwaUQsRUFBQVUsSUFBQXA2QixFQUFBNDVCLE1BR0EsT0FBQTV3RSxFQVdBLFNBQUFzaEUsR0FBQXYrRCxFQUFBcW5ELEdBQ0EsSUFBQXBvRCxHQUFBLEVBQ0EvRSxFQUFBOEYsRUFBQTlGLE9BR0EsSUFEQW10RCxNQUFBdDhDLEVBQUE3USxNQUNBK0UsRUFBQS9FLEdBQ0FtdEQsRUFBQXBvRCxHQUFBZSxFQUFBZixHQUVBLE9BQUFvb0QsRUFhQSxTQUFBOFgsR0FBQW4vRCxFQUFBYyxFQUFBNUksRUFBQXduRSxHQUNBLElBQUE4TyxHQUFBdDJFLEVBQ0FBLFVBS0EsSUFIQSxJQUFBK0csR0FBQSxFQUNBL0UsRUFBQTRHLEVBQUE1RyxTQUVBK0UsRUFBQS9FLEdBQUEsQ0FDQSxJQUFBMEMsRUFBQWtFLEVBQUE3QixHQUVBdXBFLEVBQUE5SSxFQUNBQSxFQUFBeG5FLEVBQUEwRSxHQUFBb0QsRUFBQXBELEtBQUExRSxFQUFBOEgsR0FDQWpDLEVBRUF5cUUsSUFBQXpxRSxJQUNBeXFFLEVBQUF4b0UsRUFBQXBELElBRUE0eEUsRUFDQTVQLEdBQUExbUUsRUFBQTBFLEVBQUE0ckUsR0FFQTNKLEdBQUEzbUUsRUFBQTBFLEVBQUE0ckUsR0FHQSxPQUFBdHdFLEVBbUNBLFNBQUF1MkUsR0FBQW5uQixFQUFBb25CLEdBQ0EsZ0JBQUE5bEIsRUFBQXJCLEdBQ0EsSUFBQS9NLEVBQUFydEMsR0FBQXk3QyxHQUFBeEIsR0FBQTRYLEdBQ0F4WCxFQUFBa25CLFNBRUEsT0FBQWwwQixFQUFBb08sRUFBQXRCLEVBQUE0aEIsR0FBQTNoQixFQUFBLEdBQUFDLElBV0EsU0FBQW1uQixHQUFBQyxHQUNBLE9BQUF4RSxHQUFBLFNBQUFseUUsRUFBQTZILEdBQ0EsSUFBQWQsR0FBQSxFQUNBL0UsRUFBQTZGLEVBQUE3RixPQUNBd2xFLEVBQUF4bEUsRUFBQSxFQUFBNkYsRUFBQTdGLEVBQUEsR0FBQTZELEVBQ0E4d0UsRUFBQTMwRSxFQUFBLEVBQUE2RixFQUFBLEdBQUFoQyxFQVdBLElBVEEyaEUsRUFBQWtQLEVBQUExMEUsT0FBQSxzQkFBQXdsRSxHQUNBeGxFLElBQUF3bEUsR0FDQTNoRSxFQUVBOHdFLEdBQUFDLEdBQUEvdUUsRUFBQSxHQUFBQSxFQUFBLEdBQUE4dUUsS0FDQW5QLEVBQUF4bEUsRUFBQSxFQUFBNkQsRUFBQTJoRSxFQUNBeGxFLEVBQUEsR0FFQWhDLEVBQUFULEdBQUFTLEtBQ0ErRyxFQUFBL0UsR0FBQSxDQUNBLElBQUE4RixFQUFBRCxFQUFBZCxHQUNBZSxHQUNBNHVFLEVBQUExMkUsRUFBQThILEVBQUFmLEVBQUF5Z0UsR0FHQSxPQUFBeG5FLElBWUEsU0FBQXVxRSxHQUFBNVosRUFBQUcsR0FDQSxnQkFBQUosRUFBQXJCLEdBQ0EsU0FBQXFCLEVBQ0EsT0FBQUEsRUFFQSxJQUFBbWYsR0FBQW5mLEdBQ0EsT0FBQUMsRUFBQUQsRUFBQXJCLEdBTUEsSUFKQSxJQUFBcnRELEVBQUEwdUQsRUFBQTF1RCxPQUNBK0UsRUFBQStwRCxFQUFBOXVELEdBQUEsRUFDQTYwRSxFQUFBdDNFLEdBQUFteEQsSUFFQUksRUFBQS9wRCxRQUFBL0UsS0FDQSxJQUFBcXRELEVBQUF3bkIsRUFBQTl2RSxLQUFBOHZFLEtBSUEsT0FBQW5tQixHQVdBLFNBQUEwYSxHQUFBdGEsR0FDQSxnQkFBQTl3RCxFQUFBcXZELEVBQUF3YyxHQU1BLElBTEEsSUFBQTlrRSxHQUFBLEVBQ0E4dkUsRUFBQXQzRSxHQUFBUyxHQUNBNEksRUFBQWlqRSxFQUFBN3JFLEdBQ0FnQyxFQUFBNEcsRUFBQTVHLE9BRUFBLEtBQUEsQ0FDQSxJQUFBMEMsRUFBQWtFLEVBQUFrb0QsRUFBQTl1RCxJQUFBK0UsR0FDQSxRQUFBc29ELEVBQUF3bkIsRUFBQW55RSxLQUFBbXlFLEdBQ0EsTUFHQSxPQUFBNzJFLEdBZ0NBLFNBQUE4MkUsR0FBQUMsR0FDQSxnQkFBQTFZLEdBR0EsSUFBQTFNLEVBQUF5TSxHQUZBQyxFQUFBOTJELEdBQUE4MkQsSUFHQVcsR0FBQVgsR0FDQXg0RCxFQUVBczRELEVBQUF4TSxFQUNBQSxFQUFBLEdBQ0EwTSxFQUFBM3dCLE9BQUEsR0FFQXNwQyxFQUFBcmxCLEVBQ0FzakIsR0FBQXRqQixFQUFBLEdBQUF4cUQsS0FBQSxJQUNBazNELEVBQUF2ckQsTUFBQSxHQUVBLE9BQUFxckQsRUFBQTRZLEtBQUFDLEdBV0EsU0FBQUMsR0FBQTEvQyxHQUNBLGdCQUFBOG1DLEdBQ0EsT0FBQWxPLEdBQUErbUIsR0FBQUMsR0FBQTlZLEdBQUFsOUMsUUFBQW1yQyxHQUFBLEtBQUEvMEIsRUFBQSxLQVlBLFNBQUE2L0MsR0FBQTNPLEdBQ0Esa0JBSUEsSUFBQTFzQixFQUFBLzZDLFVBQ0EsT0FBQSs2QyxFQUFBLzVDLFFBQ0Esa0JBQUF5bUUsRUFDQSxrQkFBQUEsRUFBQTFzQixFQUFBLElBQ0Esa0JBQUEwc0IsRUFBQTFzQixFQUFBLEdBQUFBLEVBQUEsSUFDQSxrQkFBQTBzQixFQUFBMXNCLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0Esa0JBQUEwc0IsRUFBQTFzQixFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0Esa0JBQUEwc0IsRUFBQTFzQixFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsSUFDQSxrQkFBQTBzQixFQUFBMXNCLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0Esa0JBQUEwc0IsRUFBQTFzQixFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBRUEsSUFBQXM3QixFQUFBcFQsR0FBQXdFLEVBQUF2b0UsV0FDQTZFLEVBQUEwakUsRUFBQTNuRSxNQUFBdTJFLEVBQUF0N0IsR0FJQSxPQUFBb29CLEdBQUFwL0QsS0FBQXN5RSxHQWdEQSxTQUFBQyxHQUFBQyxHQUNBLGdCQUFBN21CLEVBQUF4YSxFQUFBMmEsR0FDQSxJQUFBZ21CLEVBQUF0M0UsR0FBQW14RCxHQUNBLElBQUFtZixHQUFBbmYsR0FBQSxDQUNBLElBQUFyQixFQUFBMmhCLEdBQUE5NkIsRUFBQSxHQUNBd2EsRUFBQWxzRCxHQUFBa3NELEdBQ0F4YSxFQUFBLFNBQUF4eEMsR0FBcUMsT0FBQTJxRCxFQUFBd25CLEVBQUFueUUsS0FBQW15RSxJQUVyQyxJQUFBOXZFLEVBQUF3d0UsRUFBQTdtQixFQUFBeGEsRUFBQTJhLEdBQ0EsT0FBQTlwRCxHQUFBLEVBQUE4dkUsRUFBQXhuQixFQUFBcUIsRUFBQTNwRCxNQUFBbEIsR0FXQSxTQUFBMnhFLEdBQUExbUIsR0FDQSxPQUFBMm1CLEdBQUEsU0FBQUMsR0FDQSxJQUFBMTFFLEVBQUEwMUUsRUFBQTExRSxPQUNBK0UsRUFBQS9FLEVBQ0EyMUUsRUFBQTVULEdBQUE3akUsVUFBQTAzRSxLQUtBLElBSEE5bUIsR0FDQTRtQixFQUFBL1UsVUFFQTU3RCxLQUFBLENBQ0EsSUFBQXU3QyxFQUFBbzFCLEVBQUEzd0UsR0FDQSxzQkFBQXU3QyxFQUNBLFVBQUF0MEMsR0FBQTYyQyxHQUVBLEdBQUE4eUIsSUFBQUUsR0FBQSxXQUFBQyxHQUFBeDFCLEdBQ0EsSUFBQXUxQixFQUFBLElBQUE5VCxPQUFBLEdBSUEsSUFEQWg5RCxFQUFBOHdFLEVBQUE5d0UsRUFBQS9FLElBQ0ErRSxFQUFBL0UsR0FBQSxDQUdBLElBQUErMUUsRUFBQUQsR0FGQXgxQixFQUFBbzFCLEVBQUEzd0UsSUFHQTRULEVBQUEsV0FBQW85RCxFQUFBQyxHQUFBMTFCLEdBQUF6OEMsRUFNQWd5RSxFQUpBbDlELEdBQUFzOUQsR0FBQXQ5RCxFQUFBLEtBQ0FBLEVBQUEsS0FBQWtyQyxFQUFBSixFQUFBRSxFQUFBRyxLQUNBbnJDLEVBQUEsR0FBQTNZLFFBQUEsR0FBQTJZLEVBQUEsR0FFQWs5RCxFQUFBQyxHQUFBbjlELEVBQUEsS0FBQTdaLE1BQUErMkUsRUFBQWw5RCxFQUFBLElBRUEsR0FBQTJuQyxFQUFBdGdELFFBQUFpMkUsR0FBQTMxQixHQUNBdTFCLEVBQUFFLEtBQ0FGLEVBQUFELEtBQUF0MUIsR0FHQSxrQkFDQSxJQUFBdkcsRUFBQS82QyxVQUNBbkIsRUFBQWs4QyxFQUFBLEdBRUEsR0FBQTg3QixHQUFBLEdBQUE5N0IsRUFBQS81QyxRQUFBaVQsR0FBQXBWLEdBQ0EsT0FBQWc0RSxFQUFBSyxNQUFBcjRFLFdBS0EsSUFIQSxJQUFBa0gsRUFBQSxFQUNBaEMsRUFBQS9DLEVBQUEwMUUsRUFBQTN3RSxHQUFBakcsTUFBQUMsS0FBQWc3QyxHQUFBbDhDLElBRUFrSCxFQUFBL0UsR0FDQStDLEVBQUEyeUUsRUFBQTN3RSxHQUFBL0gsS0FBQStCLEtBQUFnRSxHQUVBLE9BQUFBLEtBd0JBLFNBQUFvekUsR0FBQTcxQixFQUFBaWxCLEVBQUF0WSxFQUFBdW1CLEVBQUFDLEVBQUEyQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUFDLEVBQUFsUixFQUFBMWhCLEVBQ0E2eUIsRUFBQW5SLEVBQUFqaUIsRUFDQXF6QixFQUFBcFIsRUFBQWhpQixFQUNBbXdCLEVBQUFuTyxHQUFBOWhCLEVBQUFDLEdBQ0FrekIsRUFBQXJSLEVBQUF4aEIsRUFDQTBpQixFQUFBa1EsRUFBQTl5RSxFQUFBdXhFLEdBQUE5MEIsR0E2Q0EsT0EzQ0EsU0FBQXUxQixJQUtBLElBSkEsSUFBQTcxRSxFQUFBaEIsVUFBQWdCLE9BQ0ErNUMsRUFBQWxwQyxFQUFBN1EsR0FDQStFLEVBQUEvRSxFQUVBK0UsS0FDQWcxQyxFQUFBaDFDLEdBQUEvRixVQUFBK0YsR0FFQSxHQUFBMnVFLEVBQ0EsSUFBQTdxRSxFQUFBZ3VFLEdBQUFoQixHQUNBaUIsRUF4Z0lBLFNBQUEzcEIsRUFBQXRrRCxHQUlBLElBSEEsSUFBQTdJLEVBQUFtdEQsRUFBQW50RCxPQUNBK0MsRUFBQSxFQUVBL0MsS0FDQW10RCxFQUFBbnRELEtBQUE2SSxLQUNBOUYsRUFHQSxPQUFBQSxFQSsvSEFnMEUsQ0FBQWg5QixFQUFBbHhDLEdBU0EsR0FQQTJxRSxJQUNBejVCLEVBQUF3NUIsR0FBQXg1QixFQUFBeTVCLEVBQUFDLEVBQUFDLElBRUEwQyxJQUNBcjhCLEVBQUFtNkIsR0FBQW42QixFQUFBcThCLEVBQUFDLEVBQUEzQyxJQUVBMXpFLEdBQUE4MkUsRUFDQXBELEdBQUExekUsRUFBQXcyRSxFQUFBLENBQ0EsSUFBQVEsRUFBQXZhLEdBQUExaUIsRUFBQWx4QyxHQUNBLE9BQUFvdUUsR0FDQTMyQixFQUFBaWxCLEVBQUE0USxHQUFBTixFQUFBaHRFLFlBQUFva0QsRUFDQWxULEVBQUFpOUIsRUFBQVYsRUFBQUMsRUFBQUMsRUFBQXgyRSxHQUdBLElBQUFxMUUsRUFBQXFCLEVBQUF6cEIsRUFBQWx1RCxLQUNBVCxFQUFBcTRFLEVBQUF0QixFQUFBLzBCLEtBY0EsT0FaQXRnRCxFQUFBKzVDLEVBQUEvNUMsT0FDQXMyRSxFQUNBdjhCLEVBODNDQSxTQUFBb1QsRUFBQTJpQixHQUtBLElBSkEsSUFBQW9ILEVBQUEvcEIsRUFBQW50RCxPQUNBQSxFQUFBc2dFLEdBQUF3UCxFQUFBOXZFLE9BQUFrM0UsR0FDQUMsRUFBQTlTLEdBQUFsWCxHQUVBbnRELEtBQUEsQ0FDQSxJQUFBK0UsRUFBQStxRSxFQUFBOXZFLEdBQ0FtdEQsRUFBQW50RCxHQUFBZ2tFLEdBQUFqL0QsRUFBQW15RSxHQUFBQyxFQUFBcHlFLEdBQUFsQixFQUVBLE9BQUFzcEQsRUF2NENBaXFCLENBQUFyOUIsRUFBQXU4QixHQUNTTSxHQUFBNTJFLEVBQUEsR0FDVCs1QyxFQUFBNG1CLFVBRUE4VixHQUFBRixFQUFBdjJFLElBQ0ErNUMsRUFBQS81QyxPQUFBdTJFLEdBRUF4M0UsYUFBQThzRCxJQUFBOXNELGdCQUFBODJFLElBQ0F2M0UsRUFBQW1vRSxHQUFBMk8sR0FBQTkyRSxJQUVBQSxFQUFBUSxNQUFBdTJFLEVBQUF0N0IsSUFhQSxTQUFBczlCLEdBQUFqcUIsRUFBQWtxQixHQUNBLGdCQUFBdDVFLEVBQUFxdkQsR0FDQSxPQTU5REEsU0FBQXJ2RCxFQUFBb3ZELEVBQUFDLEVBQUFDLEdBSUEsT0FIQWtiLEdBQUF4cUUsRUFBQSxTQUFBSCxFQUFBNkUsRUFBQTFFLEdBQ0FvdkQsRUFBQUUsRUFBQUQsRUFBQXh2RCxHQUFBNkUsRUFBQTFFLEtBRUFzdkQsRUF3OURBaXFCLENBQUF2NUUsRUFBQW92RCxFQUFBa3FCLEVBQUFqcUIsUUFZQSxTQUFBbXFCLEdBQUFDLEVBQUFqdkUsR0FDQSxnQkFBQTNLLEVBQUF3c0UsR0FDQSxJQUFBdG5FLEVBQ0EsR0FBQWxGLElBQUFnRyxHQUFBd21FLElBQUF4bUUsRUFDQSxPQUFBMkUsRUFLQSxHQUhBM0ssSUFBQWdHLElBQ0FkLEVBQUFsRixHQUVBd3NFLElBQUF4bUUsRUFBQSxDQUNBLEdBQUFkLElBQUFjLEVBQ0EsT0FBQXdtRSxFQUVBLGlCQUFBeHNFLEdBQUEsaUJBQUF3c0UsR0FDQXhzRSxFQUFBazBFLEdBQUFsMEUsR0FDQXdzRSxFQUFBMEgsR0FBQTFILEtBRUF4c0UsRUFBQWkwRSxHQUFBajBFLEdBQ0F3c0UsRUFBQXlILEdBQUF6SCxJQUVBdG5FLEVBQUEwMEUsRUFBQTU1RSxFQUFBd3NFLEdBRUEsT0FBQXRuRSxHQVdBLFNBQUEyMEUsR0FBQUMsR0FDQSxPQUFBbEMsR0FBQSxTQUFBM0csR0FFQSxPQURBQSxFQUFBOWdCLEdBQUE4Z0IsRUFBQXZmLEdBQUF5ZixPQUNBa0IsR0FBQSxTQUFBbjJCLEdBQ0EsSUFBQWtULEVBQUFsdUQsS0FDQSxPQUFBNDRFLEVBQUE3SSxFQUFBLFNBQUF6aEIsR0FDQSxPQUFBdnVELEdBQUF1dUQsRUFBQUosRUFBQWxULFNBZUEsU0FBQTY5QixHQUFBNTNFLEVBQUE2M0UsR0FHQSxJQUFBQyxHQUZBRCxNQUFBaDBFLEVBQUEsSUFBQWt1RSxHQUFBOEYsSUFFQTczRSxPQUNBLEdBQUE4M0UsRUFBQSxFQUNBLE9BQUFBLEVBQUE3SCxHQUFBNEgsRUFBQTczRSxHQUFBNjNFLEVBRUEsSUFBQTkwRSxFQUFBa3RFLEdBQUE0SCxFQUFBcFksR0FBQXovRCxFQUFBNjhELEdBQUFnYixLQUNBLE9BQUF6YixHQUFBeWIsR0FDQTVFLEdBQUFqVyxHQUFBajZELEdBQUEsRUFBQS9DLEdBQUFtRixLQUFBLElBQ0FwQyxFQUFBK04sTUFBQSxFQUFBOVEsR0E2Q0EsU0FBQWl3QyxHQUFBNmUsR0FDQSxnQkFBQXA5QixFQUFBRSxFQUFBbW1ELEdBYUEsT0FaQUEsR0FBQSxpQkFBQUEsR0FBQW5ELEdBQUFsakQsRUFBQUUsRUFBQW1tRCxLQUNBbm1ELEVBQUFtbUQsRUFBQWwwRSxHQUdBNnRCLEVBQUFzbUQsR0FBQXRtRCxHQUNBRSxJQUFBL3RCLEdBQ0ErdEIsRUFBQUYsRUFDQUEsRUFBQSxHQUVBRSxFQUFBb21ELEdBQUFwbUQsR0FyN0NBLFNBQUFGLEVBQUFFLEVBQUFtbUQsRUFBQWpwQixHQUtBLElBSkEsSUFBQS9wRCxHQUFBLEVBQ0EvRSxFQUFBb2dFLEdBQUFYLElBQUE3dEMsRUFBQUYsSUFBQXFtRCxHQUFBLE9BQ0FoMUUsRUFBQThOLEVBQUE3USxHQUVBQSxLQUNBK0MsRUFBQStyRCxFQUFBOXVELElBQUErRSxHQUFBMnNCLEVBQ0FBLEdBQUFxbUQsRUFFQSxPQUFBaDFFLEVBKzZDQWsxRSxDQUFBdm1ELEVBQUFFLEVBREFtbUQsTUFBQWwwRSxFQUFBNnRCLEVBQUFFLEVBQUEsS0FBQW9tRCxHQUFBRCxHQUNBanBCLElBV0EsU0FBQW9wQixHQUFBVCxHQUNBLGdCQUFBNTVFLEVBQUF3c0UsR0FLQSxNQUpBLGlCQUFBeHNFLEdBQUEsaUJBQUF3c0UsSUFDQXhzRSxFQUFBczZFLEdBQUF0NkUsR0FDQXdzRSxFQUFBOE4sR0FBQTlOLElBRUFvTixFQUFBNTVFLEVBQUF3c0UsSUFxQkEsU0FBQTRNLEdBQUEzMkIsRUFBQWlsQixFQUFBNlMsRUFBQXZ2RSxFQUFBb2tELEVBQUF1bUIsRUFBQUMsRUFBQTZDLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQTZCLEVBQUE5UyxFQUFBOWhCLEVBTUE4aEIsR0FBQThTLEVBQUExMEIsRUFBQUMsR0FDQTJoQixLQUFBOFMsRUFBQXowQixFQUFBRCxJQUVBSCxJQUNBK2hCLEtBQUFqaUIsRUFBQUMsSUFFQSxJQUFBKzBCLEdBQ0FoNEIsRUFBQWlsQixFQUFBdFksRUFWQW9yQixFQUFBN0UsRUFBQTN2RSxFQUZBdzBFLEVBQUE1RSxFQUFBNXZFLEVBR0F3MEUsRUFBQXgwRSxFQUFBMnZFLEVBRkE2RSxFQUFBeDBFLEVBQUE0dkUsRUFZQTZDLEVBQUFDLEVBQUFDLEdBR0F6ekUsRUFBQXExRSxFQUFBdDVFLE1BQUErRSxFQUFBeTBFLEdBS0EsT0FKQXJDLEdBQUEzMUIsSUFDQWk0QixHQUFBeDFFLEVBQUF1MUUsR0FFQXYxRSxFQUFBOEYsY0FDQTJ2RSxHQUFBejFFLEVBQUF1OUMsRUFBQWlsQixHQVVBLFNBQUFrVCxHQUFBMUQsR0FDQSxJQUFBejBCLEVBQUE3ckMsR0FBQXNnRSxHQUNBLGdCQUFBNTRELEVBQUF1OEQsR0FHQSxHQUZBdjhELEVBQUFnOEQsR0FBQWg4RCxHQUNBdThELEVBQUEsTUFBQUEsRUFBQSxFQUFBcFksR0FBQXFZLEdBQUFELEdBQUEsS0FDQSxDQUdBLElBQUFFLEdBQUFyekUsR0FBQTRXLEdBQUEsS0FBQTFRLE1BQUEsS0FJQSxTQURBbXRFLEdBQUFyekUsR0FGQSs2QyxFQUFBczRCLEVBQUEsU0FBQUEsRUFBQSxHQUFBRixLQUVBLEtBQUFqdEUsTUFBQSxNQUNBLFNBQUFtdEUsRUFBQSxHQUFBRixJQUVBLE9BQUFwNEIsRUFBQW5rQyxJQVdBLElBQUE4MUQsR0FBQXA5QyxJQUFBLEVBQUE4bkMsR0FBQSxJQUFBOW5DLElBQUEsV0FBQXl2QixFQUFBLFNBQUE0SixHQUNBLFdBQUFyNUIsR0FBQXE1QixJQURBMnFCLEdBV0EsU0FBQUMsR0FBQWpQLEdBQ0EsZ0JBQUE3ckUsR0FDQSxJQUFBOFcsRUFBQSt3RCxHQUFBN25FLEdBQ0EsT0FBQThXLEdBQUF5d0MsRUFDQStXLEdBQUF0K0QsR0FFQThXLEdBQUErd0MsR0FDQStXLEdBQUE1K0QsR0F2NElBLFNBQUFBLEVBQUE0SSxHQUNBLE9BQUFvbkQsR0FBQXBuRCxFQUFBLFNBQUFsRSxHQUNBLE9BQUFBLEVBQUExRSxFQUFBMEUsTUF1NElBcTJFLENBQUEvNkUsRUFBQTZyRSxFQUFBN3JFLEtBNkJBLFNBQUFnN0UsR0FBQTE0QixFQUFBaWxCLEVBQUF0WSxFQUFBdW1CLEVBQUFDLEVBQUE2QyxFQUFBQyxFQUFBQyxHQUNBLElBQUFHLEVBQUFwUixFQUFBaGlCLEVBQ0EsSUFBQW96QixHQUFBLG1CQUFBcjJCLEVBQ0EsVUFBQXQwQyxHQUFBNjJDLEdBRUEsSUFBQTdpRCxFQUFBd3pFLElBQUF4ekUsT0FBQSxFQVNBLEdBUkFBLElBQ0F1bEUsS0FBQTVoQixFQUFBQyxHQUNBNHZCLEVBQUFDLEVBQUE1dkUsR0FFQTB5RSxNQUFBMXlFLEVBQUEweUUsRUFBQW5XLEdBQUF1WSxHQUFBcEMsR0FBQSxHQUNBQyxNQUFBM3lFLEVBQUEyeUUsRUFBQW1DLEdBQUFuQyxHQUNBeDJFLEdBQUF5ekUsSUFBQXp6RSxPQUFBLEVBRUF1bEUsRUFBQTNoQixFQUFBLENBQ0EsSUFBQXd5QixFQUFBNUMsRUFDQTZDLEVBQUE1QyxFQUVBRCxFQUFBQyxFQUFBNXZFLEVBRUEsSUFBQThVLEVBQUFnK0QsRUFBQTl5RSxFQUFBbXlFLEdBQUExMUIsR0FFQWc0QixHQUNBaDRCLEVBQUFpbEIsRUFBQXRZLEVBQUF1bUIsRUFBQUMsRUFBQTJDLEVBQUFDLEVBQ0FDLEVBQUFDLEVBQUFDLEdBa0JBLEdBZkE3OUQsR0F5NkJBLFNBQUFBLEVBQUE3UyxHQUNBLElBQUF5L0QsRUFBQTVzRCxFQUFBLEdBQ0FzZ0UsRUFBQW56RSxFQUFBLEdBQ0FvekUsRUFBQTNULEVBQUEwVCxFQUNBdFIsRUFBQXVSLEdBQUE1MUIsRUFBQUMsRUFBQU0sR0FFQXMxQixFQUNBRixHQUFBcDFCLEdBQUEwaEIsR0FBQTloQixHQUNBdzFCLEdBQUFwMUIsR0FBQTBoQixHQUFBemhCLEdBQUFuckMsRUFBQSxHQUFBM1ksUUFBQThGLEVBQUEsSUFDQW16RSxJQUFBcDFCLEVBQUFDLElBQUFoK0MsRUFBQSxHQUFBOUYsUUFBQThGLEVBQUEsSUFBQXkvRCxHQUFBOWhCLEVBR0EsSUFBQWtrQixJQUFBd1IsRUFDQSxPQUFBeGdFLEVBR0FzZ0UsRUFBQTMxQixJQUNBM3FDLEVBQUEsR0FBQTdTLEVBQUEsR0FFQW96RSxHQUFBM1QsRUFBQWppQixFQUFBLEVBQUFFLEdBR0EsSUFBQTNsRCxFQUFBaUksRUFBQSxHQUNBLEdBQUFqSSxFQUFBLENBQ0EsSUFBQTIxRSxFQUFBNzZELEVBQUEsR0FDQUEsRUFBQSxHQUFBNjZELEVBQUFELEdBQUFDLEVBQUEzMUUsRUFBQWlJLEVBQUEsSUFBQWpJLEVBQ0E4YSxFQUFBLEdBQUE2NkQsRUFBQS9XLEdBQUE5akQsRUFBQSxHQUFBcXFDLEdBQUFsOUMsRUFBQSxJQUdBakksRUFBQWlJLEVBQUEsTUFFQTB0RSxFQUFBNzZELEVBQUEsR0FDQUEsRUFBQSxHQUFBNjZELEVBQUFVLEdBQUFWLEVBQUEzMUUsRUFBQWlJLEVBQUEsSUFBQWpJLEVBQ0E4YSxFQUFBLEdBQUE2NkQsRUFBQS9XLEdBQUE5akQsRUFBQSxHQUFBcXFDLEdBQUFsOUMsRUFBQSxLQUdBakksRUFBQWlJLEVBQUEsTUFFQTZTLEVBQUEsR0FBQTlhLEdBR0FvN0UsRUFBQXAxQixJQUNBbHJDLEVBQUEsU0FBQUEsRUFBQSxHQUFBN1MsRUFBQSxHQUFBdzZELEdBQUEzbkQsRUFBQSxHQUFBN1MsRUFBQSxLQUdBLE1BQUE2UyxFQUFBLEtBQ0FBLEVBQUEsR0FBQTdTLEVBQUEsSUFHQTZTLEVBQUEsR0FBQTdTLEVBQUEsR0FDQTZTLEVBQUEsR0FBQXVnRSxFQTE5QkFFLENBQUFkLEVBQUEzL0QsR0FFQTJuQyxFQUFBZzRCLEVBQUEsR0FDQS9TLEVBQUErUyxFQUFBLEdBQ0FyckIsRUFBQXFyQixFQUFBLEdBQ0E5RSxFQUFBOEUsRUFBQSxHQUNBN0UsRUFBQTZFLEVBQUEsS0FDQTlCLEVBQUE4QixFQUFBLEdBQUFBLEVBQUEsS0FBQXowRSxFQUNBOHlFLEVBQUEsRUFBQXIyQixFQUFBdGdELE9BQ0FvZ0UsR0FBQWtZLEVBQUEsR0FBQXQ0RSxFQUFBLEtBRUF1bEUsR0FBQTloQixFQUFBQyxLQUNBNmhCLEtBQUE5aEIsRUFBQUMsSUFFQTZoQixNQUFBamlCLEVBR0F2Z0QsRUFET3dpRSxHQUFBOWhCLEdBQUE4aEIsR0FBQTdoQixFQXBnQlAsU0FBQXBELEVBQUFpbEIsRUFBQWlSLEdBQ0EsSUFBQS9QLEVBQUEyTyxHQUFBOTBCLEdBd0JBLE9BdEJBLFNBQUF1MUIsSUFNQSxJQUxBLElBQUE3MUUsRUFBQWhCLFVBQUFnQixPQUNBKzVDLEVBQUFscEMsRUFBQTdRLEdBQ0ErRSxFQUFBL0UsRUFDQTZJLEVBQUFndUUsR0FBQWhCLEdBRUE5d0UsS0FDQWcxQyxFQUFBaDFDLEdBQUEvRixVQUFBK0YsR0FFQSxJQUFBMHVFLEVBQUF6ekUsRUFBQSxHQUFBKzVDLEVBQUEsS0FBQWx4QyxHQUFBa3hDLEVBQUEvNUMsRUFBQSxLQUFBNkksS0FFQTR6RCxHQUFBMWlCLEVBQUFseEMsR0FHQSxPQURBN0ksR0FBQXl6RSxFQUFBenpFLFFBQ0F3MkUsRUFDQVMsR0FDQTMyQixFQUFBaWxCLEVBQUE0USxHQUFBTixFQUFBaHRFLFlBQUFoRixFQUNBazJDLEVBQUEwNUIsRUFBQTV2RSxJQUFBMnlFLEVBQUF4MkUsR0FHQWxCLEdBREFDLGFBQUE4c0QsSUFBQTlzRCxnQkFBQTgyRSxFQUFBcFAsRUFBQW5tQixFQUNBdmhELEtBQUFnN0MsSUE4ZUFzL0IsQ0FBQS80QixFQUFBaWxCLEVBQUFpUixHQUNPalIsR0FBQTVoQixHQUFBNGhCLElBQUFqaUIsRUFBQUssSUFBQTh2QixFQUFBenpFLE9BR1BtMkUsR0FBQXIzRSxNQUFBK0UsRUFBQXkwRSxHQTlPQSxTQUFBaDRCLEVBQUFpbEIsRUFBQXRZLEVBQUF1bUIsR0FDQSxJQUFBa0QsRUFBQW5SLEVBQUFqaUIsRUFDQW1qQixFQUFBMk8sR0FBQTkwQixHQWtCQSxPQWhCQSxTQUFBdTFCLElBUUEsSUFQQSxJQUFBbEMsR0FBQSxFQUNBQyxFQUFBNTBFLFVBQUFnQixPQUNBOHpFLEdBQUEsRUFDQUMsRUFBQVAsRUFBQXh6RSxPQUNBKzVDLEVBQUFscEMsRUFBQWtqRSxFQUFBSCxHQUNBdDFFLEVBQUFTLGFBQUE4c0QsSUFBQTlzRCxnQkFBQTgyRSxFQUFBcFAsRUFBQW5tQixJQUVBd3pCLEVBQUFDLEdBQ0FoNkIsRUFBQSs1QixHQUFBTixFQUFBTSxHQUVBLEtBQUFGLEtBQ0E3NUIsRUFBQSs1QixLQUFBOTBFLFlBQUEyMEUsR0FFQSxPQUFBNzBFLEdBQUFSLEVBQUFvNEUsRUFBQXpwQixFQUFBbHVELEtBQUFnN0MsSUEwTkF1L0IsQ0FBQWg1QixFQUFBaWxCLEVBQUF0WSxFQUFBdW1CLFFBSkEsSUFBQXp3RSxFQWhtQkEsU0FBQXU5QyxFQUFBaWxCLEVBQUF0WSxHQUNBLElBQUF5cEIsRUFBQW5SLEVBQUFqaUIsRUFDQW1qQixFQUFBMk8sR0FBQTkwQixHQU1BLE9BSkEsU0FBQXUxQixJQUVBLE9BREE5MkUsYUFBQThzRCxJQUFBOXNELGdCQUFBODJFLEVBQUFwUCxFQUFBbm1CLEdBQ0F4aEQsTUFBQTQzRSxFQUFBenBCLEVBQUFsdUQsS0FBQUMsWUEwbEJBdTZFLENBQUFqNUIsRUFBQWlsQixFQUFBdFksR0FTQSxPQUFBdXJCLElBREE3L0QsRUFBQTYzRCxHQUFBK0gsSUFDQXgxRSxFQUFBdTFFLEdBQUFoNEIsRUFBQWlsQixHQWVBLFNBQUFpVSxHQUFBNVUsRUFBQW9JLEVBQUF0cUUsRUFBQTFFLEdBQ0EsT0FBQTRtRSxJQUFBL2dFLEdBQ0E0Z0UsR0FBQUcsRUFBQTVHLEdBQUF0N0QsTUFBQXZFLEdBQUFuQixLQUFBZ0IsRUFBQTBFLEdBQ0FzcUUsRUFFQXBJLEVBaUJBLFNBQUE2VSxHQUFBN1UsRUFBQW9JLEVBQUF0cUUsRUFBQTFFLEVBQUE4SCxFQUFBODBCLEdBT0EsT0FOQXVuQyxHQUFBeUMsSUFBQXpDLEdBQUE2SyxLQUVBcHlDLEVBQUF4ZCxJQUFBNHZELEVBQUFwSSxHQUNBdUosR0FBQXZKLEVBQUFvSSxFQUFBbnBFLEVBQUE0MUUsR0FBQTcrQyxHQUNBQSxFQUFBLE9BQUFveUMsSUFFQXBJLEVBWUEsU0FBQThVLEdBQUE3N0UsR0FDQSxPQUFBNHdFLEdBQUE1d0UsR0FBQWdHLEVBQUFoRyxFQWdCQSxTQUFBOHRFLEdBQUF4ZSxFQUFBa2QsRUFBQTlFLEVBQUFDLEVBQUEyRixFQUFBdndDLEdBQ0EsSUFBQWt4QyxFQUFBdkcsRUFBQW5pQixFQUNBOHpCLEVBQUEvcEIsRUFBQW50RCxPQUNBMHFFLEVBQUFMLEVBQUFycUUsT0FFQSxHQUFBazNFLEdBQUF4TSxLQUFBb0IsR0FBQXBCLEVBQUF3TSxHQUNBLFNBR0EsSUFBQWhRLEVBQUF0c0MsRUFBQWo5QixJQUFBd3ZELEdBQ0EsR0FBQStaLEdBQUF0c0MsRUFBQWo5QixJQUFBMHNFLEdBQ0EsT0FBQW5ELEdBQUFtRCxFQUVBLElBQUF0bEUsR0FBQSxFQUNBaEMsR0FBQSxFQUNBK25FLEVBQUF2RixFQUFBbGlCLEVBQUEsSUFBQWdnQixHQUFBeC9ELEVBTUEsSUFKQSsyQixFQUFBeGQsSUFBQSt2QyxFQUFBa2QsR0FDQXp2QyxFQUFBeGQsSUFBQWl0RCxFQUFBbGQsS0FHQXBvRCxFQUFBbXlFLEdBQUEsQ0FDQSxJQUFBeUMsRUFBQXhzQixFQUFBcG9ELEdBQ0F3bkUsRUFBQWxDLEVBQUF0bEUsR0FFQSxHQUFBeWdFLEVBQ0EsSUFBQWdILEVBQUFWLEVBQ0F0RyxFQUFBK0csRUFBQW9OLEVBQUE1MEUsRUFBQXNsRSxFQUFBbGQsRUFBQXZ5QixHQUNBNHFDLEVBQUFtVSxFQUFBcE4sRUFBQXhuRSxFQUFBb29ELEVBQUFrZCxFQUFBenZDLEdBRUEsR0FBQTR4QyxJQUFBM29FLEVBQUEsQ0FDQSxHQUFBMm9FLEVBQ0EsU0FFQXpwRSxHQUFBLEVBQ0EsTUFHQSxHQUFBK25FLEdBQ0EsSUFBQXhjLEdBQUErYixFQUFBLFNBQUFrQyxFQUFBNUIsR0FDQSxJQUFBbGIsR0FBQXFiLEVBQUFILEtBQ0FnUCxJQUFBcE4sR0FBQXBCLEVBQUF3TyxFQUFBcE4sRUFBQWhILEVBQUFDLEVBQUE1cUMsSUFDQSxPQUFBa3dDLEVBQUF2cUUsS0FBQW9xRSxLQUVlLENBQ2Y1bkUsR0FBQSxFQUNBLFlBRVMsR0FDVDQyRSxJQUFBcE4sSUFDQXBCLEVBQUF3TyxFQUFBcE4sRUFBQWhILEVBQUFDLEVBQUE1cUMsR0FDQSxDQUNBNzNCLEdBQUEsRUFDQSxPQUtBLE9BRkE2M0IsRUFBQSxPQUFBdXlCLEdBQ0F2eUIsRUFBQSxPQUFBeXZDLEdBQ0F0bkUsRUF5S0EsU0FBQTB5RSxHQUFBbjFCLEdBQ0EsT0FBQTZ2QixHQUFBQyxHQUFBOXZCLEVBQUF6OEMsRUFBQSsxRSxJQUFBdDVCLEVBQUEsSUFVQSxTQUFBK21CLEdBQUFycEUsR0FDQSxPQUFBNHJFLEdBQUE1ckUsRUFBQXdFLEdBQUE2akUsSUFXQSxTQUFBZSxHQUFBcHBFLEdBQ0EsT0FBQTRyRSxHQUFBNXJFLEVBQUFtb0UsR0FBQUYsSUFVQSxJQUFBK1AsR0FBQWhWLEdBQUEsU0FBQTFnQixHQUNBLE9BQUEwZ0IsR0FBQXJqRSxJQUFBMmlELElBREF1NEIsR0FXQSxTQUFBL0MsR0FBQXgxQixHQUtBLElBSkEsSUFBQXY5QyxFQUFBdTlDLEVBQUFsakQsS0FBQSxHQUNBK3ZELEVBQUE4VCxHQUFBbCtELEdBQ0EvQyxFQUFBN0IsR0FBQW5CLEtBQUFpa0UsR0FBQWwrRCxHQUFBb3FELEVBQUFudEQsT0FBQSxFQUVBQSxLQUFBLENBQ0EsSUFBQTJZLEVBQUF3MEMsRUFBQW50RCxHQUNBNjVFLEVBQUFsaEUsRUFBQTJuQyxLQUNBLFNBQUF1NUIsTUFBQXY1QixFQUNBLE9BQUEzbkMsRUFBQXZiLEtBR0EsT0FBQTJGLEVBVUEsU0FBQTh6RSxHQUFBdjJCLEdBRUEsT0FEQW5pRCxHQUFBbkIsS0FBQTRrRSxHQUFBLGVBQUFBLEdBQUF0aEIsR0FDQXozQyxZQWNBLFNBQUFtbUUsS0FDQSxJQUFBanNFLEVBQUE2K0QsR0FBQXZVLGFBRUEsT0FEQXRxRCxNQUFBc3FELEdBQUE2ZixHQUFBbnFFLEVBQ0EvRCxVQUFBZ0IsT0FBQStDLEVBQUEvRCxVQUFBLEdBQUFBLFVBQUEsSUFBQStELEVBV0EsU0FBQXNsRSxHQUFBN2lFLEVBQUE5QyxHQUNBLElBZ1lBN0UsRUFDQXdFLEVBallBc1csRUFBQW5ULEVBQUE4OUQsU0FDQSxPQWlZQSxXQURBamhFLFNBREF4RSxFQS9YQTZFLEtBaVlBLFVBQUFMLEdBQUEsVUFBQUEsR0FBQSxXQUFBQSxFQUNBLGNBQUF4RSxFQUNBLE9BQUFBLEdBbFlBOGEsRUFBQSxpQkFBQWpXLEVBQUEsaUJBQ0FpVyxFQUFBblQsSUFVQSxTQUFBc29FLEdBQUE5dkUsR0FJQSxJQUhBLElBQUErRSxFQUFBUCxHQUFBeEUsR0FDQWdDLEVBQUErQyxFQUFBL0MsT0FFQUEsS0FBQSxDQUNBLElBQUEwQyxFQUFBSyxFQUFBL0MsR0FDQW5DLEVBQUFHLEVBQUEwRSxHQUVBSyxFQUFBL0MsSUFBQTBDLEVBQUE3RSxFQUFBb3dFLEdBQUFwd0UsSUFFQSxPQUFBa0YsRUFXQSxTQUFBczhELEdBQUFyaEUsRUFBQTBFLEdBQ0EsSUFBQTdFLEVBandKQSxTQUFBRyxFQUFBMEUsR0FDQSxhQUFBMUUsRUFBQTZGLEVBQUE3RixFQUFBMEUsR0Fnd0pBMmEsQ0FBQXJmLEVBQUEwRSxHQUNBLE9BQUF1cUUsR0FBQXB2RSxLQUFBZ0csRUFxQ0EsSUFBQXdpRSxHQUFBeEcsR0FBQSxTQUFBN2hFLEdBQ0EsYUFBQUEsTUFHQUEsRUFBQVQsR0FBQVMsR0FDQTB2RCxHQUFBbVMsR0FBQTdoRSxHQUFBLFNBQUF1b0UsR0FDQSxPQUFBdDdELEdBQUFqTyxLQUFBZ0IsRUFBQXVvRSxPQU5BdVQsR0FpQkE3VCxHQUFBcEcsR0FBQSxTQUFBN2hFLEdBRUEsSUFEQSxJQUFBK0UsS0FDQS9FLEdBQ0Fpd0QsR0FBQWxyRCxFQUFBc2pFLEdBQUFyb0UsSUFDQUEsRUFBQThnRSxHQUFBOWdFLEdBRUEsT0FBQStFLEdBTkErMkUsR0FnQkFqVSxHQUFBa0UsR0EyRUEsU0FBQWdRLEdBQUEvN0UsRUFBQXlyRSxFQUFBdVEsR0FPQSxJQUpBLElBQUFqMUUsR0FBQSxFQUNBL0UsR0FIQXlwRSxFQUFBQyxHQUFBRCxFQUFBenJFLElBR0FnQyxPQUNBK0MsR0FBQSxJQUVBZ0MsRUFBQS9FLEdBQUEsQ0FDQSxJQUFBMEMsRUFBQWluRSxHQUFBRixFQUFBMWtFLElBQ0EsS0FBQWhDLEVBQUEsTUFBQS9FLEdBQUFnOEUsRUFBQWg4RSxFQUFBMEUsSUFDQSxNQUVBMUUsSUFBQTBFLEdBRUEsT0FBQUssS0FBQWdDLEdBQUEvRSxFQUNBK0MsS0FFQS9DLEVBQUEsTUFBQWhDLEVBQUEsRUFBQUEsRUFBQWdDLFNBQ0FpNkUsR0FBQWo2RSxJQUFBZ2tFLEdBQUF0aEUsRUFBQTFDLEtBQ0FpVCxHQUFBalYsSUFBQTRsRSxHQUFBNWxFLElBNkJBLFNBQUFnb0UsR0FBQWhvRSxHQUNBLHlCQUFBQSxFQUFBeVYsYUFBQTg1RCxHQUFBdnZFLE1BQ0Fpa0UsR0FBQW5ELEdBQUE5Z0UsSUE4RUEsU0FBQWtyRSxHQUFBcnJFLEdBQ0EsT0FBQW9WLEdBQUFwVixJQUFBK2xFLEdBQUEvbEUsT0FDQW1oRSxJQUFBbmhFLEtBQUFtaEUsS0FXQSxTQUFBZ0YsR0FBQW5tRSxFQUFBbUMsR0FDQSxJQUFBcUMsU0FBQXhFLEVBR0EsU0FGQW1DLEVBQUEsTUFBQUEsRUFBQXVrRCxFQUFBdmtELEtBR0EsVUFBQXFDLEdBQ0EsVUFBQUEsR0FBQXVtRCxHQUFBdG9DLEtBQUF6aUIsS0FDQUEsR0FBQSxHQUFBQSxFQUFBLE1BQUFBLEVBQUFtQyxFQWFBLFNBQUE0MEUsR0FBQS8yRSxFQUFBa0gsRUFBQS9HLEdBQ0EsSUFBQW1rRSxHQUFBbmtFLEdBQ0EsU0FFQSxJQUFBcUUsU0FBQTBDLEVBQ0EsbUJBQUExQyxFQUNBd3JFLEdBQUE3dkUsSUFBQWdtRSxHQUFBai9ELEVBQUEvRyxFQUFBZ0MsUUFDQSxVQUFBcUMsR0FBQTBDLEtBQUEvRyxJQUVBeW1FLEdBQUF6bUUsRUFBQStHLEdBQUFsSCxHQWFBLFNBQUFtd0UsR0FBQW53RSxFQUFBRyxHQUNBLEdBQUFpVixHQUFBcFYsR0FDQSxTQUVBLElBQUF3RSxTQUFBeEUsRUFDQSxrQkFBQXdFLEdBQUEsVUFBQUEsR0FBQSxXQUFBQSxHQUNBLE1BQUF4RSxJQUFBZ3JFLEdBQUFockUsS0FHQTZwRCxHQUFBcG5DLEtBQUF6aUIsS0FBQTRwRCxHQUFBbm5DLEtBQUF6aUIsSUFDQSxNQUFBRyxHQUFBSCxLQUFBTixHQUFBUyxHQXlCQSxTQUFBaTRFLEdBQUEzMUIsR0FDQSxJQUFBeTFCLEVBQUFELEdBQUF4MUIsR0FDQStwQixFQUFBekksR0FBQW1VLEdBRUEsc0JBQUExTCxLQUFBMEwsS0FBQWpVLEdBQUE1akUsV0FDQSxTQUVBLEdBQUFvaUQsSUFBQStwQixFQUNBLFNBRUEsSUFBQTF4RCxFQUFBcTlELEdBQUEzTCxHQUNBLFFBQUExeEQsR0FBQTJuQyxJQUFBM25DLEVBQUEsSUE3U0Fpb0QsSUFBQWlGLEdBQUEsSUFBQWpGLEdBQUEsSUFBQXNaLFlBQUEsTUFBQTl6QixJQUNBcHdCLElBQUE2dkMsR0FBQSxJQUFBN3ZDLEtBQUF1dkIsR0FDQXNiLElBcDBMQSxvQkFvMExBZ0YsR0FBQWhGLEdBQUFzWixZQUNBdGxELElBQUFneEMsR0FBQSxJQUFBaHhDLEtBQUFneEIsSUFDQWliLElBQUErRSxHQUFBLElBQUEvRSxLQUFBN2EsTUFDQTRmLEdBQUEsU0FBQWhvRSxHQUNBLElBQUFrRixFQUFBZ25FLEdBQUFsc0UsR0FDQTRvRSxFQUFBMWpFLEdBQUEyaUQsRUFBQTduRCxFQUFBNFYsWUFBQTVQLEVBQ0F1MkUsRUFBQTNULEVBQUF0RixHQUFBc0YsR0FBQSxHQUVBLEdBQUEyVCxFQUNBLE9BQUFBLEdBQ0EsS0FBQWxaLEdBQUEsT0FBQTlhLEdBQ0EsS0FBQWdiLEdBQUEsT0FBQTdiLEVBQ0EsS0FBQThiLEdBQUEsTUFoMUxBLG1CQWkxTEEsS0FBQUMsR0FBQSxPQUFBemIsR0FDQSxLQUFBMGIsR0FBQSxPQUFBdGIsR0FHQSxPQUFBbGpELElBK1NBLElBQUFzM0UsR0FBQXBjLEdBQUFzTCxHQUFBK1EsR0FTQSxTQUFBL00sR0FBQTF2RSxHQUNBLElBQUE0b0UsRUFBQTVvRSxLQUFBNFYsWUFHQSxPQUFBNVYsS0FGQSxtQkFBQTRvRSxLQUFBdm9FLFdBQUE4L0QsSUFhQSxTQUFBaVEsR0FBQXB3RSxHQUNBLE9BQUFBLE9BQUFza0UsR0FBQXRrRSxHQVlBLFNBQUFrd0UsR0FBQXJyRSxFQUFBc3FFLEdBQ0EsZ0JBQUFodkUsR0FDQSxhQUFBQSxHQUdBQSxFQUFBMEUsS0FBQXNxRSxJQUNBQSxJQUFBbnBFLEdBQUFuQixLQUFBbkYsR0FBQVMsS0FzSUEsU0FBQW95RSxHQUFBOXZCLEVBQUE1dUIsRUFBQTF1QixHQUVBLE9BREEwdUIsRUFBQTB1QyxHQUFBMXVDLElBQUE3dEIsRUFBQXk4QyxFQUFBdGdELE9BQUEsRUFBQTB4QixFQUFBLEdBQ0EsV0FNQSxJQUxBLElBQUFxb0IsRUFBQS82QyxVQUNBK0YsR0FBQSxFQUNBL0UsRUFBQW9nRSxHQUFBcm1CLEVBQUEvNUMsT0FBQTB4QixFQUFBLEdBQ0F5N0IsRUFBQXQ4QyxFQUFBN1EsS0FFQStFLEVBQUEvRSxHQUNBbXRELEVBQUFwb0QsR0FBQWcxQyxFQUFBcm9CLEVBQUEzc0IsR0FFQUEsR0FBQSxFQUVBLElBREEsSUFBQXcxRSxFQUFBMXBFLEVBQUE2Z0IsRUFBQSxLQUNBM3NCLEVBQUEyc0IsR0FDQTZvRCxFQUFBeDFFLEdBQUFnMUMsRUFBQWgxQyxHQUdBLE9BREF3MUUsRUFBQTdvRCxHQUFBMXVCLEVBQUFtcUQsR0FDQXJ1RCxHQUFBd2hELEVBQUF2aEQsS0FBQXc3RSxJQVlBLFNBQUF2UCxHQUFBaHRFLEVBQUF5ckUsR0FDQSxPQUFBQSxFQUFBenBFLE9BQUEsRUFBQWhDLEVBQUF3ckUsR0FBQXhyRSxFQUFBNHlFLEdBQUFuSCxFQUFBLE9BdUNBLElBQUE4TyxHQUFBaUMsR0FBQWhLLElBVUF4cEMsR0FBQXc0QixJQUFBLFNBQUFsZixFQUFBa25CLEdBQ0EsT0FBQTNiLEdBQUE3a0IsV0FBQXNaLEVBQUFrbkIsSUFXQTJJLEdBQUFxSyxHQUFBL0osSUFZQSxTQUFBK0gsR0FBQTNDLEVBQUE0RSxFQUFBbFYsR0FDQSxJQUFBei9ELEVBQUEyMEUsRUFBQSxHQUNBLE9BQUF0SyxHQUFBMEYsRUF0YUEsU0FBQS92RSxFQUFBNDBFLEdBQ0EsSUFBQTE2RSxFQUFBMDZFLEVBQUExNkUsT0FDQSxJQUFBQSxFQUNBLE9BQUE4RixFQUVBLElBQUFnM0QsRUFBQTk4RCxFQUFBLEVBR0EsT0FGQTA2RSxFQUFBNWQsSUFBQTk4RCxFQUFBLFdBQUEwNkUsRUFBQTVkLEdBQ0E0ZCxJQUFBdjFFLEtBQUFuRixFQUFBLFlBQ0E4RixFQUFBcVosUUFBQThvQyxHQUFBLHVCQUE2Q3l5QixFQUFBLFVBOFo3Q0MsQ0FBQTcwRSxFQXFIQSxTQUFBNDBFLEVBQUFuVixHQU9BLE9BTkFoWSxHQUFBMUksRUFBQSxTQUFBK3pCLEdBQ0EsSUFBQS82RSxFQUFBLEtBQUErNkUsRUFBQSxHQUNBclQsRUFBQXFULEVBQUEsS0FBQWhyQixHQUFBOHNCLEVBQUE3OEUsSUFDQTY4RSxFQUFBbjZFLEtBQUExQyxLQUdBNjhFLEVBQUF4TCxPQTVIQTBMLENBbGlCQSxTQUFBOTBFLEdBQ0EsSUFBQWd4QyxFQUFBaHhDLEVBQUFneEMsTUFBQW9SLElBQ0EsT0FBQXBSLElBQUEsR0FBQXJyQyxNQUFBMDhDLE9BZ2lCQTB5QixDQUFBLzBFLEdBQUF5L0QsS0FZQSxTQUFBaVYsR0FBQWw2QixHQUNBLElBQUFDLEVBQUEsRUFDQXU2QixFQUFBLEVBRUEsa0JBQ0EsSUFBQUMsRUFBQXhhLEtBQ0F5YSxFQUFBNzJCLEdBQUE0MkIsRUFBQUQsR0FHQSxHQURBQSxFQUFBQyxFQUNBQyxFQUFBLEdBQ0EsS0FBQXo2QixHQUFBMkQsRUFDQSxPQUFBbGxELFVBQUEsUUFHQXVoRCxFQUFBLEVBRUEsT0FBQUQsRUFBQXhoRCxNQUFBK0UsRUFBQTdFLFlBWUEsU0FBQW9sRSxHQUFBalgsRUFBQW9QLEdBQ0EsSUFBQXgzRCxHQUFBLEVBQ0EvRSxFQUFBbXRELEVBQUFudEQsT0FDQTg4RCxFQUFBOThELEVBQUEsRUFHQSxJQURBdThELE1BQUExNEQsRUFBQTdELEVBQUF1OEQsSUFDQXgzRCxFQUFBdzNELEdBQUEsQ0FDQSxJQUFBMGUsRUFBQS9XLEdBQUFuL0QsRUFBQSszRCxHQUNBai9ELEVBQUFzdkQsRUFBQTh0QixHQUVBOXRCLEVBQUE4dEIsR0FBQTl0QixFQUFBcG9ELEdBQ0Fvb0QsRUFBQXBvRCxHQUFBbEgsRUFHQSxPQURBc3ZELEVBQUFudEQsT0FBQXU4RCxFQUNBcFAsRUFVQSxJQUFBNGxCLEdBblNBLFNBQUF6eUIsR0FDQSxJQUFBdjlDLEVBQUFtNEUsR0FBQTU2QixFQUFBLFNBQUE1OUMsR0FJQSxPQUhBNHhDLEVBQUFpb0IsT0FBQXhaLEdBQ0F6TyxFQUFBMnVCLFFBRUF2Z0UsSUFHQTR4QyxFQUFBdnhDLEVBQUF1eEMsTUFDQSxPQUFBdnhDLEVBMFJBbzRFLENBQUEsU0FBQTllLEdBQ0EsSUFBQXQ1RCxLQU9BLE9BTkEsS0FBQXM1RCxFQUFBK2UsV0FBQSxJQUNBcjRFLEVBQUF4QyxLQUFBLElBRUE4N0QsRUFBQWw5QyxRQUFBd29DLEdBQUEsU0FBQTdRLEVBQUEzNkIsRUFBQWsvRCxFQUFBQyxHQUNBdjRFLEVBQUF4QyxLQUFBODZFLEVBQUFDLEVBQUFuOEQsUUFBQWtwQyxHQUFBLE1BQUFsc0MsR0FBQTI2QixLQUVBL3pDLElBVUEsU0FBQTRtRSxHQUFBOXJFLEdBQ0Esb0JBQUFBLEdBQUFnckUsR0FBQWhyRSxHQUNBLE9BQUFBLEVBRUEsSUFBQWtGLEVBQUFsRixFQUFBLEdBQ0EsV0FBQWtGLEdBQUEsRUFBQWxGLElBQUF5bUQsRUFBQSxLQUFBdmhELEVBVUEsU0FBQW8rRCxHQUFBN2dCLEdBQ0EsU0FBQUEsRUFBQSxDQUNBLElBQ0EsT0FBQTRkLEdBQUFsaEUsS0FBQXNqRCxHQUNTLE1BQUE5Z0QsSUFDVCxJQUNBLE9BQUE4Z0QsRUFBQSxHQUNTLE1BQUE5Z0QsS0FFVCxTQTRCQSxTQUFBd2lFLEdBQUE2VCxHQUNBLEdBQUFBLGFBQUEvVCxHQUNBLE9BQUErVCxFQUFBMEYsUUFFQSxJQUFBeDRFLEVBQUEsSUFBQWcvRCxHQUFBOFQsRUFBQXZULFlBQUF1VCxFQUFBclQsV0FJQSxPQUhBei9ELEVBQUF3L0QsWUFBQThCLEdBQUF3UixFQUFBdFQsYUFDQXgvRCxFQUFBMC9ELFVBQUFvVCxFQUFBcFQsVUFDQTEvRCxFQUFBMi9ELFdBQUFtVCxFQUFBblQsV0FDQTMvRCxFQXNJQSxJQUFBeTRFLEdBQUF0TCxHQUFBLFNBQUEvaUIsRUFBQWUsR0FDQSxPQUFBc2dCLEdBQUFyaEIsR0FDQXNhLEdBQUF0YSxFQUFBNGIsR0FBQTdhLEVBQUEsRUFBQXNnQixJQUFBLFNBOEJBaU4sR0FBQXZMLEdBQUEsU0FBQS9pQixFQUFBZSxHQUNBLElBQUFiLEVBQUEvNEIsR0FBQTQ1QixHQUlBLE9BSEFzZ0IsR0FBQW5oQixLQUNBQSxFQUFBeHBELEdBRUEycUUsR0FBQXJoQixHQUNBc2EsR0FBQXRhLEVBQUE0YixHQUFBN2EsRUFBQSxFQUFBc2dCLElBQUEsR0FBQVEsR0FBQTNoQixFQUFBLFNBMkJBcXVCLEdBQUF4TCxHQUFBLFNBQUEvaUIsRUFBQWUsR0FDQSxJQUFBSCxFQUFBejVCLEdBQUE0NUIsR0FJQSxPQUhBc2dCLEdBQUF6Z0IsS0FDQUEsRUFBQWxxRCxHQUVBMnFFLEdBQUFyaEIsR0FDQXNhLEdBQUF0YSxFQUFBNGIsR0FBQTdhLEVBQUEsRUFBQXNnQixJQUFBLEdBQUEzcUUsRUFBQWtxRCxRQXVPQSxTQUFBNHRCLEdBQUF4dUIsRUFBQWpaLEVBQUEyYSxHQUNBLElBQUE3dUQsRUFBQSxNQUFBbXRELEVBQUEsRUFBQUEsRUFBQW50RCxPQUNBLElBQUFBLEVBQ0EsU0FFQSxJQUFBK0UsRUFBQSxNQUFBOHBELEVBQUEsRUFBQThwQixHQUFBOXBCLEdBSUEsT0FIQTlwRCxFQUFBLElBQ0FBLEVBQUFxN0QsR0FBQXBnRSxFQUFBK0UsRUFBQSxJQUVBNnBELEdBQUF6QixFQUFBNmhCLEdBQUE5NkIsRUFBQSxHQUFBbnZDLEdBc0NBLFNBQUE2MkUsR0FBQXp1QixFQUFBalosRUFBQTJhLEdBQ0EsSUFBQTd1RCxFQUFBLE1BQUFtdEQsRUFBQSxFQUFBQSxFQUFBbnRELE9BQ0EsSUFBQUEsRUFDQSxTQUVBLElBQUErRSxFQUFBL0UsRUFBQSxFQU9BLE9BTkE2dUQsSUFBQWhyRCxJQUNBa0IsRUFBQTR6RSxHQUFBOXBCLEdBQ0E5cEQsRUFBQThwRCxFQUFBLEVBQ0F1UixHQUFBcGdFLEVBQUErRSxFQUFBLEdBQ0F1N0QsR0FBQXY3RCxFQUFBL0UsRUFBQSxJQUVBNHVELEdBQUF6QixFQUFBNmhCLEdBQUE5NkIsRUFBQSxHQUFBbnZDLEdBQUEsR0FpQkEsU0FBQTYwRSxHQUFBenNCLEdBRUEsT0FEQSxNQUFBQSxLQUFBbnRELE9BQ0Erb0UsR0FBQTViLEVBQUEsTUFnR0EsU0FBQTV0RCxHQUFBNHRELEdBQ0EsT0FBQUEsS0FBQW50RCxPQUFBbXRELEVBQUEsR0FBQXRwRCxFQTBFQSxJQUFBZzRFLEdBQUEzTCxHQUFBLFNBQUF6RixHQUNBLElBQUFxUixFQUFBOXRCLEdBQUF5YyxFQUFBb0ksSUFDQSxPQUFBaUosRUFBQTk3RSxRQUFBODdFLEVBQUEsS0FBQXJSLEVBQUEsR0FDQUQsR0FBQXNSLFFBMkJBQyxHQUFBN0wsR0FBQSxTQUFBekYsR0FDQSxJQUFBcGQsRUFBQS80QixHQUFBbTJDLEdBQ0FxUixFQUFBOXRCLEdBQUF5YyxFQUFBb0ksSUFPQSxPQUxBeGxCLElBQUEvNEIsR0FBQXduRCxHQUNBenVCLEVBQUF4cEQsRUFFQWk0RSxFQUFBN2pFLE1BRUE2akUsRUFBQTk3RSxRQUFBODdFLEVBQUEsS0FBQXJSLEVBQUEsR0FDQUQsR0FBQXNSLEVBQUE5TSxHQUFBM2hCLEVBQUEsU0F5QkEydUIsR0FBQTlMLEdBQUEsU0FBQXpGLEdBQ0EsSUFBQTFjLEVBQUF6NUIsR0FBQW0yQyxHQUNBcVIsRUFBQTl0QixHQUFBeWMsRUFBQW9JLElBTUEsT0FKQTlrQixFQUFBLG1CQUFBQSxJQUFBbHFELElBRUFpNEUsRUFBQTdqRSxNQUVBNmpFLEVBQUE5N0UsUUFBQTg3RSxFQUFBLEtBQUFyUixFQUFBLEdBQ0FELEdBQUFzUixFQUFBajRFLEVBQUFrcUQsUUFxQ0EsU0FBQXo1QixHQUFBNjRCLEdBQ0EsSUFBQW50RCxFQUFBLE1BQUFtdEQsRUFBQSxFQUFBQSxFQUFBbnRELE9BQ0EsT0FBQUEsRUFBQW10RCxFQUFBbnRELEVBQUEsR0FBQTZELEVBdUZBLElBQUFvNEUsR0FBQS9MLEdBQUFnTSxJQXNCQSxTQUFBQSxHQUFBL3VCLEVBQUFlLEdBQ0EsT0FBQWYsS0FBQW50RCxRQUFBa3VELEtBQUFsdUQsT0FDQTR2RSxHQUFBemlCLEVBQUFlLEdBQ0FmLEVBcUZBLElBQUFndkIsR0FBQTFHLEdBQUEsU0FBQXRvQixFQUFBMmlCLEdBQ0EsSUFBQTl2RSxFQUFBLE1BQUFtdEQsRUFBQSxFQUFBQSxFQUFBbnRELE9BQ0ErQyxFQUFBbWlFLEdBQUEvWCxFQUFBMmlCLEdBTUEsT0FKQUQsR0FBQTFpQixFQUFBYSxHQUFBOGhCLEVBQUEsU0FBQS9xRSxHQUNBLE9BQUFpL0QsR0FBQWovRCxFQUFBL0UsSUFBQStFLE1BQ09tcUUsS0FBQU0sS0FFUHpzRSxJQTJFQSxTQUFBNDlELEdBQUF4VCxHQUNBLGFBQUFBLElBQUF1VCxHQUFBMWpFLEtBQUFtd0QsR0FrYUEsSUFBQWl2QixHQUFBbE0sR0FBQSxTQUFBekYsR0FDQSxPQUFBdUgsR0FBQWpKLEdBQUEwQixFQUFBLEVBQUErRCxJQUFBLE1BMEJBNk4sR0FBQW5NLEdBQUEsU0FBQXpGLEdBQ0EsSUFBQXBkLEVBQUEvNEIsR0FBQW0yQyxHQUlBLE9BSEErRCxHQUFBbmhCLEtBQ0FBLEVBQUF4cEQsR0FFQW11RSxHQUFBakosR0FBQTBCLEVBQUEsRUFBQStELElBQUEsR0FBQVEsR0FBQTNoQixFQUFBLE1Bd0JBaXZCLEdBQUFwTSxHQUFBLFNBQUF6RixHQUNBLElBQUExYyxFQUFBejVCLEdBQUFtMkMsR0FFQSxPQURBMWMsRUFBQSxtQkFBQUEsSUFBQWxxRCxFQUNBbXVFLEdBQUFqSixHQUFBMEIsRUFBQSxFQUFBK0QsSUFBQSxHQUFBM3FFLEVBQUFrcUQsS0FnR0EsU0FBQXd1QixHQUFBcHZCLEdBQ0EsSUFBQUEsTUFBQW50RCxPQUNBLFNBRUEsSUFBQUEsRUFBQSxFQU9BLE9BTkFtdEQsRUFBQU8sR0FBQVAsRUFBQSxTQUFBcXZCLEdBQ0EsR0FBQWhPLEdBQUFnTyxHQUVBLE9BREF4OEUsRUFBQW9nRSxHQUFBb2MsRUFBQXg4RSxXQUNBLElBR0FzdkQsR0FBQXR2RCxFQUFBLFNBQUErRSxHQUNBLE9BQUFpcEQsR0FBQWIsRUFBQXFCLEdBQUF6cEQsTUF5QkEsU0FBQTAzRSxHQUFBdHZCLEVBQUFFLEdBQ0EsSUFBQUYsTUFBQW50RCxPQUNBLFNBRUEsSUFBQStDLEVBQUF3NUUsR0FBQXB2QixHQUNBLGFBQUFFLEVBQ0F0cUQsRUFFQWlyRCxHQUFBanJELEVBQUEsU0FBQXk1RSxHQUNBLE9BQUExOUUsR0FBQXV1RCxFQUFBeHBELEVBQUEyNEUsS0F3QkEsSUFBQUUsR0FBQXhNLEdBQUEsU0FBQS9pQixFQUFBZSxHQUNBLE9BQUFzZ0IsR0FBQXJoQixHQUNBc2EsR0FBQXRhLEVBQUFlLFFBc0JBeXVCLEdBQUF6TSxHQUFBLFNBQUF6RixHQUNBLE9BQUFnSSxHQUFBL2tCLEdBQUErYyxFQUFBK0QsT0EwQkFvTyxHQUFBMU0sR0FBQSxTQUFBekYsR0FDQSxJQUFBcGQsRUFBQS80QixHQUFBbTJDLEdBSUEsT0FIQStELEdBQUFuaEIsS0FDQUEsRUFBQXhwRCxHQUVBNHVFLEdBQUEva0IsR0FBQStjLEVBQUErRCxJQUFBUSxHQUFBM2hCLEVBQUEsTUF3QkF3dkIsR0FBQTNNLEdBQUEsU0FBQXpGLEdBQ0EsSUFBQTFjLEVBQUF6NUIsR0FBQW0yQyxHQUVBLE9BREExYyxFQUFBLG1CQUFBQSxJQUFBbHFELEVBQ0E0dUUsR0FBQS9rQixHQUFBK2MsRUFBQStELElBQUEzcUUsRUFBQWtxRCxLQW1CQSt1QixHQUFBNU0sR0FBQXFNLElBNkRBLElBQUFRLEdBQUE3TSxHQUFBLFNBQUF6RixHQUNBLElBQUF6cUUsRUFBQXlxRSxFQUFBenFFLE9BQ0FxdEQsRUFBQXJ0RCxFQUFBLEVBQUF5cUUsRUFBQXpxRSxFQUFBLEdBQUE2RCxFQUdBLE9BQUE0NEUsR0FBQWhTLEVBREFwZCxFQUFBLG1CQUFBQSxHQUFBb2QsRUFBQXh5RCxNQUFBbzFDLEdBQUF4cEQsS0FtQ0EsU0FBQW01RSxHQUFBbi9FLEdBQ0EsSUFBQWtGLEVBQUE2K0QsR0FBQS9qRSxHQUVBLE9BREFrRixFQUFBeS9ELFdBQUEsRUFDQXovRCxFQXNEQSxTQUFBNnlFLEdBQUEvM0UsRUFBQW8vRSxHQUNBLE9BQUFBLEVBQUFwL0UsR0FtQkEsSUFBQXEvRSxHQUFBekgsR0FBQSxTQUFBbHpCLEdBQ0EsSUFBQXZpRCxFQUFBdWlELEVBQUF2aUQsT0FDQTB4QixFQUFBMXhCLEVBQUF1aUQsRUFBQSxLQUNBMWtELEVBQUFrQixLQUFBdWpFLFlBQ0EyYSxFQUFBLFNBQUFqL0UsR0FBMEMsT0FBQWtuRSxHQUFBbG5FLEVBQUF1a0QsSUFFMUMsUUFBQXZpRCxFQUFBLEdBQUFqQixLQUFBd2pFLFlBQUF2aUUsU0FDQW5DLGFBQUFpa0UsSUFBQWtDLEdBQUF0eUMsS0FHQTd6QixJQUFBaVQsTUFBQTRnQixNQUFBMXhCLEVBQUEsT0FDQXVpRSxZQUFBaGlFLE1BQ0ErL0MsS0FBQXMxQixHQUNBNzdCLE1BQUFrakMsR0FDQWh3QixRQUFBcHBELElBRUEsSUFBQWsrRCxHQUFBbGtFLEVBQUFrQixLQUFBeWpFLFdBQUFvVCxLQUFBLFNBQUF6b0IsR0FJQSxPQUhBbnRELElBQUFtdEQsRUFBQW50RCxRQUNBbXRELEVBQUE1c0QsS0FBQXNELEdBRUFzcEQsS0FaQXB1RCxLQUFBNjJFLEtBQUFxSCxLQStQQSxJQUFBRSxHQUFBNUksR0FBQSxTQUFBeHhFLEVBQUFsRixFQUFBNkUsR0FDQXZFLEdBQUFuQixLQUFBK0YsRUFBQUwsS0FDQUssRUFBQUwsR0FFQWdpRSxHQUFBM2hFLEVBQUFMLEVBQUEsS0FtSUEsSUFBQXV4QyxHQUFBcWhDLEdBQUFxRyxJQXFCQXlCLEdBQUE5SCxHQUFBc0csSUEyR0EsU0FBQW41RSxHQUFBaXNELEVBQUFyQixHQUVBLE9BREFwNkMsR0FBQXk3QyxHQUFBbkIsR0FBQXdYLElBQ0FyVyxFQUFBc2dCLEdBQUEzaEIsRUFBQSxJQXVCQSxTQUFBZ3dCLEdBQUEzdUIsRUFBQXJCLEdBRUEsT0FEQXA2QyxHQUFBeTdDLEdBQUFsQixHQUFBaWIsSUFDQS9aLEVBQUFzZ0IsR0FBQTNoQixFQUFBLElBMEJBLElBQUFpd0IsR0FBQS9JLEdBQUEsU0FBQXh4RSxFQUFBbEYsRUFBQTZFLEdBQ0F2RSxHQUFBbkIsS0FBQStGLEVBQUFMLEdBQ0FLLEVBQUFMLEdBQUFuQyxLQUFBMUMsR0FFQTZtRSxHQUFBM2hFLEVBQUFMLEdBQUE3RSxNQXNFQSxJQUFBMC9FLEdBQUFyTixHQUFBLFNBQUF4aEIsRUFBQSthLEVBQUExdkIsR0FDQSxJQUFBaDFDLEdBQUEsRUFDQStnRSxFQUFBLG1CQUFBMkQsRUFDQTFtRSxFQUFBOHFFLEdBQUFuZixHQUFBNzlDLEVBQUE2OUMsRUFBQTF1RCxXQUtBLE9BSEEra0UsR0FBQXJXLEVBQUEsU0FBQTd3RCxHQUNBa0YsSUFBQWdDLEdBQUErZ0UsRUFBQWhuRSxHQUFBMnFFLEVBQUE1ckUsRUFBQWs4QyxHQUFBZ3hCLEdBQUFsdEUsRUFBQTRyRSxFQUFBMXZCLEtBRUFoM0MsSUErQkF5NkUsR0FBQWpKLEdBQUEsU0FBQXh4RSxFQUFBbEYsRUFBQTZFLEdBQ0FnaUUsR0FBQTNoRSxFQUFBTCxFQUFBN0UsS0E2Q0EsU0FBQTJILEdBQUFrcEQsRUFBQXJCLEdBRUEsT0FEQXA2QyxHQUFBeTdDLEdBQUFWLEdBQUE0ZixJQUNBbGYsRUFBQXNnQixHQUFBM2hCLEVBQUEsSUFrRkEsSUFBQW93QixHQUFBbEosR0FBQSxTQUFBeHhFLEVBQUFsRixFQUFBNkUsR0FDQUssRUFBQUwsRUFBQSxLQUFBbkMsS0FBQTFDLElBQ0ssV0FBYyxnQkFtU25CLElBQUE2L0UsR0FBQXhOLEdBQUEsU0FBQXhoQixFQUFBb2dCLEdBQ0EsU0FBQXBnQixFQUNBLFNBRUEsSUFBQTF1RCxFQUFBOHVFLEVBQUE5dUUsT0FNQSxPQUxBQSxFQUFBLEdBQUE0MEUsR0FBQWxtQixFQUFBb2dCLEVBQUEsR0FBQUEsRUFBQSxJQUNBQSxLQUNPOXVFLEVBQUEsR0FBQTQwRSxHQUFBOUYsRUFBQSxHQUFBQSxFQUFBLEdBQUFBLEVBQUEsTUFDUEEsS0FBQSxLQUVBRCxHQUFBbmdCLEVBQUFxYSxHQUFBK0YsRUFBQSxTQXFCQXhpRSxHQUFBaXpELElBQUEsV0FDQSxPQUFBMVQsR0FBQXgvQyxLQUFBQyxPQTBEQSxTQUFBaXFFLEdBQUFqMkIsRUFBQXhpRCxFQUFBNjJFLEdBR0EsT0FGQTcyRSxFQUFBNjJFLEVBQUE5d0UsRUFBQS9GLEVBQ0FBLEVBQUF3aUQsR0FBQSxNQUFBeGlELEVBQUF3aUQsRUFBQXRnRCxPQUFBbEMsRUFDQWs3RSxHQUFBMTRCLEVBQUF1RCxFQUFBaGdELFFBQUEvRixHQW9CQSxTQUFBNkQsR0FBQTdELEVBQUF3aUQsR0FDQSxJQUFBdjlDLEVBQ0Esc0JBQUF1OUMsRUFDQSxVQUFBdDBDLEdBQUE2MkMsR0FHQSxPQURBL2tELEVBQUE2NkUsR0FBQTc2RSxHQUNBLFdBT0EsUUFOQUEsRUFBQSxJQUNBaUYsRUFBQXU5QyxFQUFBeGhELE1BQUFDLEtBQUFDLFlBRUFsQixHQUFBLElBQ0F3aUQsRUFBQXo4QyxHQUVBZCxHQXVDQSxJQUFBSSxHQUFBK3NFLEdBQUEsU0FBQTV2QixFQUFBMk0sRUFBQXVtQixHQUNBLElBQUFqTyxFQUFBamlCLEVBQ0EsR0FBQWt3QixFQUFBeHpFLE9BQUEsQ0FDQSxJQUFBeXpFLEVBQUFoWCxHQUFBK1csRUFBQXFELEdBQUExekUsS0FDQW9pRSxHQUFBNWhCLEVBRUEsT0FBQXExQixHQUFBMTRCLEVBQUFpbEIsRUFBQXRZLEVBQUF1bUIsRUFBQUMsS0FnREFrSyxHQUFBek4sR0FBQSxTQUFBbHlFLEVBQUEwRSxFQUFBOHdFLEdBQ0EsSUFBQWpPLEVBQUFqaUIsRUFBQUMsRUFDQSxHQUFBaXdCLEVBQUF4ekUsT0FBQSxDQUNBLElBQUF5ekUsRUFBQWhYLEdBQUErVyxFQUFBcUQsR0FBQThHLEtBQ0FwWSxHQUFBNWhCLEVBRUEsT0FBQXExQixHQUFBdDJFLEVBQUE2aUUsRUFBQXZuRSxFQUFBdzFFLEVBQUFDLEtBc0pBLFNBQUFtSyxHQUFBdDlCLEVBQUFrbkIsRUFBQXpuRSxHQUNBLElBQUE4OUUsRUFDQUMsRUFDQUMsRUFDQWg3RSxFQUNBaTdFLEVBQ0FDLEVBQ0FDLEVBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FwSixHQUFBLEVBRUEsc0JBQUExMEIsRUFDQSxVQUFBdDBDLEdBQUE2MkMsR0FVQSxTQUFBdzdCLEVBQUE3aEUsR0FDQSxJQUFBdTlCLEVBQUE4akMsRUFDQTV3QixFQUFBNndCLEVBS0EsT0FIQUQsRUFBQUMsRUFBQWo2RSxFQUNBcTZFLEVBQUExaEUsRUFDQXpaLEVBQUF1OUMsRUFBQXhoRCxNQUFBbXVELEVBQUFsVCxHQXVCQSxTQUFBdWtDLEVBQUE5aEUsR0FDQSxJQUFBK2hFLEVBQUEvaEUsRUFBQXloRSxFQU1BLE9BQUFBLElBQUFwNkUsR0FBQTA2RSxHQUFBL1csR0FDQStXLEVBQUEsR0FBQUgsR0FOQTVoRSxFQUFBMGhFLEdBTUFILEVBR0EsU0FBQVMsSUFDQSxJQUFBaGlFLEVBQUFsUSxLQUNBLEdBQUFneUUsRUFBQTloRSxHQUNBLE9BQUFpaUUsRUFBQWppRSxHQUdBd2hFLEVBQUFoM0MsR0FBQXczQyxFQTNCQSxTQUFBaGlFLEdBQ0EsSUFFQWtpRSxFQUFBbFgsR0FGQWhyRCxFQUFBeWhFLEdBSUEsT0FBQUcsRUFDQTlkLEdBQUFvZSxFQUFBWCxHQUpBdmhFLEVBQUEwaEUsSUFLQVEsRUFvQkFDLENBQUFuaUUsSUFHQSxTQUFBaWlFLEVBQUFqaUUsR0FLQSxPQUpBd2hFLEVBQUFuNkUsRUFJQW14RSxHQUFBNkksRUFDQVEsRUFBQTdoRSxJQUVBcWhFLEVBQUFDLEVBQUFqNkUsRUFDQWQsR0FlQSxTQUFBNjdFLElBQ0EsSUFBQXBpRSxFQUFBbFEsS0FDQXV5RSxFQUFBUCxFQUFBOWhFLEdBTUEsR0FKQXFoRSxFQUFBNytFLFVBQ0E4K0UsRUFBQS8rRSxLQUNBay9FLEVBQUF6aEUsRUFFQXFpRSxFQUFBLENBQ0EsR0FBQWIsSUFBQW42RSxFQUNBLE9BekVBLFNBQUEyWSxHQU1BLE9BSkEwaEUsRUFBQTFoRSxFQUVBd2hFLEVBQUFoM0MsR0FBQXczQyxFQUFBaFgsR0FFQTJXLEVBQUFFLEVBQUE3aEUsR0FBQXpaLEVBbUVBKzdFLENBQUFiLEdBRUEsR0FBQUcsRUFHQSxPQURBSixFQUFBaDNDLEdBQUF3M0MsRUFBQWhYLEdBQ0E2VyxFQUFBSixHQU1BLE9BSEFELElBQUFuNkUsSUFDQW02RSxFQUFBaDNDLEdBQUF3M0MsRUFBQWhYLElBRUF6a0UsRUFJQSxPQTFHQXlrRSxFQUFBMlEsR0FBQTNRLElBQUEsRUFDQXJGLEdBQUFwaUUsS0FDQW8rRSxJQUFBcCtFLEVBQUFvK0UsUUFFQUosR0FEQUssRUFBQSxZQUFBcitFLEdBQ0FxZ0UsR0FBQStYLEdBQUFwNEUsRUFBQWcrRSxVQUFBLEVBQUF2VyxHQUFBdVcsRUFDQS9JLEVBQUEsYUFBQWoxRSxNQUFBaTFFLFlBbUdBNEosRUFBQUcsT0FuQ0EsV0FDQWYsSUFBQW42RSxHQUNBcWpDLEdBQUE4MkMsR0FFQUUsRUFBQSxFQUNBTCxFQUFBSSxFQUFBSCxFQUFBRSxFQUFBbjZFLEdBK0JBKzZFLEVBQUFJLE1BNUJBLFdBQ0EsT0FBQWhCLElBQUFuNkUsRUFBQWQsRUFBQTA3RSxFQUFBbnlFLE9BNEJBc3lFLEVBcUJBLElBQUFLLEdBQUEvTyxHQUFBLFNBQUE1dkIsRUFBQXZHLEdBQ0EsT0FBQXd0QixHQUFBam5CLEVBQUEsRUFBQXZHLEtBc0JBdEIsR0FBQXkzQixHQUFBLFNBQUE1dkIsRUFBQWtuQixFQUFBenRCLEdBQ0EsT0FBQXd0QixHQUFBam5CLEVBQUE2M0IsR0FBQTNRLElBQUEsRUFBQXp0QixLQXFFQSxTQUFBbWhDLEdBQUE1NkIsRUFBQTQrQixHQUNBLHNCQUFBNStCLEdBQUEsTUFBQTQrQixHQUFBLG1CQUFBQSxFQUNBLFVBQUFsekUsR0FBQTYyQyxHQUVBLElBQUFzOEIsRUFBQSxXQUNBLElBQUFwbEMsRUFBQS82QyxVQUNBMEQsRUFBQXc4RSxJQUFBcGdGLE1BQUFDLEtBQUFnN0MsS0FBQSxHQUNBekYsRUFBQTZxQyxFQUFBN3FDLE1BRUEsR0FBQUEsRUFBQWpaLElBQUEzNEIsR0FDQSxPQUFBNHhDLEVBQUEzMkMsSUFBQStFLEdBRUEsSUFBQUssRUFBQXU5QyxFQUFBeGhELE1BQUFDLEtBQUFnN0MsR0FFQSxPQURBb2xDLEVBQUE3cUMsUUFBQWwzQixJQUFBMWEsRUFBQUssSUFBQXV4QyxFQUNBdnhDLEdBR0EsT0FEQW84RSxFQUFBN3FDLE1BQUEsSUFBQTRtQyxHQUFBa0UsT0FBQWhjLElBQ0ErYixFQTBCQSxTQUFBRSxHQUFBbnJDLEdBQ0Esc0JBQUFBLEVBQ0EsVUFBQWxvQyxHQUFBNjJDLEdBRUEsa0JBQ0EsSUFBQTlJLEVBQUEvNkMsVUFDQSxPQUFBKzZDLEVBQUEvNUMsUUFDQSxjQUFBazBDLEVBQUFsM0MsS0FBQStCLE1BQ0EsY0FBQW0xQyxFQUFBbDNDLEtBQUErQixLQUFBZzdDLEVBQUEsSUFDQSxjQUFBN0YsRUFBQWwzQyxLQUFBK0IsS0FBQWc3QyxFQUFBLEdBQUFBLEVBQUEsSUFDQSxjQUFBN0YsRUFBQWwzQyxLQUFBK0IsS0FBQWc3QyxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUVBLE9BQUE3RixFQUFBcDFDLE1BQUFDLEtBQUFnN0MsSUFsQ0FtaEMsR0FBQWtFLE1BQUFoYyxHQTJGQSxJQUFBa2MsR0FBQXRNLEdBQUEsU0FBQTF5QixFQUFBaS9CLEdBS0EsSUFBQUMsR0FKQUQsRUFBQSxHQUFBQSxFQUFBdi9FLFFBQUFpVCxHQUFBc3NFLEVBQUEsSUFDQXZ4QixHQUFBdXhCLEVBQUEsR0FBQWh3QixHQUFBeWYsT0FDQWhoQixHQUFBK2EsR0FBQXdXLEVBQUEsR0FBQWh3QixHQUFBeWYsUUFFQWh2RSxPQUNBLE9BQUFrd0UsR0FBQSxTQUFBbjJCLEdBSUEsSUFIQSxJQUFBaDFDLEdBQUEsRUFDQS9FLEVBQUFzZ0UsR0FBQXZtQixFQUFBLzVDLE9BQUF3L0UsS0FFQXo2RSxFQUFBL0UsR0FDQSs1QyxFQUFBaDFDLEdBQUF3NkUsRUFBQXg2RSxHQUFBL0gsS0FBQStCLEtBQUFnN0MsRUFBQWgxQyxJQUVBLE9BQUFqRyxHQUFBd2hELEVBQUF2aEQsS0FBQWc3QyxPQXFDQTBsQyxHQUFBdlAsR0FBQSxTQUFBNXZCLEVBQUFrekIsR0FDQSxJQUFBQyxFQUFBaFgsR0FBQStXLEVBQUFxRCxHQUFBNEksS0FDQSxPQUFBekcsR0FBQTE0QixFQUFBcUQsRUFBQTkvQyxFQUFBMnZFLEVBQUFDLEtBbUNBaU0sR0FBQXhQLEdBQUEsU0FBQTV2QixFQUFBa3pCLEdBQ0EsSUFBQUMsRUFBQWhYLEdBQUErVyxFQUFBcUQsR0FBQTZJLEtBQ0EsT0FBQTFHLEdBQUExNEIsRUFBQXNELEVBQUEvL0MsRUFBQTJ2RSxFQUFBQyxLQXlCQWtNLEdBQUFsSyxHQUFBLFNBQUFuMUIsRUFBQXd2QixHQUNBLE9BQUFrSixHQUFBMTRCLEVBQUF3RCxFQUFBamdELE1BQUFpc0UsS0FpYUEsU0FBQXJMLEdBQUE1bUUsRUFBQXdzRSxHQUNBLE9BQUF4c0UsSUFBQXdzRSxHQUFBeHNFLE1BQUF3c0UsS0EwQkEsSUFBQXVWLEdBQUExSCxHQUFBOU4sSUF5QkF5VixHQUFBM0gsR0FBQSxTQUFBcjZFLEVBQUF3c0UsR0FDQSxPQUFBeHNFLEdBQUF3c0UsSUFxQkF6RyxHQUFBcUgsR0FBQSxXQUFrRCxPQUFBanNFLFVBQWxELElBQXNFaXNFLEdBQUEsU0FBQXB0RSxHQUN0RSxPQUFBZ2tFLEdBQUFoa0UsSUFBQU0sR0FBQW5CLEtBQUFhLEVBQUEsWUFDQW9OLEdBQUFqTyxLQUFBYSxFQUFBLFdBMEJBb1YsR0FBQXBDLEVBQUFvQyxRQW1CQXE1QyxHQUFBRCxHQUFBa0QsR0FBQWxELElBOTJQQSxTQUFBeHVELEdBQ0EsT0FBQWdrRSxHQUFBaGtFLElBQUFrc0UsR0FBQWxzRSxJQUFBc29ELElBdzRQQSxTQUFBMG5CLEdBQUFod0UsR0FDQSxhQUFBQSxHQUFBbzhFLEdBQUFwOEUsRUFBQW1DLFVBQUF1cEUsR0FBQTFyRSxHQTRCQSxTQUFBMndFLEdBQUEzd0UsR0FDQSxPQUFBZ2tFLEdBQUFoa0UsSUFBQWd3RSxHQUFBaHdFLEdBMENBLElBQUFraUUsR0FBQUQsSUFBQXdhLEdBbUJBOXRCLEdBQUFELEdBQUFnRCxHQUFBaEQsSUF6OVBBLFNBQUExdUQsR0FDQSxPQUFBZ2tFLEdBQUFoa0UsSUFBQWtzRSxHQUFBbHNFLElBQUFxbkQsR0Fnb1FBLFNBQUE0NkIsR0FBQWppRixHQUNBLElBQUFna0UsR0FBQWhrRSxHQUNBLFNBRUEsSUFBQWlYLEVBQUFpMUQsR0FBQWxzRSxHQUNBLE9BQUFpWCxHQUFBc3dDLEdBQUF0d0MsR0FBQXF3QyxHQUNBLGlCQUFBdG5ELEVBQUErdEUsU0FBQSxpQkFBQS90RSxFQUFBVCxPQUFBcXhFLEdBQUE1d0UsR0FrREEsU0FBQTByRSxHQUFBMXJFLEdBQ0EsSUFBQXNrRSxHQUFBdGtFLEdBQ0EsU0FJQSxJQUFBaVgsRUFBQWkxRCxHQUFBbHNFLEdBQ0EsT0FBQWlYLEdBQUF1d0MsR0FBQXZ3QyxHQUFBd3dDLEdBQUF4d0MsR0FBQWt3QyxHQUFBbHdDLEdBQUE2d0MsR0E2QkEsU0FBQW82QixHQUFBbGlGLEdBQ0EsdUJBQUFBLE1BQUE4NkUsR0FBQTk2RSxHQTZCQSxTQUFBbzhFLEdBQUFwOEUsR0FDQSx1QkFBQUEsR0FDQUEsR0FBQSxHQUFBQSxFQUFBLE1BQUFBLEdBQUEwbUQsRUE0QkEsU0FBQTRkLEdBQUF0a0UsR0FDQSxJQUFBd0UsU0FBQXhFLEVBQ0EsYUFBQUEsSUFBQSxVQUFBd0UsR0FBQSxZQUFBQSxHQTJCQSxTQUFBdy9ELEdBQUFoa0UsR0FDQSxhQUFBQSxHQUFBLGlCQUFBQSxFQW9CQSxJQUFBNnVELEdBQUFELEdBQUE4QyxHQUFBOUMsSUE3dVFBLFNBQUE1dUQsR0FDQSxPQUFBZ2tFLEdBQUFoa0UsSUFBQWdvRSxHQUFBaG9FLElBQUEwbkQsR0E4N1FBLFNBQUF5NkIsR0FBQW5pRixHQUNBLHVCQUFBQSxHQUNBZ2tFLEdBQUFoa0UsSUFBQWtzRSxHQUFBbHNFLElBQUEybkQsRUErQkEsU0FBQWlwQixHQUFBNXdFLEdBQ0EsSUFBQWdrRSxHQUFBaGtFLElBQUFrc0UsR0FBQWxzRSxJQUFBNm5ELEVBQ0EsU0FFQSxJQUFBd2MsRUFBQXBELEdBQUFqaEUsR0FDQSxVQUFBcWtFLEVBQ0EsU0FFQSxJQUFBdUUsRUFBQXRvRSxHQUFBbkIsS0FBQWtsRSxFQUFBLGdCQUFBQSxFQUFBenVELFlBQ0EseUJBQUFnekQsbUJBQ0F2SSxHQUFBbGhFLEtBQUF5cEUsSUFBQWpJLEdBb0JBLElBQUE1UixHQUFBRCxHQUFBNEMsR0FBQTVDLElBNzZRQSxTQUFBOXVELEdBQ0EsT0FBQWdrRSxHQUFBaGtFLElBQUFrc0UsR0FBQWxzRSxJQUFBK25ELElBODlRQSxJQUFBa0gsR0FBQUQsR0FBQTBDLEdBQUExQyxJQXA5UUEsU0FBQWh2RCxHQUNBLE9BQUFna0UsR0FBQWhrRSxJQUFBZ29FLEdBQUFob0UsSUFBQWdvRCxJQXMrUUEsU0FBQW82QixHQUFBcGlGLEdBQ0EsdUJBQUFBLElBQ0FvVixHQUFBcFYsSUFBQWdrRSxHQUFBaGtFLElBQUFrc0UsR0FBQWxzRSxJQUFBaW9ELEdBb0JBLFNBQUEraUIsR0FBQWhyRSxHQUNBLHVCQUFBQSxHQUNBZ2tFLEdBQUFoa0UsSUFBQWtzRSxHQUFBbHNFLElBQUFrb0QsR0FvQkEsSUFBQWlILEdBQUFELEdBQUF3QyxHQUFBeEMsSUF4Z1JBLFNBQUFsdkQsR0FDQSxPQUFBZ2tFLEdBQUFoa0UsSUFDQW84RSxHQUFBcDhFLEVBQUFtQyxXQUFBOHFELEdBQUFpZixHQUFBbHNFLEtBOGxSQSxJQUFBcWlGLEdBQUFoSSxHQUFBdkssSUF5QkF3UyxHQUFBakksR0FBQSxTQUFBcjZFLEVBQUF3c0UsR0FDQSxPQUFBeHNFLEdBQUF3c0UsSUEwQkEsU0FBQS95QixHQUFBejVDLEdBQ0EsSUFBQUEsRUFDQSxTQUVBLEdBQUFnd0UsR0FBQWh3RSxHQUNBLE9BQUFvaUYsR0FBQXBpRixHQUFBbS9ELEdBQUFuL0QsR0FBQXdtRSxHQUFBeG1FLEdBRUEsR0FBQXFoRSxJQUFBcmhFLEVBQUFxaEUsSUFDQSxPQTc1VkEsU0FBQXZnRCxHQUlBLElBSEEsSUFBQWhHLEVBQ0E1VixPQUVBNFYsRUFBQWdHLEVBQUFpVyxRQUFBMkIsTUFDQXh6QixFQUFBeEMsS0FBQW9ZLEVBQUE5YSxPQUVBLE9BQUFrRixFQXM1VkFxOUUsQ0FBQXZpRixFQUFBcWhFLE9BRUEsSUFBQXBxRCxFQUFBK3dELEdBQUFob0UsR0FHQSxPQUZBaVgsR0FBQXl3QyxFQUFBK1csR0FBQXhuRCxHQUFBK3dDLEdBQUE4VyxHQUFBek8sSUFFQXJ3RCxHQTBCQSxTQUFBbTZFLEdBQUFuNkUsR0FDQSxPQUFBQSxHQUdBQSxFQUFBczZFLEdBQUF0NkUsTUFDQXltRCxHQUFBem1ELEtBQUF5bUQsR0FDQXptRCxFQUFBLFFBQ0EybUQsRUFFQTNtRCxPQUFBLEVBUEEsSUFBQUEsSUFBQSxFQW9DQSxTQUFBODZFLEdBQUE5NkUsR0FDQSxJQUFBa0YsRUFBQWkxRSxHQUFBbjZFLEdBQ0F3aUYsRUFBQXQ5RSxFQUFBLEVBRUEsT0FBQUEsS0FBQXM5RSxFQUFBdDlFLEVBQUFzOUUsRUFBQXQ5RSxFQUFBLEVBOEJBLFNBQUF1OUUsR0FBQXppRixHQUNBLE9BQUFBLEVBQUF5bUUsR0FBQXFVLEdBQUE5NkUsR0FBQSxFQUFBNm1ELEdBQUEsRUEwQkEsU0FBQXl6QixHQUFBdDZFLEdBQ0Esb0JBQUFBLEVBQ0EsT0FBQUEsRUFFQSxHQUFBZ3JFLEdBQUFockUsR0FDQSxPQUFBNG1ELEVBRUEsR0FBQTBkLEdBQUF0a0UsR0FBQSxDQUNBLElBQUF3c0UsRUFBQSxtQkFBQXhzRSxFQUFBNmpFLFFBQUE3akUsRUFBQTZqRSxVQUFBN2pFLEVBQ0FBLEVBQUFza0UsR0FBQWtJLEtBQUEsR0FBQUEsRUFFQSxvQkFBQXhzRSxFQUNBLFdBQUFBLE9BRUFBLElBQUFzaEIsUUFBQTJvQyxHQUFBLElBQ0EsSUFBQXk0QixFQUFBOTNCLEdBQUFub0MsS0FBQXppQixHQUNBLE9BQUEwaUYsR0FBQTUzQixHQUFBcm9DLEtBQUF6aUIsR0FDQTR0RCxHQUFBNXRELEVBQUFpVCxNQUFBLEdBQUF5dkUsRUFBQSxLQUNBLzNCLEdBQUFsb0MsS0FBQXppQixHQUFBNG1ELEdBQUE1bUQsRUEyQkEsU0FBQTZ3RSxHQUFBN3dFLEdBQ0EsT0FBQW9uRSxHQUFBcG5FLEVBQUFzb0UsR0FBQXRvRSxJQXNEQSxTQUFBMEgsR0FBQTFILEdBQ0EsYUFBQUEsRUFBQSxHQUFBazBFLEdBQUFsMEUsR0FxQ0EsSUFBQXFOLEdBQUF1cEUsR0FBQSxTQUFBejJFLEVBQUE4SCxHQUNBLEdBQUF5bkUsR0FBQXpuRSxJQUFBK25FLEdBQUEvbkUsR0FDQW0vRCxHQUFBbi9ELEVBQUF0RCxHQUFBc0QsR0FBQTlILFFBR0EsUUFBQTBFLEtBQUFvRCxFQUNBM0gsR0FBQW5CLEtBQUE4SSxFQUFBcEQsSUFDQWlpRSxHQUFBM21FLEVBQUEwRSxFQUFBb0QsRUFBQXBELE1Bb0NBODlFLEdBQUEvTCxHQUFBLFNBQUF6MkUsRUFBQThILEdBQ0FtL0QsR0FBQW4vRCxFQUFBcWdFLEdBQUFyZ0UsR0FBQTlILEtBZ0NBeWlGLEdBQUFoTSxHQUFBLFNBQUF6MkUsRUFBQThILEVBQUFzb0UsRUFBQTVJLEdBQ0FQLEdBQUFuL0QsRUFBQXFnRSxHQUFBcmdFLEdBQUE5SCxFQUFBd25FLEtBK0JBa2IsR0FBQWpNLEdBQUEsU0FBQXoyRSxFQUFBOEgsRUFBQXNvRSxFQUFBNUksR0FDQVAsR0FBQW4vRCxFQUFBdEQsR0FBQXNELEdBQUE5SCxFQUFBd25FLEtBb0JBbWIsR0FBQWxMLEdBQUF2USxJQThEQSxJQUFBdEgsR0FBQXNTLEdBQUEsU0FBQWx5RSxFQUFBNkgsR0FDQTdILEVBQUFULEdBQUFTLEdBRUEsSUFBQStHLEdBQUEsRUFDQS9FLEVBQUE2RixFQUFBN0YsT0FDQTIwRSxFQUFBMzBFLEVBQUEsRUFBQTZGLEVBQUEsR0FBQWhDLEVBTUEsSUFKQTh3RSxHQUFBQyxHQUFBL3VFLEVBQUEsR0FBQUEsRUFBQSxHQUFBOHVFLEtBQ0EzMEUsRUFBQSxLQUdBK0UsRUFBQS9FLEdBTUEsSUFMQSxJQUFBOEYsRUFBQUQsRUFBQWQsR0FDQTZCLEVBQUF1L0QsR0FBQXJnRSxHQUNBODZFLEdBQUEsRUFDQUMsRUFBQWo2RSxFQUFBNUcsU0FFQTRnRixFQUFBQyxHQUFBLENBQ0EsSUFBQW4rRSxFQUFBa0UsRUFBQWc2RSxHQUNBL2lGLEVBQUFHLEVBQUEwRSxJQUVBN0UsSUFBQWdHLEdBQ0E0Z0UsR0FBQTVtRSxFQUFBbWdFLEdBQUF0N0QsTUFBQXZFLEdBQUFuQixLQUFBZ0IsRUFBQTBFLE1BQ0ExRSxFQUFBMEUsR0FBQW9ELEVBQUFwRCxJQUtBLE9BQUExRSxJQXNCQThpRixHQUFBNVEsR0FBQSxTQUFBbjJCLEdBRUEsT0FEQUEsRUFBQXg1QyxLQUFBc0QsRUFBQTQxRSxJQUNBMzZFLEdBQUFpaUYsR0FBQWw5RSxFQUFBazJDLEtBZ1NBLFNBQUFwOEMsR0FBQUssRUFBQXlyRSxFQUFBamhFLEdBQ0EsSUFBQXpGLEVBQUEsTUFBQS9FLEVBQUE2RixFQUFBMmxFLEdBQUF4ckUsRUFBQXlyRSxHQUNBLE9BQUExbUUsSUFBQWMsRUFBQTJFLEVBQUF6RixFQTREQSxTQUFBbXJFLEdBQUFsd0UsRUFBQXlyRSxHQUNBLGFBQUF6ckUsR0FBQSs3RSxHQUFBLzdFLEVBQUF5ckUsRUFBQWMsSUFxQkEsSUFBQXlXLEdBQUEzSixHQUFBLFNBQUF0MEUsRUFBQWxGLEVBQUE2RSxHQUNBLE1BQUE3RSxHQUNBLG1CQUFBQSxFQUFBMEgsV0FDQTFILEVBQUEwZ0UsR0FBQXZoRSxLQUFBYSxJQUdBa0YsRUFBQWxGLEdBQUE2RSxHQUNLZ3VFLEdBQUF2RCxLQTRCTDhULEdBQUE1SixHQUFBLFNBQUF0MEUsRUFBQWxGLEVBQUE2RSxHQUNBLE1BQUE3RSxHQUNBLG1CQUFBQSxFQUFBMEgsV0FDQTFILEVBQUEwZ0UsR0FBQXZoRSxLQUFBYSxJQUdBTSxHQUFBbkIsS0FBQStGLEVBQUFsRixHQUNBa0YsRUFBQWxGLEdBQUEwQyxLQUFBbUMsR0FFQUssRUFBQWxGLElBQUE2RSxJQUVLc3NFLElBb0JMa1MsR0FBQWhSLEdBQUFuRixJQThCQSxTQUFBdm9FLEdBQUF4RSxHQUNBLE9BQUE2dkUsR0FBQTd2RSxHQUFBd2xFLEdBQUF4bEUsR0FBQXN2RSxHQUFBdHZFLEdBMEJBLFNBQUFtb0UsR0FBQW5vRSxHQUNBLE9BQUE2dkUsR0FBQTd2RSxHQUFBd2xFLEdBQUF4bEUsR0FBQSxHQUFBd3ZFLEdBQUF4dkUsR0F1R0EsSUFBQW1qRixHQUFBMU0sR0FBQSxTQUFBejJFLEVBQUE4SCxFQUFBc29FLEdBQ0FELEdBQUFud0UsRUFBQThILEVBQUFzb0UsS0FrQ0EyUyxHQUFBdE0sR0FBQSxTQUFBejJFLEVBQUE4SCxFQUFBc29FLEVBQUE1SSxHQUNBMkksR0FBQW53RSxFQUFBOEgsRUFBQXNvRSxFQUFBNUksS0F1QkFyc0IsR0FBQXM4QixHQUFBLFNBQUF6M0UsRUFBQXVrRCxHQUNBLElBQUF4L0MsS0FDQSxTQUFBL0UsRUFDQSxPQUFBK0UsRUFFQSxJQUFBMGlFLEdBQUEsRUFDQWxqQixFQUFBeUwsR0FBQXpMLEVBQUEsU0FBQWtuQixHQUdBLE9BRkFBLEVBQUFDLEdBQUFELEVBQUF6ckUsR0FDQXluRSxNQUFBZ0UsRUFBQXpwRSxPQUFBLEdBQ0F5cEUsSUFFQXhFLEdBQUFqbkUsRUFBQW9wRSxHQUFBcHBFLEdBQUErRSxHQUNBMGlFLElBQ0ExaUUsRUFBQXVpRSxHQUFBdmlFLEVBQUFrZ0QsRUFBQUMsRUFBQUMsRUFBQXUyQixLQUdBLElBREEsSUFBQTE1RSxFQUFBdWlELEVBQUF2aUQsT0FDQUEsS0FDQWd3RSxHQUFBanRFLEVBQUF3L0MsRUFBQXZpRCxJQUVBLE9BQUErQyxJQTRDQSxJQUFBODZELEdBQUE0WCxHQUFBLFNBQUF6M0UsRUFBQXVrRCxHQUNBLGFBQUF2a0QsS0Fqa1RBLFNBQUFBLEVBQUF1a0QsR0FDQSxPQUFBbXRCLEdBQUExeEUsRUFBQXVrRCxFQUFBLFNBQUExa0QsRUFBQTRyRSxHQUNBLE9BQUF5RSxHQUFBbHdFLEVBQUF5ckUsS0EralRnQzJYLENBQUFwakYsRUFBQXVrRCxLQXFCaEMsU0FBQTgrQixHQUFBcmpGLEVBQUFrMkMsR0FDQSxTQUFBbDJDLEVBQ0EsU0FFQSxJQUFBNEksRUFBQW9uRCxHQUFBb1osR0FBQXBwRSxHQUFBLFNBQUFxN0MsR0FDQSxPQUFBQSxLQUdBLE9BREFuRixFQUFBODZCLEdBQUE5NkIsR0FDQXc3QixHQUFBMXhFLEVBQUE0SSxFQUFBLFNBQUEvSSxFQUFBNHJFLEdBQ0EsT0FBQXYxQixFQUFBcjJDLEVBQUE0ckUsRUFBQSxNQTRJQSxJQUFBNlgsR0FBQXhJLEdBQUF0MkUsSUEwQkErK0UsR0FBQXpJLEdBQUEzUyxJQTRLQSxTQUFBalksR0FBQWx3RCxHQUNBLGFBQUFBLEtBQUF3eEQsR0FBQXh4RCxFQUFBd0UsR0FBQXhFLElBa05BLElBQUF3akYsR0FBQXZNLEdBQUEsU0FBQWx5RSxFQUFBMCtFLEVBQUExOEUsR0FFQSxPQURBMDhFLElBQUE3a0UsY0FDQTdaLEdBQUFnQyxFQUFBMjhFLEdBQUFELFFBa0JBLFNBQUFDLEdBQUFybEIsR0FDQSxPQUFBc2xCLEdBQUFwOEUsR0FBQTgyRCxHQUFBei9DLGVBcUJBLFNBQUF1NEQsR0FBQTlZLEdBRUEsT0FEQUEsRUFBQTkyRCxHQUFBODJELEtBQ0FBLEVBQUFsOUMsUUFBQTBwQyxHQUFBaUgsSUFBQTN3QyxRQUFBb3JDLEdBQUEsSUFzSEEsSUFBQXEzQixHQUFBM00sR0FBQSxTQUFBbHlFLEVBQUEwK0UsRUFBQTE4RSxHQUNBLE9BQUFoQyxHQUFBZ0MsRUFBQSxRQUFBMDhFLEVBQUE3a0UsZ0JBdUJBaWxFLEdBQUE1TSxHQUFBLFNBQUFseUUsRUFBQTArRSxFQUFBMThFLEdBQ0EsT0FBQWhDLEdBQUFnQyxFQUFBLFFBQUEwOEUsRUFBQTdrRSxnQkFvQkFrbEUsR0FBQWhOLEdBQUEsZUEwTkEsSUFBQWlOLEdBQUE5TSxHQUFBLFNBQUFseUUsRUFBQTArRSxFQUFBMThFLEdBQ0EsT0FBQWhDLEdBQUFnQyxFQUFBLFFBQUEwOEUsRUFBQTdrRSxnQkFnRUEsSUFBQW9sRSxHQUFBL00sR0FBQSxTQUFBbHlFLEVBQUEwK0UsRUFBQTE4RSxHQUNBLE9BQUFoQyxHQUFBZ0MsRUFBQSxRQUFBNDhFLEdBQUFGLEtBNmhCQSxJQUFBUSxHQUFBaE4sR0FBQSxTQUFBbHlFLEVBQUEwK0UsRUFBQTE4RSxHQUNBLE9BQUFoQyxHQUFBZ0MsRUFBQSxRQUFBMDhFLEVBQUF4aEUsZ0JBb0JBMGhFLEdBQUE3TSxHQUFBLGVBcUJBLFNBQUFJLEdBQUE3WSxFQUFBNmxCLEVBQUF2TixHQUlBLE9BSEF0WSxFQUFBOTJELEdBQUE4MkQsSUFDQTZsQixFQUFBdk4sRUFBQTl3RSxFQUFBcStFLEtBRUFyK0UsRUFsdmJBLFNBQUF3NEQsR0FDQSxPQUFBMVIsR0FBQXJxQyxLQUFBKzdDLEdBa3ZiQThsQixDQUFBOWxCLEdBeGdiQSxTQUFBQSxHQUNBLE9BQUFBLEVBQUF2bEIsTUFBQTJULFFBdWdiQTIzQixDQUFBL2xCLEdBem5jQSxTQUFBQSxHQUNBLE9BQUFBLEVBQUF2bEIsTUFBQXNSLFFBd25jQWk2QixDQUFBaG1CLEdBRUFBLEVBQUF2bEIsTUFBQW9yQyxPQTJCQSxJQUFBSSxHQUFBcFMsR0FBQSxTQUFBNXZCLEVBQUF2RyxHQUNBLElBQ0EsT0FBQWo3QyxHQUFBd2hELEVBQUF6OEMsRUFBQWsyQyxHQUNPLE1BQUF2NkMsR0FDUCxPQUFBc2dGLEdBQUF0Z0YsS0FBQSxJQUFBNEIsR0FBQTVCLE1BOEJBK2lGLEdBQUE5TSxHQUFBLFNBQUF6M0UsRUFBQXdrRixHQUtBLE9BSkFqMUIsR0FBQWkxQixFQUFBLFNBQUE5L0UsR0FDQUEsRUFBQWluRSxHQUFBam5FLEdBQ0FnaUUsR0FBQTFtRSxFQUFBMEUsRUFBQVMsR0FBQW5GLEVBQUEwRSxHQUFBMUUsTUFFQUEsSUFxR0EsU0FBQTB5RSxHQUFBN3lFLEdBQ0Esa0JBQ0EsT0FBQUEsR0FrREEsSUFBQTRrRixHQUFBak4sS0F1QkFrTixHQUFBbE4sSUFBQSxHQWtCQSxTQUFBckksR0FBQXR2RSxHQUNBLE9BQUFBLEVBNkNBLFNBQUF3dkQsR0FBQS9NLEdBQ0EsT0FBQTRzQixHQUFBLG1CQUFBNXNCLElBQUFnbEIsR0FBQWhsQixFQUFBMkMsSUF5RkEsSUFBQTAvQixHQUFBelMsR0FBQSxTQUFBekcsRUFBQTF2QixHQUNBLGdCQUFBLzdDLEdBQ0EsT0FBQStzRSxHQUFBL3NFLEVBQUF5ckUsRUFBQTF2QixNQTJCQTZvQyxHQUFBMVMsR0FBQSxTQUFBbHlFLEVBQUErN0MsR0FDQSxnQkFBQTB2QixHQUNBLE9BQUFzQixHQUFBL3NFLEVBQUF5ckUsRUFBQTF2QixNQXdDQSxTQUFBOG9DLEdBQUE3a0YsRUFBQThILEVBQUEvRixHQUNBLElBQUE2RyxFQUFBcEUsR0FBQXNELEdBQ0EwOEUsRUFBQWxaLEdBQUF4akUsRUFBQWMsR0FFQSxNQUFBN0csR0FDQW9pRSxHQUFBcjhELEtBQUEwOEUsRUFBQXhpRixTQUFBNEcsRUFBQTVHLFVBQ0FELEVBQUErRixFQUNBQSxFQUFBOUgsRUFDQUEsRUFBQWUsS0FDQXlqRixFQUFBbFosR0FBQXhqRSxFQUFBdEQsR0FBQXNELEtBRUEsSUFBQWszRSxJQUFBN2EsR0FBQXBpRSxJQUFBLFVBQUFBLE1BQUFpOUUsT0FDQWxYLEVBQUF5RCxHQUFBdnJFLEdBcUJBLE9BbkJBdXZELEdBQUFpMUIsRUFBQSxTQUFBek4sR0FDQSxJQUFBejBCLEVBQUF4NkMsRUFBQWl2RSxHQUNBLzJFLEVBQUErMkUsR0FBQXowQixFQUNBd2xCLElBQ0E5bkUsRUFBQUUsVUFBQTYyRSxHQUFBLFdBQ0EsSUFBQTFTLEVBQUF0akUsS0FBQXlqRSxVQUNBLEdBQUF3YSxHQUFBM2EsRUFBQSxDQUNBLElBQUF0L0QsRUFBQS9FLEVBQUFlLEtBQUF1akUsYUFLQSxPQUpBdi9ELEVBQUF3L0QsWUFBQThCLEdBQUF0bEUsS0FBQXdqRSxjQUVBaGlFLE1BQTRCKy9DLE9BQUF2RyxLQUFBLzZDLFVBQUFpdUQsUUFBQWp2RCxJQUM1QitFLEVBQUF5L0QsVUFBQUgsRUFDQXQvRCxFQUVBLE9BQUF1OUMsRUFBQXhoRCxNQUFBZCxFQUFBaXdELElBQUFsdkQsS0FBQWxCLFNBQUFtQixnQkFLQWhCLEVBbUNBLFNBQUE2NkUsTUFpREEsSUFBQWlLLEdBQUFwTCxHQUFBMXBCLElBMEJBKzBCLEdBQUFyTCxHQUFBanFCLElBMEJBdTFCLEdBQUF0TCxHQUFBcHBCLElBd0JBLFNBQUFyd0QsR0FBQXdyRSxHQUNBLE9BQUF1RSxHQUFBdkUsR0FBQWpiLEdBQUFtYixHQUFBRixJQTV5WEEsU0FBQUEsR0FDQSxnQkFBQXpyRSxHQUNBLE9BQUF3ckUsR0FBQXhyRSxFQUFBeXJFLElBMHlYQXdaLENBQUF4WixHQXVFQSxJQUFBcHRELEdBQUE0ekIsS0FzQ0FpekMsR0FBQWp6QyxJQUFBLEdBb0JBLFNBQUE2cEMsS0FDQSxTQWdCQSxTQUFBUSxLQUNBLFNBK0pBLElBQUFwM0MsR0FBQXMwQyxHQUFBLFNBQUEyTCxFQUFBQyxHQUNBLE9BQUFELEVBQUFDLEdBQ0ssR0F1QkwxakIsR0FBQStZLEdBQUEsUUFpQkE0SyxHQUFBN0wsR0FBQSxTQUFBOEwsRUFBQUMsR0FDQSxPQUFBRCxFQUFBQyxHQUNLLEdBdUJMM2pCLEdBQUE2WSxHQUFBLFNBd0tBLElBZ2FBM3lFLEdBaGFBMDlFLEdBQUFoTSxHQUFBLFNBQUFpTSxFQUFBQyxHQUNBLE9BQUFELEVBQUFDLEdBQ0ssR0F1QkxDLEdBQUFsTCxHQUFBLFNBaUJBbUwsR0FBQXBNLEdBQUEsU0FBQXFNLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQUMsR0FDSyxHQStsQkwsT0F6aUJBbGlCLEdBQUFtaUIsTUFqNE1BLFNBQUFqbUYsRUFBQXdpRCxHQUNBLHNCQUFBQSxFQUNBLFVBQUF0MEMsR0FBQTYyQyxHQUdBLE9BREEva0QsRUFBQTY2RSxHQUFBNzZFLEdBQ0EsV0FDQSxLQUFBQSxFQUFBLEVBQ0EsT0FBQXdpRCxFQUFBeGhELE1BQUFDLEtBQUFDLGFBMjNNQTRpRSxHQUFBMlUsT0FDQTNVLEdBQUExMkQsVUFDQTAyRCxHQUFBNGUsWUFDQTVlLEdBQUE2ZSxnQkFDQTdlLEdBQUE4ZSxjQUNBOWUsR0FBQStlLE1BQ0EvZSxHQUFBamdFLFVBQ0FpZ0UsR0FBQXorRCxRQUNBeStELEdBQUEyZ0IsV0FDQTNnQixHQUFBK2IsV0FDQS9iLEdBQUFvaUIsVUFoNktBLFdBQ0EsSUFBQWhsRixVQUFBZ0IsT0FDQSxTQUVBLElBQUFuQyxFQUFBbUIsVUFBQSxHQUNBLE9BQUFpVSxHQUFBcFYsVUE0NUtBK2pFLEdBQUFvYixTQUNBcGIsR0FBQXFpQixNQTc5U0EsU0FBQTkyQixFQUFBb1AsRUFBQW9ZLEdBRUFwWSxHQURBb1ksRUFBQUMsR0FBQXpuQixFQUFBb1AsRUFBQW9ZLEdBQUFwWSxJQUFBMTRELEdBQ0EsRUFFQXU4RCxHQUFBdVksR0FBQXBjLEdBQUEsR0FFQSxJQUFBdjhELEVBQUEsTUFBQW10RCxFQUFBLEVBQUFBLEVBQUFudEQsT0FDQSxJQUFBQSxHQUFBdThELEVBQUEsRUFDQSxTQU1BLElBSkEsSUFBQXgzRCxFQUFBLEVBQ0E0b0QsRUFBQSxFQUNBNXFELEVBQUE4TixFQUFBNHVELEdBQUF6L0QsRUFBQXU4RCxJQUVBeDNELEVBQUEvRSxHQUNBK0MsRUFBQTRxRCxLQUFBaWpCLEdBQUF6akIsRUFBQXBvRCxLQUFBdzNELEdBRUEsT0FBQXg1RCxHQTY4U0E2K0QsR0FBQXNpQixRQTM3U0EsU0FBQS8yQixHQU1BLElBTEEsSUFBQXBvRCxHQUFBLEVBQ0EvRSxFQUFBLE1BQUFtdEQsRUFBQSxFQUFBQSxFQUFBbnRELE9BQ0EydEQsRUFBQSxFQUNBNXFELE9BRUFnQyxFQUFBL0UsR0FBQSxDQUNBLElBQUFuQyxFQUFBc3ZELEVBQUFwb0QsR0FDQWxILElBQ0FrRixFQUFBNHFELEtBQUE5dkQsR0FHQSxPQUFBa0YsR0FnN1NBNitELEdBQUE1N0QsT0F2NVNBLFdBQ0EsSUFBQWhHLEVBQUFoQixVQUFBZ0IsT0FDQSxJQUFBQSxFQUNBLFNBTUEsSUFKQSxJQUFBKzVDLEVBQUFscEMsRUFBQTdRLEVBQUEsR0FDQW10RCxFQUFBbnVELFVBQUEsR0FDQStGLEVBQUEvRSxFQUVBK0UsS0FDQWcxQyxFQUFBaDFDLEVBQUEsR0FBQS9GLFVBQUErRixHQUVBLE9BQUFrcEQsR0FBQWg3QyxHQUFBazZDLEdBQUFrWCxHQUFBbFgsT0FBQTRiLEdBQUFodkIsRUFBQSxLQTQ0U0E2bkIsR0FBQXVpQixLQWxzQ0EsU0FBQTdiLEdBQ0EsSUFBQXRvRSxFQUFBLE1BQUFzb0UsRUFBQSxFQUFBQSxFQUFBdG9FLE9BQ0FzM0UsRUFBQXRJLEtBU0EsT0FQQTFHLEVBQUF0b0UsRUFBQWd1RCxHQUFBc2EsRUFBQSxTQUFBc1EsR0FDQSxzQkFBQUEsRUFBQSxHQUNBLFVBQUE1c0UsR0FBQTYyQyxHQUVBLE9BQUF5MEIsRUFBQXNCLEVBQUEsSUFBQUEsRUFBQSxTQUdBMUksR0FBQSxTQUFBbjJCLEdBRUEsSUFEQSxJQUFBaDFDLEdBQUEsSUFDQUEsRUFBQS9FLEdBQUEsQ0FDQSxJQUFBNDRFLEVBQUF0USxFQUFBdmpFLEdBQ0EsR0FBQWpHLEdBQUE4NUUsRUFBQSxHQUFBNzVFLEtBQUFnN0MsR0FDQSxPQUFBajdDLEdBQUE4NUUsRUFBQSxHQUFBNzVFLEtBQUFnN0MsT0FtckNBNm5CLEdBQUF3aUIsU0FycENBLFNBQUF0K0UsR0FDQSxPQWoyWUEsU0FBQUEsR0FDQSxJQUFBYyxFQUFBcEUsR0FBQXNELEdBQ0EsZ0JBQUE5SCxHQUNBLE9BQUFzcEUsR0FBQXRwRSxFQUFBOEgsRUFBQWMsSUE4MVlBeTlFLENBQUEvZSxHQUFBeC9ELEVBQUFtOUMsS0FxcENBMmUsR0FBQThPLFlBQ0E5TyxHQUFBdWIsV0FDQXZiLEdBQUEzc0IsT0Fwc0hBLFNBQUEvMkMsRUFBQW9tRixHQUNBLElBQUF2aEYsRUFBQWsvRCxHQUFBL2pFLEdBQ0EsYUFBQW9tRixFQUFBdmhGLEVBQUFpaUUsR0FBQWppRSxFQUFBdWhGLElBbXNIQTFpQixHQUFBMmlCLE1BdHNNQSxTQUFBQSxFQUFBamtDLEVBQUFrMkIsRUFBQTdCLEdBRUEsSUFBQTV4RSxFQUFBaTJFLEdBQUExNEIsRUFBQW1ELEVBQUE1L0MsVUFEQTJ5RSxFQUFBN0IsRUFBQTl3RSxFQUFBMnlFLEdBR0EsT0FEQXp6RSxFQUFBOEYsWUFBQTA3RSxFQUFBMTdFLFlBQ0E5RixHQW1zTUE2K0QsR0FBQTRpQixXQTFwTUEsU0FBQUEsRUFBQWxrQyxFQUFBazJCLEVBQUE3QixHQUVBLElBQUE1eEUsRUFBQWkyRSxHQUFBMTRCLEVBQUFvRCxFQUFBNy9DLFVBREEyeUUsRUFBQTdCLEVBQUE5d0UsRUFBQTJ5RSxHQUdBLE9BREF6ekUsRUFBQThGLFlBQUEyN0UsRUFBQTM3RSxZQUNBOUYsR0F1cE1BNitELEdBQUFnYyxZQUNBaGMsR0FBQWhFLFlBQ0FnRSxHQUFBa2YsZ0JBQ0FsZixHQUFBcWQsU0FDQXJkLEdBQUFucEIsU0FDQW1wQixHQUFBNFosY0FDQTVaLEdBQUE2WixnQkFDQTdaLEdBQUE4WixrQkFDQTlaLEdBQUE2aUIsS0EveFNBLFNBQUF0M0IsRUFBQXJ2RCxFQUFBNjJFLEdBQ0EsSUFBQTMwRSxFQUFBLE1BQUFtdEQsRUFBQSxFQUFBQSxFQUFBbnRELE9BQ0EsT0FBQUEsRUFJQTR3RSxHQUFBempCLEdBREFydkQsRUFBQTYyRSxHQUFBNzJFLElBQUErRixFQUFBLEVBQUE4MEUsR0FBQTc2RSxJQUNBLElBQUFBLEVBQUFrQyxPQTB4U0E0aEUsR0FBQThpQixVQTl2U0EsU0FBQXYzQixFQUFBcnZELEVBQUE2MkUsR0FDQSxJQUFBMzBFLEVBQUEsTUFBQW10RCxFQUFBLEVBQUFBLEVBQUFudEQsT0FDQSxPQUFBQSxFQUtBNHdFLEdBQUF6akIsRUFBQSxHQURBcnZELEVBQUFrQyxHQURBbEMsRUFBQTYyRSxHQUFBNzJFLElBQUErRixFQUFBLEVBQUE4MEUsR0FBQTc2RSxLQUVBLElBQUFBLE9Bd3ZTQThqRSxHQUFBK2lCLGVBbHRTQSxTQUFBeDNCLEVBQUFqWixHQUNBLE9BQUFpWixLQUFBbnRELE9BQ0FveUUsR0FBQWpsQixFQUFBNmhCLEdBQUE5NkIsRUFBQSxjQWl0U0EwdEIsR0FBQWdqQixVQTFxU0EsU0FBQXozQixFQUFBalosR0FDQSxPQUFBaVosS0FBQW50RCxPQUNBb3lFLEdBQUFqbEIsRUFBQTZoQixHQUFBOTZCLEVBQUEsV0F5cVNBMHRCLEdBQUFpakIsS0F4b1NBLFNBQUExM0IsRUFBQXR2RCxFQUFBNnpCLEVBQUFFLEdBQ0EsSUFBQTV4QixFQUFBLE1BQUFtdEQsRUFBQSxFQUFBQSxFQUFBbnRELE9BQ0EsT0FBQUEsR0FHQTB4QixHQUFBLGlCQUFBQSxHQUFBa2pELEdBQUF6bkIsRUFBQXR2RCxFQUFBNnpCLEtBQ0FBLEVBQUEsRUFDQUUsRUFBQTV4QixHQS9zSUEsU0FBQW10RCxFQUFBdHZELEVBQUE2ekIsRUFBQUUsR0FDQSxJQUFBNXhCLEVBQUFtdEQsRUFBQW50RCxPQVdBLEtBVEEweEIsRUFBQWluRCxHQUFBam5ELElBQ0EsSUFDQUEsS0FBQTF4QixFQUFBLEVBQUFBLEVBQUEweEIsSUFFQUUsTUFBQS90QixHQUFBK3RCLEVBQUE1eEIsSUFBQTI0RSxHQUFBL21ELElBQ0EsSUFDQUEsR0FBQTV4QixHQUVBNHhCLEVBQUFGLEVBQUFFLEVBQUEsRUFBQTB1RCxHQUFBMXVELEdBQ0FGLEVBQUFFLEdBQ0F1N0IsRUFBQXo3QixLQUFBN3pCLEVBRUEsT0FBQXN2RCxFQWtzSUEyM0IsQ0FBQTMzQixFQUFBdHZELEVBQUE2ekIsRUFBQUUsUUFnb1NBZ3dDLEdBQUEzOEQsT0F4dE9BLFNBQUF5cEQsRUFBQXhhLEdBRUEsT0FEQWpoQyxHQUFBeTdDLEdBQUFoQixHQUFBb2IsSUFDQXBhLEVBQUFzZ0IsR0FBQTk2QixFQUFBLEtBdXRPQTB0QixHQUFBbWpCLFFBcG9PQSxTQUFBcjJCLEVBQUFyQixHQUNBLE9BQUEwYixHQUFBdmpFLEdBQUFrcEQsRUFBQXJCLEdBQUEsSUFvb09BdVUsR0FBQW9qQixZQTdtT0EsU0FBQXQyQixFQUFBckIsR0FDQSxPQUFBMGIsR0FBQXZqRSxHQUFBa3BELEVBQUFyQixHQUFBL0ksSUE2bU9Bc2QsR0FBQXFqQixhQXJsT0EsU0FBQXYyQixFQUFBckIsRUFBQTJiLEdBRUEsT0FEQUEsTUFBQW5sRSxFQUFBLEVBQUE4MEUsR0FBQTNQLEdBQ0FELEdBQUF2akUsR0FBQWtwRCxFQUFBckIsR0FBQTJiLElBb2xPQXBILEdBQUFnWSxXQUNBaFksR0FBQXNqQixZQWhnU0EsU0FBQS8zQixHQUVBLE9BREEsTUFBQUEsS0FBQW50RCxPQUNBK29FLEdBQUE1YixFQUFBN0ksT0ErL1JBc2QsR0FBQXVqQixhQXgrUkEsU0FBQWg0QixFQUFBNmIsR0FFQSxPQURBLE1BQUE3YixLQUFBbnRELE9BS0Erb0UsR0FBQTViLEVBREE2YixNQUFBbmxFLEVBQUEsRUFBQTgwRSxHQUFBM1AsUUFvK1JBcEgsR0FBQXdqQixLQXY3TEEsU0FBQTlrQyxHQUNBLE9BQUEwNEIsR0FBQTE0QixFQUFBeUQsSUF1N0xBNmQsR0FBQTZnQixRQUNBN2dCLEdBQUE4Z0IsYUFDQTlnQixHQUFBeWpCLFVBcDlSQSxTQUFBL2MsR0FLQSxJQUpBLElBQUF2akUsR0FBQSxFQUNBL0UsRUFBQSxNQUFBc29FLEVBQUEsRUFBQUEsRUFBQXRvRSxPQUNBK0MsT0FFQWdDLEVBQUEvRSxHQUFBLENBQ0EsSUFBQTQ0RSxFQUFBdFEsRUFBQXZqRSxHQUNBaEMsRUFBQTYxRSxFQUFBLElBQUFBLEVBQUEsR0FFQSxPQUFBNzFFLEdBNDhSQTYrRCxHQUFBMGpCLFVBejZHQSxTQUFBdG5GLEdBQ0EsYUFBQUEsS0FBQXNyRSxHQUFBdHJFLEVBQUF3RSxHQUFBeEUsS0F5NkdBNGpFLEdBQUEyakIsWUEvNEdBLFNBQUF2bkYsR0FDQSxhQUFBQSxLQUFBc3JFLEdBQUF0ckUsRUFBQW1vRSxHQUFBbm9FLEtBKzRHQTRqRSxHQUFBMGIsV0FDQTFiLEdBQUE0akIsUUFyNFJBLFNBQUFyNEIsR0FFQSxPQURBLE1BQUFBLEtBQUFudEQsT0FDQTR3RSxHQUFBempCLEVBQUEsVUFvNFJBeVUsR0FBQWlhLGdCQUNBamEsR0FBQW1hLGtCQUNBbmEsR0FBQW9hLG9CQUNBcGEsR0FBQW9mLFVBQ0FwZixHQUFBcWYsWUFDQXJmLEdBQUEyYixhQUNBM2IsR0FBQXZVLFlBQ0F1VSxHQUFBNGIsU0FDQTViLEdBQUFwL0QsUUFDQW8vRCxHQUFBdUUsVUFDQXZFLEdBQUFwOEQsT0FDQW84RCxHQUFBNmpCLFFBeHBHQSxTQUFBem5GLEVBQUFxdkQsR0FDQSxJQUFBdHFELEtBTUEsT0FMQXNxRCxFQUFBMmhCLEdBQUEzaEIsRUFBQSxHQUVBbWIsR0FBQXhxRSxFQUFBLFNBQUFILEVBQUE2RSxFQUFBMUUsR0FDQTBtRSxHQUFBM2hFLEVBQUFzcUQsRUFBQXh2RCxFQUFBNkUsRUFBQTFFLEdBQUFILEtBRUFrRixHQWtwR0E2K0QsR0FBQThqQixVQW5uR0EsU0FBQTFuRixFQUFBcXZELEdBQ0EsSUFBQXRxRCxLQU1BLE9BTEFzcUQsRUFBQTJoQixHQUFBM2hCLEVBQUEsR0FFQW1iLEdBQUF4cUUsRUFBQSxTQUFBSCxFQUFBNkUsRUFBQTFFLEdBQ0EwbUUsR0FBQTNoRSxFQUFBTCxFQUFBMnFELEVBQUF4dkQsRUFBQTZFLEVBQUExRSxNQUVBK0UsR0E2bUdBNitELEdBQUErakIsUUFsZ0NBLFNBQUE3L0UsR0FDQSxPQUFBdW5FLEdBQUEvSCxHQUFBeC9ELEVBQUFtOUMsS0FrZ0NBMmUsR0FBQWdrQixnQkFyK0JBLFNBQUFuYyxFQUFBdUQsR0FDQSxPQUFBSSxHQUFBM0QsRUFBQW5FLEdBQUEwSCxFQUFBL3BCLEtBcStCQTJlLEdBQUFzWixXQUNBdFosR0FBQXVmLFNBQ0F2ZixHQUFBbWYsYUFDQW5mLEdBQUErZ0IsVUFDQS9nQixHQUFBZ2hCLFlBQ0FoaEIsR0FBQWloQixTQUNBamhCLEdBQUF5ZCxVQUNBemQsR0FBQWlrQixPQTl5QkEsU0FBQS9uRixHQUVBLE9BREFBLEVBQUE2NkUsR0FBQTc2RSxHQUNBb3lFLEdBQUEsU0FBQW4yQixHQUNBLE9BQUE2MEIsR0FBQTcwQixFQUFBajhDLE1BNHlCQThqRSxHQUFBem9CLFFBQ0F5b0IsR0FBQWtrQixPQWovRkEsU0FBQTluRixFQUFBazJDLEdBQ0EsT0FBQW10QyxHQUFBcmpGLEVBQUFxaEYsR0FBQXJRLEdBQUE5NkIsTUFpL0ZBMHRCLEdBQUFta0IsS0EzMUxBLFNBQUF6bEMsR0FDQSxPQUFBMytDLEdBQUEsRUFBQTIrQyxJQTIxTEFzaEIsR0FBQW9rQixRQWwyTkEsU0FBQXQzQixFQUFBb2dCLEVBQUFDLEVBQUE0RixHQUNBLGFBQUFqbUIsTUFHQXo3QyxHQUFBNjdELEtBQ0FBLEVBQUEsTUFBQUEsVUFHQTc3RCxHQURBODdELEVBQUE0RixFQUFBOXdFLEVBQUFrckUsS0FFQUEsRUFBQSxNQUFBQSxVQUVBRixHQUFBbmdCLEVBQUFvZ0IsRUFBQUMsS0F3MU5Bbk4sR0FBQWtoQixRQUNBbGhCLEdBQUEwZCxZQUNBMWQsR0FBQW1oQixhQUNBbmhCLEdBQUFvaEIsWUFDQXBoQixHQUFBNmQsV0FDQTdkLEdBQUE4ZCxnQkFDQTlkLEdBQUE2YixhQUNBN2IsR0FBQS9ELFFBQ0ErRCxHQUFBeWYsVUFDQXpmLEdBQUEzakUsWUFDQTJqRSxHQUFBcWtCLFdBL3JCQSxTQUFBam9GLEdBQ0EsZ0JBQUF5ckUsR0FDQSxhQUFBenJFLEVBQUE2RixFQUFBMmxFLEdBQUF4ckUsRUFBQXlyRSxLQThyQkE3SCxHQUFBcWEsUUFDQXJhLEdBQUFzYSxXQUNBdGEsR0FBQXNrQixVQTdwUkEsU0FBQS80QixFQUFBZSxFQUFBYixHQUNBLE9BQUFGLEtBQUFudEQsUUFBQWt1RCxLQUFBbHVELE9BQ0E0dkUsR0FBQXppQixFQUFBZSxFQUFBOGdCLEdBQUEzaEIsRUFBQSxJQUNBRixHQTJwUkF5VSxHQUFBdWtCLFlBam9SQSxTQUFBaDVCLEVBQUFlLEVBQUFILEdBQ0EsT0FBQVosS0FBQW50RCxRQUFBa3VELEtBQUFsdUQsT0FDQTR2RSxHQUFBemlCLEVBQUFlLEVBQUFycUQsRUFBQWtxRCxHQUNBWixHQStuUkF5VSxHQUFBdWEsVUFDQXZhLEdBQUF2bEQsU0FDQXVsRCxHQUFBc2hCLGNBQ0F0aEIsR0FBQStkLFNBQ0EvZCxHQUFBd2tCLE9BcnROQSxTQUFBMTNCLEVBQUF4YSxHQUVBLE9BREFqaEMsR0FBQXk3QyxHQUFBaEIsR0FBQW9iLElBQ0FwYSxFQUFBMndCLEdBQUFyUSxHQUFBOTZCLEVBQUEsTUFvdE5BMHRCLEdBQUE5K0QsT0Fsa1JBLFNBQUFxcUQsRUFBQWpaLEdBQ0EsSUFBQW54QyxLQUNBLElBQUFvcUQsTUFBQW50RCxPQUNBLE9BQUErQyxFQUVBLElBQUFnQyxHQUFBLEVBQ0ErcUUsS0FDQTl2RSxFQUFBbXRELEVBQUFudEQsT0FHQSxJQURBazBDLEVBQUE4NkIsR0FBQTk2QixFQUFBLEtBQ0FudkMsRUFBQS9FLEdBQUEsQ0FDQSxJQUFBbkMsRUFBQXN2RCxFQUFBcG9ELEdBQ0FtdkMsRUFBQXIyQyxFQUFBa0gsRUFBQW9vRCxLQUNBcHFELEVBQUF4QyxLQUFBMUMsR0FDQWl5RSxFQUFBdnZFLEtBQUF3RSxJQUlBLE9BREE4cUUsR0FBQTFpQixFQUFBMmlCLEdBQ0Evc0UsR0FpalJBNitELEdBQUF5a0IsS0Foc0xBLFNBQUEvbEMsRUFBQTV1QixHQUNBLHNCQUFBNHVCLEVBQ0EsVUFBQXQwQyxHQUFBNjJDLEdBR0EsT0FBQXF0QixHQUFBNXZCLEVBREE1dUIsTUFBQTd0QixFQUFBNnRCLEVBQUFpbkQsR0FBQWpuRCxLQTZyTEFrd0MsR0FBQWpCLFdBQ0FpQixHQUFBMGtCLFdBN3FOQSxTQUFBNTNCLEVBQUE1d0QsRUFBQTYyRSxHQU9BLE9BTEE3MkUsR0FEQTYyRSxFQUFBQyxHQUFBbG1CLEVBQUE1d0QsRUFBQTYyRSxHQUFBNzJFLElBQUErRixHQUNBLEVBRUE4MEUsR0FBQTc2RSxJQUVBbVYsR0FBQXk3QyxHQUFBeVYsR0FBQW1NLElBQ0E1aEIsRUFBQTV3RCxJQXVxTkE4akUsR0FBQXhrRCxJQXI0RkEsU0FBQXBmLEVBQUF5ckUsRUFBQTVyRSxHQUNBLGFBQUFHLElBQUEyeEUsR0FBQTN4RSxFQUFBeXJFLEVBQUE1ckUsSUFxNEZBK2pFLEdBQUEya0IsUUExMkZBLFNBQUF2b0YsRUFBQXlyRSxFQUFBNXJFLEVBQUEybkUsR0FFQSxPQURBQSxFQUFBLG1CQUFBQSxJQUFBM2hFLEVBQ0EsTUFBQTdGLElBQUEyeEUsR0FBQTN4RSxFQUFBeXJFLEVBQUE1ckUsRUFBQTJuRSxJQXkyRkE1RCxHQUFBNGtCLFFBdnBOQSxTQUFBOTNCLEdBRUEsT0FEQXo3QyxHQUFBeTdDLEdBQUE2VixHQUFBb00sSUFDQWppQixJQXNwTkFrVCxHQUFBOXdELE1BemdSQSxTQUFBcThDLEVBQUF6N0IsRUFBQUUsR0FDQSxJQUFBNXhCLEVBQUEsTUFBQW10RCxFQUFBLEVBQUFBLEVBQUFudEQsT0FDQSxPQUFBQSxHQUdBNHhCLEdBQUEsaUJBQUFBLEdBQUFnakQsR0FBQXpuQixFQUFBejdCLEVBQUFFLElBQ0FGLEVBQUEsRUFDQUUsRUFBQTV4QixJQUdBMHhCLEVBQUEsTUFBQUEsRUFBQSxFQUFBaW5ELEdBQUFqbkQsR0FDQUUsTUFBQS90QixFQUFBN0QsRUFBQTI0RSxHQUFBL21ELElBRUFnL0MsR0FBQXpqQixFQUFBejdCLEVBQUFFLFFBNi9RQWd3QyxHQUFBOGIsVUFDQTliLEdBQUE2a0IsV0FqMVFBLFNBQUF0NUIsR0FDQSxPQUFBQSxLQUFBbnRELE9BQ0E2eEUsR0FBQTFrQixPQWcxUUF5VSxHQUFBOGtCLGFBNXpRQSxTQUFBdjVCLEVBQUFFLEdBQ0EsT0FBQUYsS0FBQW50RCxPQUNBNnhFLEdBQUExa0IsRUFBQTZoQixHQUFBM2hCLEVBQUEsUUEyelFBdVUsR0FBQW4yRCxNQTEvREEsU0FBQTR3RCxFQUFBc3FCLEVBQUFDLEdBS0EsT0FKQUEsR0FBQSxpQkFBQUEsR0FBQWhTLEdBQUF2WSxFQUFBc3FCLEVBQUFDLEtBQ0FELEVBQUFDLEVBQUEvaUYsSUFFQStpRixNQUFBL2lGLEVBQUE2Z0QsRUFBQWtpQyxJQUFBLElBSUF2cUIsRUFBQTkyRCxHQUFBODJELE1BRUEsaUJBQUFzcUIsR0FDQSxNQUFBQSxJQUFBLzVCLEdBQUErNUIsT0FFQUEsRUFBQTVVLEdBQUE0VSxLQUNBdnFCLEdBQUFDLEdBQ0E0VyxHQUFBalcsR0FBQVgsR0FBQSxFQUFBdXFCLEdBR0F2cUIsRUFBQTV3RCxNQUFBazdFLEVBQUFDLE9BeStEQWhsQixHQUFBaWxCLE9BanFMQSxTQUFBdm1DLEVBQUE1dUIsR0FDQSxzQkFBQTR1QixFQUNBLFVBQUF0MEMsR0FBQTYyQyxHQUdBLE9BREFueEIsRUFBQSxNQUFBQSxFQUFBLEVBQUEwdUMsR0FBQXVZLEdBQUFqbkQsR0FBQSxHQUNBdytDLEdBQUEsU0FBQW4yQixHQUNBLElBQUFvVCxFQUFBcFQsRUFBQXJvQixHQUNBNm9ELEVBQUF0SCxHQUFBbDVCLEVBQUEsRUFBQXJvQixHQUtBLE9BSEF5N0IsR0FDQWMsR0FBQXNzQixFQUFBcHRCLEdBRUFydUQsR0FBQXdoRCxFQUFBdmhELEtBQUF3N0UsTUFzcExBM1ksR0FBQWtsQixLQTN5UUEsU0FBQTM1QixHQUNBLElBQUFudEQsRUFBQSxNQUFBbXRELEVBQUEsRUFBQUEsRUFBQW50RCxPQUNBLE9BQUFBLEVBQUE0d0UsR0FBQXpqQixFQUFBLEVBQUFudEQsT0EweVFBNGhFLEdBQUFtbEIsS0E5d1FBLFNBQUE1NUIsRUFBQXJ2RCxFQUFBNjJFLEdBQ0EsT0FBQXhuQixLQUFBbnRELE9BSUE0d0UsR0FBQXpqQixFQUFBLEdBREFydkQsRUFBQTYyRSxHQUFBNzJFLElBQUErRixFQUFBLEVBQUE4MEUsR0FBQTc2RSxJQUNBLElBQUFBLE9BMHdRQThqRSxHQUFBb2xCLFVBOXVRQSxTQUFBNzVCLEVBQUFydkQsRUFBQTYyRSxHQUNBLElBQUEzMEUsRUFBQSxNQUFBbXRELEVBQUEsRUFBQUEsRUFBQW50RCxPQUNBLE9BQUFBLEVBS0E0d0UsR0FBQXpqQixHQURBcnZELEVBQUFrQyxHQURBbEMsRUFBQTYyRSxHQUFBNzJFLElBQUErRixFQUFBLEVBQUE4MEUsR0FBQTc2RSxLQUVBLElBQUFBLEVBQUFrQyxPQXd1UUE0aEUsR0FBQXFsQixlQWxzUUEsU0FBQTk1QixFQUFBalosR0FDQSxPQUFBaVosS0FBQW50RCxPQUNBb3lFLEdBQUFqbEIsRUFBQTZoQixHQUFBOTZCLEVBQUEsY0Fpc1FBMHRCLEdBQUFzbEIsVUExcFFBLFNBQUEvNUIsRUFBQWpaLEdBQ0EsT0FBQWlaLEtBQUFudEQsT0FDQW95RSxHQUFBamxCLEVBQUE2aEIsR0FBQTk2QixFQUFBLFFBeXBRQTB0QixHQUFBdWxCLElBN3JQQSxTQUFBdHBGLEVBQUFvL0UsR0FFQSxPQURBQSxFQUFBcC9FLEdBQ0FBLEdBNHJQQStqRSxHQUFBd2xCLFNBNW1MQSxTQUFBOW1DLEVBQUFrbkIsRUFBQXpuRSxHQUNBLElBQUFvK0UsR0FBQSxFQUNBbkosR0FBQSxFQUVBLHNCQUFBMTBCLEVBQ0EsVUFBQXQwQyxHQUFBNjJDLEdBTUEsT0FKQXNmLEdBQUFwaUUsS0FDQW8rRSxFQUFBLFlBQUFwK0UsTUFBQW8rRSxVQUNBbkosRUFBQSxhQUFBajFFLE1BQUFpMUUsWUFFQTRJLEdBQUF0OUIsRUFBQWtuQixHQUNBMlcsVUFDQUosUUFBQXZXLEVBQ0F3TixjQStsTEFwVCxHQUFBZ1UsUUFDQWhVLEdBQUF0cUIsV0FDQXNxQixHQUFBMGYsV0FDQTFmLEdBQUEyZixhQUNBM2YsR0FBQXlsQixPQXJmQSxTQUFBeHBGLEdBQ0EsT0FBQW9WLEdBQUFwVixHQUNBbXdELEdBQUFud0QsRUFBQThyRSxJQUVBZCxHQUFBaHJFLE9BQUF3bUUsR0FBQTBPLEdBQUF4dEUsR0FBQTFILE1Ba2ZBK2pFLEdBQUE4TSxpQkFDQTlNLEdBQUE1K0QsVUF4eUZBLFNBQUFoRixFQUFBcXZELEVBQUFDLEdBQ0EsSUFBQW9XLEVBQUF6d0QsR0FBQWpWLEdBQ0FzcEYsRUFBQTVqQixHQUFBM0QsR0FBQS9oRSxJQUFBZ3ZELEdBQUFodkQsR0FHQSxHQURBcXZELEVBQUEyaEIsR0FBQTNoQixFQUFBLEdBQ0EsTUFBQUMsRUFBQSxDQUNBLElBQUFtWixFQUFBem9FLEtBQUF5VixZQUVBNjVDLEVBREFnNkIsRUFDQTVqQixFQUFBLElBQUErQyxLQUVBdEUsR0FBQW5rRSxJQUNBdXJFLEdBQUE5QyxHQUFBeEUsR0FBQW5ELEdBQUE5Z0UsT0FTQSxPQUhBc3BGLEVBQUEvNUIsR0FBQWliLElBQUF4cUUsRUFBQSxTQUFBSCxFQUFBa0gsRUFBQS9HLEdBQ0EsT0FBQXF2RCxFQUFBQyxFQUFBenZELEVBQUFrSCxFQUFBL0csS0FFQXN2RCxHQXF4RkFzVSxHQUFBMmxCLE1BbmxMQSxTQUFBam5DLEdBQ0EsT0FBQWkyQixHQUFBajJCLEVBQUEsSUFtbExBc2hCLEdBQUF3YSxTQUNBeGEsR0FBQXlhLFdBQ0F6YSxHQUFBMGEsYUFDQTFhLEdBQUE0bEIsS0Fsa1FBLFNBQUFyNkIsR0FDQSxPQUFBQSxLQUFBbnRELE9BQUFneUUsR0FBQTdrQixPQWtrUUF5VSxHQUFBNmxCLE9BeGlRQSxTQUFBdDZCLEVBQUFFLEdBQ0EsT0FBQUYsS0FBQW50RCxPQUFBZ3lFLEdBQUE3a0IsRUFBQTZoQixHQUFBM2hCLEVBQUEsUUF3aVFBdVUsR0FBQThsQixTQWpoUUEsU0FBQXY2QixFQUFBWSxHQUVBLE9BREFBLEVBQUEsbUJBQUFBLElBQUFscUQsRUFDQXNwRCxLQUFBbnRELE9BQUFneUUsR0FBQTdrQixFQUFBdHBELEVBQUFrcUQsT0FnaFFBNlQsR0FBQStsQixNQTl2RkEsU0FBQTNwRixFQUFBeXJFLEdBQ0EsYUFBQXpyRSxHQUFBZ3lFLEdBQUFoeUUsRUFBQXlyRSxJQTh2RkE3SCxHQUFBMmEsU0FDQTNhLEdBQUE2YSxhQUNBN2EsR0FBQS8rRCxPQWx1RkEsU0FBQTdFLEVBQUF5ckUsRUFBQW54QyxHQUNBLGFBQUF0NkIsSUFBQW0wRSxHQUFBbjBFLEVBQUF5ckUsRUFBQXFKLEdBQUF4NkMsS0FrdUZBc3BDLEdBQUFnbUIsV0F2c0ZBLFNBQUE1cEYsRUFBQXlyRSxFQUFBbnhDLEVBQUFrdEMsR0FFQSxPQURBQSxFQUFBLG1CQUFBQSxJQUFBM2hFLEVBQ0EsTUFBQTdGLElBQUFtMEUsR0FBQW4wRSxFQUFBeXJFLEVBQUFxSixHQUFBeDZDLEdBQUFrdEMsSUFzc0ZBNUQsR0FBQTFULFVBQ0EwVCxHQUFBaW1CLFNBOW9GQSxTQUFBN3BGLEdBQ0EsYUFBQUEsS0FBQXd4RCxHQUFBeHhELEVBQUFtb0UsR0FBQW5vRSxLQThvRkE0akUsR0FBQThhLFdBQ0E5YSxHQUFBc1QsU0FDQXRULEdBQUFrbUIsS0F6a0xBLFNBQUFqcUYsRUFBQWc0RSxHQUNBLE9BQUE0SixHQUFBM00sR0FBQStDLEdBQUFoNEUsSUF5a0xBK2pFLEdBQUErYSxPQUNBL2EsR0FBQWdiLFNBQ0FoYixHQUFBaWIsV0FDQWpiLEdBQUFrYixPQUNBbGIsR0FBQW1tQixVQTEwUEEsU0FBQW5oRixFQUFBc25ELEdBQ0EsT0FBQXdrQixHQUFBOXJFLE1BQUFzbkQsTUFBQXlXLEtBMDBQQS9DLEdBQUFvbUIsY0F4elBBLFNBQUFwaEYsRUFBQXNuRCxHQUNBLE9BQUF3a0IsR0FBQTlyRSxNQUFBc25ELE1BQUF5aEIsS0F3elBBL04sR0FBQW1iLFdBR0FuYixHQUFBMzRELFFBQUFxNEUsR0FDQTFmLEdBQUFxbUIsVUFBQTFHLEdBQ0EzZixHQUFBbnBELE9BQUErbkUsR0FDQTVlLEdBQUFzbUIsV0FBQXpILEdBR0FvQyxHQUFBamhCLE9BS0FBLEdBQUExK0IsT0FDQTArQixHQUFBMGdCLFdBQ0ExZ0IsR0FBQTRmLGFBQ0E1ZixHQUFBOGYsY0FDQTlmLEdBQUFsQyxRQUNBa0MsR0FBQXVtQixNQWxwRkEsU0FBQWhzRSxFQUFBaXBELEVBQUFDLEdBYUEsT0FaQUEsSUFBQXhoRSxJQUNBd2hFLEVBQUFELEVBQ0FBLEVBQUF2aEUsR0FFQXdoRSxJQUFBeGhFLElBRUF3aEUsR0FEQUEsRUFBQThTLEdBQUE5UyxLQUNBQSxJQUFBLEdBRUFELElBQUF2aEUsSUFFQXVoRSxHQURBQSxFQUFBK1MsR0FBQS9TLEtBQ0FBLElBQUEsR0FFQWQsR0FBQTZULEdBQUFoOEQsR0FBQWlwRCxFQUFBQyxJQXNvRkF6RCxHQUFBMlosTUEzaExBLFNBQUExOUUsR0FDQSxPQUFBeW5FLEdBQUF6bkUsRUFBQXNsRCxJQTJoTEF5ZSxHQUFBd21CLFVBbCtLQSxTQUFBdnFGLEdBQ0EsT0FBQXluRSxHQUFBem5FLEVBQUFvbEQsRUFBQUUsSUFrK0tBeWUsR0FBQXltQixjQW44S0EsU0FBQXhxRixFQUFBMm5FLEdBRUEsT0FBQUYsR0FBQXpuRSxFQUFBb2xELEVBQUFFLEVBREFxaUIsRUFBQSxtQkFBQUEsSUFBQTNoRSxJQW04S0ErOUQsR0FBQTBtQixVQTMvS0EsU0FBQXpxRixFQUFBMm5FLEdBRUEsT0FBQUYsR0FBQXpuRSxFQUFBc2xELEVBREFxaUIsRUFBQSxtQkFBQUEsSUFBQTNoRSxJQTIvS0ErOUQsR0FBQTJtQixXQXg2S0EsU0FBQXZxRixFQUFBOEgsR0FDQSxhQUFBQSxHQUFBd2hFLEdBQUF0cEUsRUFBQThILEVBQUF0RCxHQUFBc0QsS0F3NktBODdELEdBQUF1VCxVQUNBdlQsR0FBQTRtQixVQWp3Q0EsU0FBQTNxRixFQUFBMkssR0FDQSxhQUFBM0ssUUFBQTJLLEVBQUEzSyxHQWl3Q0ErakUsR0FBQXloQixVQUNBemhCLEdBQUE2bUIsU0F2N0VBLFNBQUFwc0IsRUFBQW45RCxFQUFBazZDLEdBQ0FpakIsRUFBQTkyRCxHQUFBODJELEdBQ0FuOUQsRUFBQTZ5RSxHQUFBN3lFLEdBRUEsSUFBQWMsRUFBQXE4RCxFQUFBcjhELE9BS0E0eEIsRUFKQXduQixNQUFBdjFDLEVBQ0E3RCxFQUNBc2tFLEdBQUFxVSxHQUFBdi9CLEdBQUEsRUFBQXA1QyxHQUlBLE9BREFvNUMsR0FBQWw2QyxFQUFBYyxTQUNBLEdBQUFxOEQsRUFBQXZyRCxNQUFBc29DLEVBQUF4bkIsSUFBQTF5QixHQTY2RUEwaUUsR0FBQTZDLE1BQ0E3QyxHQUFBbGhCLE9BLzRFQSxTQUFBMmIsR0FFQSxPQURBQSxFQUFBOTJELEdBQUE4MkQsS0FDQWhWLEdBQUEvbUMsS0FBQSs3QyxHQUNBQSxFQUFBbDlDLFFBQUErbkMsR0FBQTJVLElBQ0FRLEdBNDRFQXVGLEdBQUE4bUIsYUExM0VBLFNBQUFyc0IsR0FFQSxPQURBQSxFQUFBOTJELEdBQUE4MkQsS0FDQXhVLEdBQUF2bkMsS0FBQSs3QyxHQUNBQSxFQUFBbDlDLFFBQUF5b0MsR0FBQSxRQUNBeVUsR0F1M0VBdUYsR0FBQXh0QixNQXI1T0EsU0FBQXNhLEVBQUF4YSxFQUFBeWdDLEdBQ0EsSUFBQXIwQixFQUFBcnRDLEdBQUF5N0MsR0FBQWpCLEdBQUFrYixHQUlBLE9BSEFnTSxHQUFBQyxHQUFBbG1CLEVBQUF4YSxFQUFBeWdDLEtBQ0F6Z0MsRUFBQXJ3QyxHQUVBeThDLEVBQUFvTyxFQUFBc2dCLEdBQUE5NkIsRUFBQSxLQWk1T0EwdEIsR0FBQTN0QixRQUNBMnRCLEdBQUErWixhQUNBL1osR0FBQSttQixRQW52SEEsU0FBQTNxRixFQUFBazJDLEdBQ0EsT0FBQXVhLEdBQUF6d0QsRUFBQWd4RSxHQUFBOTZCLEVBQUEsR0FBQXMwQixLQW12SEE1RyxHQUFBd2IsWUFDQXhiLEdBQUFnYSxpQkFDQWhhLEdBQUFnbkIsWUEvc0hBLFNBQUE1cUYsRUFBQWsyQyxHQUNBLE9BQUF1YSxHQUFBendELEVBQUFneEUsR0FBQTk2QixFQUFBLEdBQUF3MEIsS0Erc0hBOUcsR0FBQWhDLFNBQ0FnQyxHQUFBbi9ELFdBQ0FtL0QsR0FBQXliLGdCQUNBemIsR0FBQWluQixNQW5ySEEsU0FBQTdxRixFQUFBcXZELEdBQ0EsYUFBQXJ2RCxFQUNBQSxFQUNBbXJFLEdBQUFuckUsRUFBQWd4RSxHQUFBM2hCLEVBQUEsR0FBQThZLEtBaXJIQXZFLEdBQUFrbkIsV0FwcEhBLFNBQUE5cUYsRUFBQXF2RCxHQUNBLGFBQUFydkQsRUFDQUEsRUFDQXFyRSxHQUFBcnJFLEVBQUFneEUsR0FBQTNoQixFQUFBLEdBQUE4WSxLQWtwSEF2RSxHQUFBbW5CLE9Bbm5IQSxTQUFBL3FGLEVBQUFxdkQsR0FDQSxPQUFBcnZELEdBQUF3cUUsR0FBQXhxRSxFQUFBZ3hFLEdBQUEzaEIsRUFBQSxLQW1uSEF1VSxHQUFBb25CLFlBdGxIQSxTQUFBaHJGLEVBQUFxdkQsR0FDQSxPQUFBcnZELEdBQUEwcUUsR0FBQTFxRSxFQUFBZ3hFLEdBQUEzaEIsRUFBQSxLQXNsSEF1VSxHQUFBamtFLE9BQ0Fpa0UsR0FBQWdlLE1BQ0FoZSxHQUFBaWUsT0FDQWplLEdBQUF2bUMsSUF2K0dBLFNBQUFyOUIsRUFBQXlyRSxHQUNBLGFBQUF6ckUsR0FBQSs3RSxHQUFBLzdFLEVBQUF5ckUsRUFBQWEsS0F1K0dBMUksR0FBQXNNLFNBQ0F0TSxHQUFBcmlFLFFBQ0FxaUUsR0FBQXVMLFlBQ0F2TCxHQUFBOEYsU0F6bk9BLFNBQUFoWixFQUFBN3dELEVBQUFneEQsRUFBQThsQixHQUNBam1CLEVBQUFtZixHQUFBbmYsS0FBQVIsR0FBQVEsR0FDQUcsTUFBQThsQixFQUFBZ0UsR0FBQTlwQixHQUFBLEVBRUEsSUFBQTd1RCxFQUFBMHVELEVBQUExdUQsT0FJQSxPQUhBNnVELEVBQUEsSUFDQUEsRUFBQXVSLEdBQUFwZ0UsRUFBQTZ1RCxFQUFBLElBRUFveEIsR0FBQXZ4QixHQUNBRyxHQUFBN3VELEdBQUEwdUQsRUFBQTFzRCxRQUFBbkUsRUFBQWd4RCxJQUFBLElBQ0E3dUQsR0FBQTZ0RCxHQUFBYSxFQUFBN3dELEVBQUFneEQsSUFBQSxHQWduT0ErUyxHQUFBNS9ELFFBdmpTQSxTQUFBbXJELEVBQUF0dkQsRUFBQWd4RCxHQUNBLElBQUE3dUQsRUFBQSxNQUFBbXRELEVBQUEsRUFBQUEsRUFBQW50RCxPQUNBLElBQUFBLEVBQ0EsU0FFQSxJQUFBK0UsRUFBQSxNQUFBOHBELEVBQUEsRUFBQThwQixHQUFBOXBCLEdBSUEsT0FIQTlwRCxFQUFBLElBQ0FBLEVBQUFxN0QsR0FBQXBnRSxFQUFBK0UsRUFBQSxJQUVBOG9ELEdBQUFWLEVBQUF0dkQsRUFBQWtILElBK2lTQTY4RCxHQUFBcW5CLFFBaG9GQSxTQUFBOXNFLEVBQUF1VixFQUFBRSxHQVNBLE9BUkFGLEVBQUFzbUQsR0FBQXRtRCxHQUNBRSxJQUFBL3RCLEdBQ0ErdEIsRUFBQUYsRUFDQUEsRUFBQSxHQUVBRSxFQUFBb21ELEdBQUFwbUQsR0F0cFZBLFNBQUF6VixFQUFBdVYsRUFBQUUsR0FDQSxPQUFBelYsR0FBQW1rRCxHQUFBNXVDLEVBQUFFLElBQUF6VixFQUFBaWtELEdBQUExdUMsRUFBQUUsR0F3cFZBczNELENBREEvc0UsRUFBQWc4RCxHQUFBaDhELEdBQ0F1VixFQUFBRSxJQXduRkFnd0MsR0FBQXNmLFVBQ0F0ZixHQUFBZ0MsZUFDQWhDLEdBQUEzdUQsV0FDQTJ1RCxHQUFBdFYsaUJBQ0FzVixHQUFBaU0sZUFDQWpNLEdBQUE0TSxxQkFDQTVNLEdBQUF1bkIsVUFwdUtBLFNBQUF0ckYsR0FDQSxXQUFBQSxJQUFBLElBQUFBLEdBQ0Fna0UsR0FBQWhrRSxJQUFBa3NFLEdBQUFsc0UsSUFBQW9uRCxHQW11S0EyYyxHQUFBN0IsWUFDQTZCLEdBQUFwVixVQUNBb1YsR0FBQXduQixVQTNxS0EsU0FBQXZyRixHQUNBLE9BQUFna0UsR0FBQWhrRSxJQUFBLElBQUFBLEVBQUErUCxXQUFBNmdFLEdBQUE1d0UsSUEycUtBK2pFLEdBQUFsakMsUUF2b0tBLFNBQUE3Z0MsR0FDQSxTQUFBQSxFQUNBLFNBRUEsR0FBQWd3RSxHQUFBaHdFLEtBQ0FvVixHQUFBcFYsSUFBQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFBQW9FLFFBQ0E4OUQsR0FBQWxpRSxJQUFBbXZELEdBQUFudkQsSUFBQStsRSxHQUFBL2xFLElBQ0EsT0FBQUEsRUFBQW1DLE9BRUEsSUFBQThVLEVBQUErd0QsR0FBQWhvRSxHQUNBLEdBQUFpWCxHQUFBeXdDLEdBQUF6d0MsR0FBQSt3QyxHQUNBLE9BQUFob0QsRUFBQTArRCxLQUVBLEdBQUFnUixHQUFBMXZFLEdBQ0EsT0FBQXl2RSxHQUFBenZFLEdBQUFtQyxPQUVBLFFBQUEwQyxLQUFBN0UsRUFDQSxHQUFBTSxHQUFBbkIsS0FBQWEsRUFBQTZFLEdBQ0EsU0FHQSxVQW1uS0FrL0QsR0FBQXluQixRQXBsS0EsU0FBQXhyRixFQUFBd3NFLEdBQ0EsT0FBQWEsR0FBQXJ0RSxFQUFBd3NFLElBb2xLQXpJLEdBQUEwbkIsWUFqaktBLFNBQUF6ckYsRUFBQXdzRSxFQUFBN0UsR0FFQSxJQUFBemlFLEdBREF5aUUsRUFBQSxtQkFBQUEsSUFBQTNoRSxHQUNBMmhFLEVBQUEzbkUsRUFBQXdzRSxHQUFBeG1FLEVBQ0EsT0FBQWQsSUFBQWMsRUFBQXFuRSxHQUFBcnRFLEVBQUF3c0UsRUFBQXhtRSxFQUFBMmhFLEtBQUF6aUUsR0EraUtBNitELEdBQUFrZSxXQUNBbGUsR0FBQTNCLFNBeC9KQSxTQUFBcGlFLEdBQ0EsdUJBQUFBLEdBQUFtaUUsR0FBQW5pRSxJQXcvSkErakUsR0FBQTJILGNBQ0EzSCxHQUFBbWUsYUFDQW5lLEdBQUFxWSxZQUNBclksR0FBQWxWLFNBQ0FrVixHQUFBMm5CLFFBeHpKQSxTQUFBdnJGLEVBQUE4SCxHQUNBLE9BQUE5SCxJQUFBOEgsR0FBQSttRSxHQUFBN3VFLEVBQUE4SCxFQUFBZ29FLEdBQUFob0UsS0F3ekpBODdELEdBQUE0bkIsWUFyeEpBLFNBQUF4ckYsRUFBQThILEVBQUEwL0QsR0FFQSxPQURBQSxFQUFBLG1CQUFBQSxJQUFBM2hFLEVBQ0FncEUsR0FBQTd1RSxFQUFBOEgsRUFBQWdvRSxHQUFBaG9FLEdBQUEwL0QsSUFveEpBNUQsR0FBQXhoRCxNQXJ2SkEsU0FBQXZpQixHQUlBLE9BQUFtaUYsR0FBQW5pRixXQWt2SkErakUsR0FBQTZuQixTQXJ0SkEsU0FBQTVyRixHQUNBLEdBQUF3OEUsR0FBQXg4RSxHQUNBLFVBQUF1RCxHQUFBd2hELEdBRUEsT0FBQXFxQixHQUFBcHZFLElBa3RKQStqRSxHQUFBOG5CLE1BdHFKQSxTQUFBN3JGLEdBQ0EsYUFBQUEsR0FzcUpBK2pFLEdBQUErbkIsT0EvckpBLFNBQUE5ckYsR0FDQSxjQUFBQSxHQStySkErakUsR0FBQW9lLFlBQ0FwZSxHQUFBTyxZQUNBUCxHQUFBQyxnQkFDQUQsR0FBQTZNLGlCQUNBN00sR0FBQWhWLFlBQ0FnVixHQUFBZ29CLGNBbmpKQSxTQUFBL3JGLEdBQ0EsT0FBQWtpRixHQUFBbGlGLFFBQUEwbUQsR0FBQTFtRCxHQUFBMG1ELEdBbWpKQXFkLEdBQUE5VSxTQUNBOFUsR0FBQXFlLFlBQ0FyZSxHQUFBaUgsWUFDQWpILEdBQUE1VSxnQkFDQTRVLEdBQUFpb0IsWUFqOUlBLFNBQUFoc0YsR0FDQSxPQUFBQSxJQUFBZ0csR0FpOUlBKzlELEdBQUFrb0IsVUE3N0lBLFNBQUFqc0YsR0FDQSxPQUFBZ2tFLEdBQUFoa0UsSUFBQWdvRSxHQUFBaG9FLElBQUFvb0QsSUE2N0lBMmIsR0FBQW1vQixVQXo2SUEsU0FBQWxzRixHQUNBLE9BQUFna0UsR0FBQWhrRSxJQUFBa3NFLEdBQUFsc0UsSUFBQXFvRCxJQXk2SUEwYixHQUFBejhELEtBbDlSQSxTQUFBZ29ELEVBQUF3NUIsR0FDQSxhQUFBeDVCLEVBQUEsR0FBQStTLEdBQUFsakUsS0FBQW13RCxFQUFBdzVCLElBazlSQS9rQixHQUFBZ2dCLGFBQ0FoZ0IsR0FBQXR0QyxRQUNBc3RDLEdBQUFvb0IsWUF6NlJBLFNBQUE3OEIsRUFBQXR2RCxFQUFBZ3hELEdBQ0EsSUFBQTd1RCxFQUFBLE1BQUFtdEQsRUFBQSxFQUFBQSxFQUFBbnRELE9BQ0EsSUFBQUEsRUFDQSxTQUVBLElBQUErRSxFQUFBL0UsRUFLQSxPQUpBNnVELElBQUFockQsSUFFQWtCLEdBREFBLEVBQUE0ekUsR0FBQTlwQixJQUNBLEVBQUF1UixHQUFBcGdFLEVBQUErRSxFQUFBLEdBQUF1N0QsR0FBQXY3RCxFQUFBL0UsRUFBQSxJQUVBbkMsS0Fsc01BLFNBQUFzdkQsRUFBQXR2RCxFQUFBZ3hELEdBRUEsSUFEQSxJQUFBOXBELEVBQUE4cEQsRUFBQSxFQUNBOXBELEtBQ0EsR0FBQW9vRCxFQUFBcG9ELEtBQUFsSCxFQUNBLE9BQUFrSCxFQUdBLE9BQUFBLEVBNHJNQWtsRixDQUFBOThCLEVBQUF0dkQsRUFBQWtILEdBQ0E2cEQsR0FBQXpCLEVBQUE2QixHQUFBanFELEdBQUEsSUE4NVJBNjhELEdBQUFpZ0IsYUFDQWpnQixHQUFBa2dCLGNBQ0FsZ0IsR0FBQXNlLE1BQ0F0ZSxHQUFBdWUsT0FDQXZlLEdBQUF2QixJQWhmQSxTQUFBbFQsR0FDQSxPQUFBQSxLQUFBbnRELE9BQ0E0b0UsR0FBQXpiLEVBQUFnZ0IsR0FBQS9DLElBQ0F2bUUsR0E4ZUErOUQsR0FBQXNvQixNQXBkQSxTQUFBLzhCLEVBQUFFLEdBQ0EsT0FBQUYsS0FBQW50RCxPQUNBNG9FLEdBQUF6YixFQUFBNmhCLEdBQUEzaEIsRUFBQSxHQUFBK2MsSUFDQXZtRSxHQWtkQSs5RCxHQUFBdW9CLEtBamNBLFNBQUFoOUIsR0FDQSxPQUFBK0IsR0FBQS9CLEVBQUFnZ0IsS0FpY0F2TCxHQUFBd29CLE9BdmFBLFNBQUFqOUIsRUFBQUUsR0FDQSxPQUFBNkIsR0FBQS9CLEVBQUE2aEIsR0FBQTNoQixFQUFBLEtBdWFBdVUsR0FBQTV4QixJQWxaQSxTQUFBbWQsR0FDQSxPQUFBQSxLQUFBbnRELE9BQ0E0b0UsR0FBQXpiLEVBQUFnZ0IsR0FBQVEsSUFDQTlwRSxHQWdaQSs5RCxHQUFBeW9CLE1BdFhBLFNBQUFsOUIsRUFBQUUsR0FDQSxPQUFBRixLQUFBbnRELE9BQ0E0b0UsR0FBQXpiLEVBQUE2aEIsR0FBQTNoQixFQUFBLEdBQUFzZ0IsSUFDQTlwRSxHQW9YQSs5RCxHQUFBa1ksYUFDQWxZLEdBQUEwWSxhQUNBMVksR0FBQTBvQixXQXp0QkEsV0FDQSxVQXl0QkExb0IsR0FBQTJvQixXQXpzQkEsV0FDQSxVQXlzQkEzb0IsR0FBQTRvQixTQXpyQkEsV0FDQSxVQXlyQkE1b0IsR0FBQTRoQixZQUNBNWhCLEdBQUE2b0IsSUF0NVJBLFNBQUF0OUIsRUFBQXJ2RCxHQUNBLE9BQUFxdkQsS0FBQW50RCxPQUFBNHVFLEdBQUF6aEIsRUFBQXdyQixHQUFBNzZFLElBQUErRixHQXM1UkErOUQsR0FBQThvQixXQXZoQ0EsV0FJQSxPQUhBNytCLEdBQUE0UixJQUFBMStELE9BQ0E4c0QsR0FBQTRSLEVBQUFnQixJQUVBMS9ELE1Bb2hDQTZpRSxHQUFBaVgsUUFDQWpYLEdBQUF0MUQsT0FDQXMxRCxHQUFBK29CLElBLzJFQSxTQUFBdHVCLEVBQUFyOEQsRUFBQTYzRSxHQUNBeGIsRUFBQTkyRCxHQUFBODJELEdBR0EsSUFBQXV1QixHQUZBNXFGLEVBQUEyNEUsR0FBQTM0RSxJQUVBNjhELEdBQUFSLEdBQUEsRUFDQSxJQUFBcjhELEdBQUE0cUYsR0FBQTVxRixFQUNBLE9BQUFxOEQsRUFFQSxJQUFBNlUsR0FBQWx4RSxFQUFBNHFGLEdBQUEsRUFDQSxPQUNBaFQsR0FBQWpZLEdBQUF1UixHQUFBMkcsR0FDQXhiLEVBQ0F1YixHQUFBblksR0FBQXlSLEdBQUEyRyxJQW8yRUFqVyxHQUFBaXBCLE9BejBFQSxTQUFBeHVCLEVBQUFyOEQsRUFBQTYzRSxHQUNBeGIsRUFBQTkyRCxHQUFBODJELEdBR0EsSUFBQXV1QixHQUZBNXFGLEVBQUEyNEUsR0FBQTM0RSxJQUVBNjhELEdBQUFSLEdBQUEsRUFDQSxPQUFBcjhELEdBQUE0cUYsRUFBQTVxRixFQUNBcThELEVBQUF1YixHQUFBNTNFLEVBQUE0cUYsRUFBQS9TLEdBQ0F4YixHQW0wRUF1RixHQUFBa3BCLFNBenlFQSxTQUFBenVCLEVBQUFyOEQsRUFBQTYzRSxHQUNBeGIsRUFBQTkyRCxHQUFBODJELEdBR0EsSUFBQXV1QixHQUZBNXFGLEVBQUEyNEUsR0FBQTM0RSxJQUVBNjhELEdBQUFSLEdBQUEsRUFDQSxPQUFBcjhELEdBQUE0cUYsRUFBQTVxRixFQUNBNDNFLEdBQUE1M0UsRUFBQTRxRixFQUFBL1MsR0FBQXhiLEVBQ0FBLEdBbXlFQXVGLEdBQUFyb0IsU0F4d0VBLFNBQUE4aUIsRUFBQTB1QixFQUFBcFcsR0FNQSxPQUxBQSxHQUFBLE1BQUFvVyxFQUNBQSxFQUFBLEVBQ09BLElBQ1BBLE1BRUF2cUIsR0FBQWo3RCxHQUFBODJELEdBQUFsOUMsUUFBQTRvQyxHQUFBLElBQUFnakMsR0FBQSxJQW13RUFucEIsR0FBQWx0RCxPQXhwRkEsU0FBQTB3RCxFQUFBQyxFQUFBMmxCLEdBMkJBLEdBMUJBQSxHQUFBLGtCQUFBQSxHQUFBcFcsR0FBQXhQLEVBQUFDLEVBQUEybEIsS0FDQTNsQixFQUFBMmxCLEVBQUFubkYsR0FFQW1uRixJQUFBbm5GLElBQ0Esa0JBQUF3aEUsR0FDQTJsQixFQUFBM2xCLEVBQ0FBLEVBQUF4aEUsR0FFQSxrQkFBQXVoRSxJQUNBNGxCLEVBQUE1bEIsRUFDQUEsRUFBQXZoRSxJQUdBdWhFLElBQUF2aEUsR0FBQXdoRSxJQUFBeGhFLEdBQ0F1aEUsRUFBQSxFQUNBQyxFQUFBLElBR0FELEVBQUE0UyxHQUFBNVMsR0FDQUMsSUFBQXhoRSxHQUNBd2hFLEVBQUFELEVBQ0FBLEVBQUEsR0FFQUMsRUFBQTJTLEdBQUEzUyxJQUdBRCxFQUFBQyxFQUFBLENBQ0EsSUFBQTRsQixFQUFBN2xCLEVBQ0FBLEVBQUFDLEVBQ0FBLEVBQUE0bEIsRUFFQSxHQUFBRCxHQUFBNWxCLEVBQUEsR0FBQUMsRUFBQSxHQUNBLElBQUE0VixFQUFBeGEsS0FDQSxPQUFBSCxHQUFBOEUsRUFBQTZWLEdBQUE1VixFQUFBRCxFQUFBN1osR0FBQSxRQUFBMHZCLEVBQUEsSUFBQWo3RSxPQUFBLEtBQUFxbEUsR0FFQSxPQUFBbkIsR0FBQWtCLEVBQUFDLElBcW5GQXpELEdBQUExa0IsT0F6OE5BLFNBQUF3UixFQUFBckIsRUFBQUMsR0FDQSxJQUFBaE4sRUFBQXJ0QyxHQUFBeTdDLEdBQUFQLEdBQUFrQixHQUNBakIsRUFBQXB2RCxVQUFBZ0IsT0FBQSxFQUVBLE9BQUFzZ0QsRUFBQW9PLEVBQUFzZ0IsR0FBQTNoQixFQUFBLEdBQUFDLEVBQUFjLEVBQUEyVyxLQXM4TkFuRCxHQUFBc3BCLFlBNzZOQSxTQUFBeDhCLEVBQUFyQixFQUFBQyxHQUNBLElBQUFoTixFQUFBcnRDLEdBQUF5N0MsR0FBQUwsR0FBQWdCLEdBQ0FqQixFQUFBcHZELFVBQUFnQixPQUFBLEVBRUEsT0FBQXNnRCxFQUFBb08sRUFBQXNnQixHQUFBM2hCLEVBQUEsR0FBQUMsRUFBQWMsRUFBQXFhLEtBMDZOQTdHLEdBQUFqNUMsT0E3dUVBLFNBQUEwekMsRUFBQXYrRCxFQUFBNjJFLEdBTUEsT0FKQTcyRSxHQURBNjJFLEVBQUFDLEdBQUF2WSxFQUFBditELEVBQUE2MkUsR0FBQTcyRSxJQUFBK0YsR0FDQSxFQUVBODBFLEdBQUE3NkUsR0FFQW15RSxHQUFBMXFFLEdBQUE4MkQsR0FBQXYrRCxJQXd1RUE4akUsR0FBQXppRCxRQWx0RUEsV0FDQSxJQUFBNDZCLEVBQUEvNkMsVUFDQXE5RCxFQUFBOTJELEdBQUF3MEMsRUFBQSxJQUVBLE9BQUFBLEVBQUEvNUMsT0FBQSxFQUFBcThELElBQUFsOUMsUUFBQTQ2QixFQUFBLEdBQUFBLEVBQUEsS0Erc0VBNm5CLEdBQUE3K0QsT0FwbUdBLFNBQUEvRSxFQUFBeXJFLEVBQUFqaEUsR0FHQSxJQUFBekQsR0FBQSxFQUNBL0UsR0FIQXlwRSxFQUFBQyxHQUFBRCxFQUFBenJFLElBR0FnQyxPQU9BLElBSkFBLElBQ0FBLEVBQUEsRUFDQWhDLEVBQUE2RixLQUVBa0IsRUFBQS9FLEdBQUEsQ0FDQSxJQUFBbkMsRUFBQSxNQUFBRyxFQUFBNkYsRUFBQTdGLEVBQUEyckUsR0FBQUYsRUFBQTFrRSxLQUNBbEgsSUFBQWdHLElBQ0FrQixFQUFBL0UsRUFDQW5DLEVBQUEySyxHQUVBeEssRUFBQXVyRSxHQUFBMXJFLEtBQUFiLEtBQUFnQixHQUFBSCxFQUVBLE9BQUFHLEdBa2xHQTRqRSxHQUFBK2hCLFNBQ0EvaEIsR0FBQWxFLGVBQ0FrRSxHQUFBdXBCLE9BdjNOQSxTQUFBejhCLEdBRUEsT0FEQXo3QyxHQUFBeTdDLEdBQUF1VixHQUFBb00sSUFDQTNoQixJQXMzTkFrVCxHQUFBckYsS0E1eU5BLFNBQUE3TixHQUNBLFNBQUFBLEVBQ0EsU0FFQSxHQUFBbWYsR0FBQW5mLEdBQ0EsT0FBQXV4QixHQUFBdnhCLEdBQUFtTyxHQUFBbk8sS0FBQTF1RCxPQUVBLElBQUE4VSxFQUFBK3dELEdBQUFuWCxHQUNBLE9BQUE1NUMsR0FBQXl3QyxHQUFBendDLEdBQUErd0MsR0FDQTZJLEVBQUE2TixLQUVBK1EsR0FBQTVlLEdBQUExdUQsUUFreU5BNGhFLEdBQUFtZ0IsYUFDQW5nQixHQUFBd3BCLEtBNXZOQSxTQUFBMThCLEVBQUF4YSxFQUFBeWdDLEdBQ0EsSUFBQXIwQixFQUFBcnRDLEdBQUF5N0MsR0FBQUosR0FBQXVpQixHQUlBLE9BSEE4RCxHQUFBQyxHQUFBbG1CLEVBQUF4YSxFQUFBeWdDLEtBQ0F6Z0MsRUFBQXJ3QyxHQUVBeThDLEVBQUFvTyxFQUFBc2dCLEdBQUE5NkIsRUFBQSxLQXd2TkEwdEIsR0FBQXlwQixZQXpwUkEsU0FBQWwrQixFQUFBdHZELEdBQ0EsT0FBQWl6RSxHQUFBM2pCLEVBQUF0dkQsSUF5cFJBK2pFLEdBQUEwcEIsY0E3blJBLFNBQUFuK0IsRUFBQXR2RCxFQUFBd3ZELEdBQ0EsT0FBQThqQixHQUFBaGtCLEVBQUF0dkQsRUFBQW14RSxHQUFBM2hCLEVBQUEsS0E2blJBdVUsR0FBQTJwQixjQTFtUkEsU0FBQXArQixFQUFBdHZELEdBQ0EsSUFBQW1DLEVBQUEsTUFBQW10RCxFQUFBLEVBQUFBLEVBQUFudEQsT0FDQSxHQUFBQSxFQUFBLENBQ0EsSUFBQStFLEVBQUErckUsR0FBQTNqQixFQUFBdHZELEdBQ0EsR0FBQWtILEVBQUEvRSxHQUFBeWtFLEdBQUF0WCxFQUFBcG9ELEdBQUFsSCxHQUNBLE9BQUFrSCxFQUdBLFVBbW1SQTY4RCxHQUFBNHBCLGdCQTlrUkEsU0FBQXIrQixFQUFBdHZELEdBQ0EsT0FBQWl6RSxHQUFBM2pCLEVBQUF0dkQsR0FBQSxJQThrUkErakUsR0FBQTZwQixrQkFsalJBLFNBQUF0K0IsRUFBQXR2RCxFQUFBd3ZELEdBQ0EsT0FBQThqQixHQUFBaGtCLEVBQUF0dkQsRUFBQW14RSxHQUFBM2hCLEVBQUEsUUFralJBdVUsR0FBQThwQixrQkEvaFJBLFNBQUF2K0IsRUFBQXR2RCxHQUVBLEdBREEsTUFBQXN2RCxLQUFBbnRELE9BQ0EsQ0FDQSxJQUFBK0UsRUFBQStyRSxHQUFBM2pCLEVBQUF0dkQsR0FBQSxLQUNBLEdBQUE0bUUsR0FBQXRYLEVBQUFwb0QsR0FBQWxILEdBQ0EsT0FBQWtILEVBR0EsVUF3aFJBNjhELEdBQUFvZ0IsYUFDQXBnQixHQUFBK3BCLFdBem1FQSxTQUFBdHZCLEVBQUFuOUQsRUFBQWs2QyxHQU9BLE9BTkFpakIsRUFBQTkyRCxHQUFBODJELEdBQ0FqakIsRUFBQSxNQUFBQSxFQUNBLEVBQ0FrckIsR0FBQXFVLEdBQUF2L0IsR0FBQSxFQUFBaWpCLEVBQUFyOEQsUUFFQWQsRUFBQTZ5RSxHQUFBN3lFLEdBQ0FtOUQsRUFBQXZyRCxNQUFBc29DLElBQUFsNkMsRUFBQWMsU0FBQWQsR0FtbUVBMGlFLEdBQUFnaUIsWUFDQWhpQixHQUFBZ3FCLElBelVBLFNBQUF6K0IsR0FDQSxPQUFBQSxLQUFBbnRELE9BQ0FtdkQsR0FBQWhDLEVBQUFnZ0IsSUFDQSxHQXVVQXZMLEdBQUFpcUIsTUE3U0EsU0FBQTErQixFQUFBRSxHQUNBLE9BQUFGLEtBQUFudEQsT0FDQW12RCxHQUFBaEMsRUFBQTZoQixHQUFBM2hCLEVBQUEsSUFDQSxHQTJTQXVVLEdBQUFrcUIsU0EzL0RBLFNBQUF6dkIsRUFBQXQ4RCxFQUFBNDBFLEdBSUEsSUFBQW9YLEVBQUFucUIsR0FBQW1HLGlCQUVBNE0sR0FBQUMsR0FBQXZZLEVBQUF0OEQsRUFBQTQwRSxLQUNBNTBFLEVBQUE4RCxHQUVBdzRELEVBQUE5MkQsR0FBQTgyRCxHQUNBdDhELEVBQUEwZ0YsTUFBK0IxZ0YsRUFBQWdzRixFQUFBdlMsSUFFL0IsSUFJQXdTLEVBQ0FDLEVBTEE5akIsRUFBQXNZLE1BQW1DMWdGLEVBQUFvb0UsUUFBQTRqQixFQUFBNWpCLFFBQUFxUixJQUNuQzBTLEVBQUExcEYsR0FBQTJsRSxHQUNBZ2tCLEVBQUEzOEIsR0FBQTJZLEVBQUErakIsR0FJQW5uRixFQUFBLEVBQ0FrakUsRUFBQWxvRSxFQUFBa29FLGFBQUFuZixHQUNBaGpELEVBQUEsV0FHQXNtRixFQUFBaGxDLElBQ0FybkQsRUFBQTJnRCxRQUFBb0ksSUFBQWhqRCxPQUFBLElBQ0FtaUUsRUFBQW5pRSxPQUFBLEtBQ0FtaUUsSUFBQXpnQixHQUFBYyxHQUFBUSxJQUFBaGpELE9BQUEsS0FDQS9GLEVBQUFpb0UsVUFBQWxmLElBQUFoakQsT0FBQSxLQUNBLEtBR0F1bUYsRUFBQSxrQkFDQSxjQUFBdHNGLEVBQ0FBLEVBQUFzc0YsVUFDQSw2QkFBQXhoQyxHQUFBLEtBQ0EsS0FFQXdSLEVBQUFsOUMsUUFBQWl0RSxFQUFBLFNBQUF0MUMsRUFBQXcxQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBMTdELEdBc0JBLE9BckJBdzdELE1BQUFDLEdBR0ExbUYsR0FBQXUyRCxFQUFBdnJELE1BQUEvTCxFQUFBZ3NCLEdBQUE1UixRQUFBNHBDLEdBQUFtVCxJQUdBb3dCLElBQ0FOLEdBQUEsRUFDQWxtRixHQUFBLFlBQUF3bUYsRUFBQSxVQUVBRyxJQUNBUixHQUFBLEVBQ0FubUYsR0FBQSxPQUF1QjJtRixFQUFBLGVBRXZCRixJQUNBem1GLEdBQUEsaUJBQUF5bUYsRUFBQSwrQkFFQXhuRixFQUFBZ3NCLEVBQUErbEIsRUFBQTkyQyxPQUlBODJDLElBR0FoeEMsR0FBQSxPQUlBLElBQUFvaUUsRUFBQW5vRSxFQUFBbW9FLFNBQ0FBLElBQ0FwaUUsRUFBQSxpQkFBOEJBLEVBQUEsU0FHOUJBLEdBQUFtbUYsRUFBQW5tRixFQUFBcVosUUFBQTJuQyxHQUFBLElBQUFoaEQsR0FDQXFaLFFBQUE0bkMsR0FBQSxNQUNBNW5DLFFBQUE2bkMsR0FBQSxPQUdBbGhELEVBQUEsYUFBQW9pRSxHQUFBLGdCQUNBQSxFQUNBLEdBQ0Esd0JBRUEscUJBQ0E4akIsRUFDQSxtQkFDQSxLQUVBQyxFQUNBLHVGQUVBLE9BRUFubUYsRUFDQSxnQkFFQSxJQUFBL0MsRUFBQXUvRSxHQUFBLFdBQ0EsT0FBQTkvQixHQUFBMHBDLEVBQUFHLEVBQUEsVUFBQXZtRixHQUNBaEgsTUFBQStFLEVBQUFzb0YsS0FNQSxHQURBcHBGLEVBQUErQyxTQUNBZzZFLEdBQUEvOEUsR0FDQSxNQUFBQSxFQUVBLE9BQUFBLEdBbTVEQTYrRCxHQUFBOHFCLE1BcHNCQSxTQUFBNXVGLEVBQUF1dkQsR0FFQSxJQURBdnZELEVBQUE2NkUsR0FBQTc2RSxJQUNBLEdBQUFBLEVBQUF5bUQsRUFDQSxTQUVBLElBQUF4L0MsRUFBQTIvQyxFQUNBMWtELEVBQUFzZ0UsR0FBQXhpRSxFQUFBNG1ELEdBRUEySSxFQUFBMmhCLEdBQUEzaEIsR0FDQXZ2RCxHQUFBNG1ELEVBR0EsSUFEQSxJQUFBM2hELEVBQUF1c0QsR0FBQXR2RCxFQUFBcXRELEtBQ0F0b0QsRUFBQWpILEdBQ0F1dkQsRUFBQXRvRCxHQUVBLE9BQUFoQyxHQXNyQkE2K0QsR0FBQW9XLFlBQ0FwVyxHQUFBK1csYUFDQS9XLEdBQUEwZSxZQUNBMWUsR0FBQStxQixRQS8zREEsU0FBQTl1RixHQUNBLE9BQUEwSCxHQUFBMUgsR0FBQStlLGVBKzNEQWdsRCxHQUFBdVcsWUFDQXZXLEdBQUFnckIsY0Fsc0lBLFNBQUEvdUYsR0FDQSxPQUFBQSxFQUNBeW1FLEdBQUFxVSxHQUFBOTZFLElBQUEwbUQsS0FDQSxJQUFBMW1ELElBQUEsR0Fnc0lBK2pFLEdBQUFyOEQsWUFDQXE4RCxHQUFBaXJCLFFBMTJEQSxTQUFBaHZGLEdBQ0EsT0FBQTBILEdBQUExSCxHQUFBb2lCLGVBMDJEQTJoRCxHQUFBcDJCLEtBajFEQSxTQUFBNndCLEVBQUF3YixFQUFBbEQsR0FFQSxJQURBdFksRUFBQTkyRCxHQUFBODJELE1BQ0FzWSxHQUFBa0QsSUFBQWgwRSxHQUNBLE9BQUF3NEQsRUFBQWw5QyxRQUFBMm9DLEdBQUEsSUFFQSxJQUFBdVUsS0FBQXdiLEVBQUE5RixHQUFBOEYsSUFDQSxPQUFBeGIsRUFFQSxJQUFBMU0sRUFBQXFOLEdBQUFYLEdBQ0F6TSxFQUFBb04sR0FBQTZhLEdBSUEsT0FBQTVFLEdBQUF0akIsRUFIQUQsR0FBQUMsRUFBQUMsR0FDQUMsR0FBQUYsRUFBQUMsR0FBQSxHQUVBenFELEtBQUEsS0FxMERBeThELEdBQUFrckIsUUEveURBLFNBQUF6d0IsRUFBQXdiLEVBQUFsRCxHQUVBLElBREF0WSxFQUFBOTJELEdBQUE4MkQsTUFDQXNZLEdBQUFrRCxJQUFBaDBFLEdBQ0EsT0FBQXc0RCxFQUFBbDlDLFFBQUE2b0MsR0FBQSxJQUVBLElBQUFxVSxLQUFBd2IsRUFBQTlGLEdBQUE4RixJQUNBLE9BQUF4YixFQUVBLElBQUExTSxFQUFBcU4sR0FBQVgsR0FHQSxPQUFBNFcsR0FBQXRqQixFQUFBLEVBRkFFLEdBQUFGLEVBQUFxTixHQUFBNmEsSUFBQSxHQUVBMXlFLEtBQUEsS0FxeURBeThELEdBQUFtckIsVUEvd0RBLFNBQUExd0IsRUFBQXdiLEVBQUFsRCxHQUVBLElBREF0WSxFQUFBOTJELEdBQUE4MkQsTUFDQXNZLEdBQUFrRCxJQUFBaDBFLEdBQ0EsT0FBQXc0RCxFQUFBbDlDLFFBQUE0b0MsR0FBQSxJQUVBLElBQUFzVSxLQUFBd2IsRUFBQTlGLEdBQUE4RixJQUNBLE9BQUF4YixFQUVBLElBQUExTSxFQUFBcU4sR0FBQVgsR0FHQSxPQUFBNFcsR0FBQXRqQixFQUZBRCxHQUFBQyxFQUFBcU4sR0FBQTZhLEtBRUExeUUsS0FBQSxLQXF3REF5OEQsR0FBQW9yQixTQTd0REEsU0FBQTN3QixFQUFBdDhELEdBQ0EsSUFBQUMsRUFBQWdrRCxFQUNBaXBDLEVBQUFocEMsRUFFQSxHQUFBa2UsR0FBQXBpRSxHQUFBLENBQ0EsSUFBQTRtRixFQUFBLGNBQUE1bUYsSUFBQTRtRixZQUNBM21GLEVBQUEsV0FBQUQsRUFBQTQ0RSxHQUFBNTRFLEVBQUFDLFVBQ0FpdEYsRUFBQSxhQUFBbHRGLEVBQUFneUUsR0FBQWh5RSxFQUFBa3RGLFlBSUEsSUFBQXJDLEdBRkF2dUIsRUFBQTkyRCxHQUFBODJELElBRUFyOEQsT0FDQSxHQUFBbzhELEdBQUFDLEdBQUEsQ0FDQSxJQUFBMU0sRUFBQXFOLEdBQUFYLEdBQ0F1dUIsRUFBQWo3QixFQUFBM3ZELE9BRUEsR0FBQUEsR0FBQTRxRixFQUNBLE9BQUF2dUIsRUFFQSxJQUFBenFDLEVBQUE1eEIsRUFBQTY4RCxHQUFBb3dCLEdBQ0EsR0FBQXI3RCxFQUFBLEVBQ0EsT0FBQXE3RCxFQUVBLElBQUFscUYsRUFBQTRzRCxFQUNBc2pCLEdBQUF0akIsRUFBQSxFQUFBLzlCLEdBQUF6c0IsS0FBQSxJQUNBazNELEVBQUF2ckQsTUFBQSxFQUFBOGdCLEdBRUEsR0FBQSswRCxJQUFBOWlGLEVBQ0EsT0FBQWQsRUFBQWtxRixFQUtBLEdBSEF0OUIsSUFDQS85QixHQUFBN3VCLEVBQUEvQyxPQUFBNHhCLEdBRUFnN0IsR0FBQSs1QixJQUNBLEdBQUF0cUIsRUFBQXZyRCxNQUFBOGdCLEdBQUF0VixPQUFBcXFFLEdBQUEsQ0FDQSxJQUFBN3ZDLEVBQ0FuTCxFQUFBNW9DLEVBTUEsSUFKQTRqRixFQUFBaDdCLFNBQ0FnN0IsRUFBQXYvQixHQUFBdS9CLEVBQUE3Z0YsT0FBQVAsR0FBQWdqRCxHQUFBOFYsS0FBQXNvQixJQUFBLE1BRUFBLEVBQUE3cEIsVUFBQSxFQUNBaG1CLEVBQUE2dkMsRUFBQXRvQixLQUFBMXlCLElBQ0EsSUFBQXVoRCxFQUFBcDJDLEVBQUEveEMsTUFFQWhDLElBQUErTixNQUFBLEVBQUFvOEUsSUFBQXJwRixFQUFBK3RCLEVBQUFzN0QsU0FFTyxHQUFBN3dCLEVBQUFyNkQsUUFBQSt2RSxHQUFBNFUsR0FBQS8wRCxNQUFBLENBQ1AsSUFBQTdzQixFQUFBaEMsRUFBQWluRixZQUFBckQsR0FDQTVoRixHQUFBLElBQ0FoQyxJQUFBK04sTUFBQSxFQUFBL0wsSUFHQSxPQUFBaEMsRUFBQWtxRixHQXlxREFyckIsR0FBQTc5RCxTQW5wREEsU0FBQXM0RCxHQUVBLE9BREFBLEVBQUE5MkQsR0FBQTgyRCxLQUNBbFYsR0FBQTdtQyxLQUFBKzdDLEdBQ0FBLEVBQUFsOUMsUUFBQThuQyxHQUFBa1csSUFDQWQsR0FncERBdUYsR0FBQXVyQixTQXZwQkEsU0FBQUMsR0FDQSxJQUFBanRGLElBQUFnK0QsR0FDQSxPQUFBNTRELEdBQUE2bkYsR0FBQWp0RixHQXNwQkF5aEUsR0FBQXFnQixhQUNBcmdCLEdBQUErZixjQUdBL2YsR0FBQXlyQixLQUFBNXFGLEdBQ0FtL0QsR0FBQTByQixVQUFBalEsR0FDQXpiLEdBQUF2dEMsTUFBQTkwQixHQUVBc2pGLEdBQUFqaEIsSUFDQTk3RCxNQUNBMGlFLEdBQUE1RyxHQUFBLFNBQUF0aEIsRUFBQXkwQixHQUNBNTJFLEdBQUFuQixLQUFBNGtFLEdBQUExakUsVUFBQTYyRSxLQUNBanZFLEdBQUFpdkUsR0FBQXowQixLQUdBeDZDLEtBQ1drM0UsT0FBQSxJQVdYcGIsR0FBQTJyQixRQWg4Z0JBLFNBbThnQkFoZ0MsSUFBQSx5RUFBQXduQixHQUNBblQsR0FBQW1ULEdBQUFsc0UsWUFBQSs0RCxLQUlBclUsSUFBQSx3QkFBQXduQixFQUFBaHdFLEdBQ0ErOEQsR0FBQTVqRSxVQUFBNjJFLEdBQUEsU0FBQWozRSxHQUNBQSxNQUFBK0YsRUFBQSxFQUFBdThELEdBQUF1WSxHQUFBNzZFLEdBQUEsR0FFQSxJQUFBaUYsRUFBQWhFLEtBQUE2akUsZUFBQTc5RCxFQUNBLElBQUErOEQsR0FBQS9pRSxNQUNBQSxLQUFBdzhFLFFBVUEsT0FSQXg0RSxFQUFBNi9ELGFBQ0E3L0QsRUFBQSsvRCxjQUFBeEMsR0FBQXhpRSxFQUFBaUYsRUFBQSsvRCxlQUVBLy9ELEVBQUFnZ0UsVUFBQXhpRSxNQUNBZzhELEtBQUErRCxHQUFBeGlFLEVBQUE0bUQsR0FDQXJpRCxLQUFBMHlFLEdBQUFoeUUsRUFBQTQvRCxRQUFBLGdCQUdBNS9ELEdBR0ErK0QsR0FBQTVqRSxVQUFBNjJFLEVBQUEsa0JBQUFqM0UsR0FDQSxPQUFBaUIsS0FBQTRoRSxVQUFBb1UsR0FBQWozRSxHQUFBNmlFLGFBS0FwVCxJQUFBLHFDQUFBd25CLEVBQUFod0UsR0FDQSxJQUFBMUMsRUFBQTBDLEVBQUEsRUFDQXlvRixFQUFBbnJGLEdBQUEraEQsR0FqN2dCQSxHQWk3Z0JBL2hELEVBRUF5L0QsR0FBQTVqRSxVQUFBNjJFLEdBQUEsU0FBQTFuQixHQUNBLElBQUF0cUQsRUFBQWhFLEtBQUF3OEUsUUFNQSxPQUxBeDRFLEVBQUE4L0QsY0FBQXRpRSxNQUNBOHNELFNBQUEyaEIsR0FBQTNoQixFQUFBLEdBQ0FockQsU0FFQVUsRUFBQTYvRCxhQUFBNy9ELEVBQUE2L0QsY0FBQTRxQixFQUNBenFGLEtBS0F3cUQsSUFBQSx3QkFBQXduQixFQUFBaHdFLEdBQ0EsSUFBQTBvRixFQUFBLFFBQUExb0YsRUFBQSxZQUVBKzhELEdBQUE1akUsVUFBQTYyRSxHQUFBLFdBQ0EsT0FBQWgyRSxLQUFBMHVGLEdBQUEsR0FBQTV2RixRQUFBLE1BS0EwdkQsSUFBQSwyQkFBQXduQixFQUFBaHdFLEdBQ0EsSUFBQTJvRixFQUFBLFFBQUEzb0YsRUFBQSxZQUVBKzhELEdBQUE1akUsVUFBQTYyRSxHQUFBLFdBQ0EsT0FBQWgyRSxLQUFBNmpFLGFBQUEsSUFBQWQsR0FBQS9pRSxXQUFBMnVGLEdBQUEsTUFJQTVyQixHQUFBNWpFLFVBQUFnbUYsUUFBQSxXQUNBLE9BQUFubEYsS0FBQWtHLE9BQUFrb0UsS0FHQXJMLEdBQUE1akUsVUFBQSsxQyxLQUFBLFNBQUFDLEdBQ0EsT0FBQW4xQyxLQUFBa0csT0FBQWl2QyxHQUFBMzBDLFFBR0F1aUUsR0FBQTVqRSxVQUFBay9FLFNBQUEsU0FBQWxwQyxHQUNBLE9BQUFuMUMsS0FBQTRoRSxVQUFBMXNCLEtBQUFDLElBR0E0dEIsR0FBQTVqRSxVQUFBcS9FLFVBQUFyTixHQUFBLFNBQUF6RyxFQUFBMXZCLEdBQ0EseUJBQUEwdkIsRUFDQSxJQUFBM0gsR0FBQS9pRSxNQUVBQSxLQUFBeUcsSUFBQSxTQUFBM0gsR0FDQSxPQUFBa3RFLEdBQUFsdEUsRUFBQTRyRSxFQUFBMXZCLE9BSUErbkIsR0FBQTVqRSxVQUFBa29GLE9BQUEsU0FBQWx5QyxHQUNBLE9BQUFuMUMsS0FBQWtHLE9BQUFvNkUsR0FBQXJRLEdBQUE5NkIsTUFHQTR0QixHQUFBNWpFLFVBQUE0UyxNQUFBLFNBQUE0Z0IsRUFBQUUsR0FDQUYsRUFBQWluRCxHQUFBam5ELEdBRUEsSUFBQTN1QixFQUFBaEUsS0FDQSxPQUFBZ0UsRUFBQTYvRCxlQUFBbHhDLEVBQUEsR0FBQUUsRUFBQSxHQUNBLElBQUFrd0MsR0FBQS8rRCxJQUVBMnVCLEVBQUEsRUFDQTN1QixJQUFBaWtGLFdBQUF0MUQsR0FDT0EsSUFDUDN1QixJQUFBMGhGLEtBQUEveUQsSUFFQUUsSUFBQS90QixJQUVBZCxHQURBNnVCLEVBQUErbUQsR0FBQS9tRCxJQUNBLEVBQUE3dUIsRUFBQTJoRixXQUFBOXlELEdBQUE3dUIsRUFBQWdrRixLQUFBbjFELEVBQUFGLElBRUEzdUIsSUFHQSsrRCxHQUFBNWpFLFVBQUErb0YsZUFBQSxTQUFBL3lDLEdBQ0EsT0FBQW4xQyxLQUFBNGhFLFVBQUF1bUIsVUFBQWh6QyxHQUFBeXNCLFdBR0FtQixHQUFBNWpFLFVBQUFvNUMsUUFBQSxXQUNBLE9BQUF2NEMsS0FBQWdvRixLQUFBcmlDLElBSUE4akIsR0FBQTFHLEdBQUE1akUsVUFBQSxTQUFBb2lELEVBQUF5MEIsR0FDQSxJQUFBNFksRUFBQSxxQ0FBQXJ0RSxLQUFBeTBELEdBQ0E2WSxFQUFBLGtCQUFBdHRFLEtBQUF5MEQsR0FDQThZLEVBQUFqc0IsR0FBQWdzQixFQUFBLGdCQUFBN1ksRUFBQSxZQUFBQSxHQUNBK1ksRUFBQUYsR0FBQSxRQUFBdHRFLEtBQUF5MEQsR0FFQThZLElBR0Fqc0IsR0FBQTFqRSxVQUFBNjJFLEdBQUEsV0FDQSxJQUFBbDNFLEVBQUFrQixLQUFBdWpFLFlBQ0F2b0IsRUFBQTZ6QyxHQUFBLEdBQUE1dUYsVUFDQSt1RixFQUFBbHdGLGFBQUFpa0UsR0FDQXpVLEVBQUF0VCxFQUFBLEdBQ0FpMEMsRUFBQUQsR0FBQTk2RSxHQUFBcFYsR0FFQW8vRSxFQUFBLFNBQUFwL0UsR0FDQSxJQUFBa0YsRUFBQThxRixFQUFBL3VGLE1BQUE4aUUsR0FBQTNULElBQUFwd0QsR0FBQWs4QyxJQUNBLE9BQUE2ekMsR0FBQXZyQixFQUFBdC9ELEVBQUEsR0FBQUEsR0FHQWlyRixHQUFBTCxHQUFBLG1CQUFBdGdDLEdBQUEsR0FBQUEsRUFBQXJ0RCxTQUVBK3RGLEVBQUFDLEdBQUEsR0FFQSxJQUFBM3JCLEVBQUF0akUsS0FBQXlqRSxVQUNBeXJCLElBQUFsdkYsS0FBQXdqRSxZQUFBdmlFLE9BQ0FrdUYsRUFBQUosSUFBQXpyQixFQUNBOHJCLEVBQUFKLElBQUFFLEVBRUEsSUFBQUgsR0FBQUUsRUFBQSxDQUNBbndGLEVBQUFzd0YsRUFBQXR3RixFQUFBLElBQUFpa0UsR0FBQS9pRSxNQUNBLElBQUFnRSxFQUFBdTlDLEVBQUF4aEQsTUFBQWpCLEVBQUFrOEMsR0FFQSxPQURBaDNDLEVBQUF3L0QsWUFBQWhpRSxNQUFtQysvQyxLQUFBczFCLEdBQUE3N0IsTUFBQWtqQyxHQUFBaHdCLFFBQUFwcEQsSUFDbkMsSUFBQWsrRCxHQUFBaC9ELEVBQUFzL0QsR0FFQSxPQUFBNnJCLEdBQUFDLEVBQ0E3dEMsRUFBQXhoRCxNQUFBQyxLQUFBZzdDLElBRUFoM0MsRUFBQWhFLEtBQUE2MkUsS0FBQXFILEdBQ0FpUixFQUFBTixFQUFBN3FGLEVBQUFsRixRQUFBLEdBQUFrRixFQUFBbEYsUUFBQWtGLE9BS0F3cUQsSUFBQSx5REFBQXduQixHQUNBLElBQUF6MEIsRUFBQXdkLEdBQUFpWCxHQUNBcVosRUFBQSwwQkFBQTl0RSxLQUFBeTBELEdBQUEsYUFDQStZLEVBQUEsa0JBQUF4dEUsS0FBQXkwRCxHQUVBblQsR0FBQTFqRSxVQUFBNjJFLEdBQUEsV0FDQSxJQUFBaDdCLEVBQUEvNkMsVUFDQSxHQUFBOHVGLElBQUEvdUYsS0FBQXlqRSxVQUFBLENBQ0EsSUFBQTNrRSxFQUFBa0IsS0FBQWxCLFFBQ0EsT0FBQXlpRCxFQUFBeGhELE1BQUFtVSxHQUFBcFYsUUFBQWs4QyxHQUVBLE9BQUFoN0MsS0FBQXF2RixHQUFBLFNBQUF2d0YsR0FDQSxPQUFBeWlELEVBQUF4aEQsTUFBQW1VLEdBQUFwVixRQUFBazhDLFFBTUF5dUIsR0FBQTFHLEdBQUE1akUsVUFBQSxTQUFBb2lELEVBQUF5MEIsR0FDQSxJQUFBOFksRUFBQWpzQixHQUFBbVQsR0FDQSxHQUFBOFksRUFBQSxDQUNBLElBQUFuckYsRUFBQW1yRixFQUFBendGLEtBQUEsSUFDQTZqRSxHQUFBditELEtBQUF1K0QsR0FBQXYrRCxRQUVBbkMsTUFBb0JuRCxLQUFBMjNFLEVBQUF6MEIsS0FBQXV0QyxPQUlwQjVzQixHQUFBa1YsR0FBQXR5RSxFQUFBMC9DLEdBQUFubUQsUUFDQUEsS0FBQSxVQUNBa2pELEtBQUF6OEMsSUFJQWkrRCxHQUFBNWpFLFVBQUFxOUUsTUFwNGRBLFdBQ0EsSUFBQXg0RSxFQUFBLElBQUErK0QsR0FBQS9pRSxLQUFBdWpFLGFBT0EsT0FOQXYvRCxFQUFBdy9ELFlBQUE4QixHQUFBdGxFLEtBQUF3akUsYUFDQXgvRCxFQUFBNC9ELFFBQUE1akUsS0FBQTRqRSxRQUNBNS9ELEVBQUE2L0QsYUFBQTdqRSxLQUFBNmpFLGFBQ0E3L0QsRUFBQTgvRCxjQUFBd0IsR0FBQXRsRSxLQUFBOGpFLGVBQ0E5L0QsRUFBQSsvRCxjQUFBL2pFLEtBQUErakUsY0FDQS8vRCxFQUFBZ2dFLFVBQUFzQixHQUFBdGxFLEtBQUFna0UsV0FDQWhnRSxHQTYzZEErK0QsR0FBQTVqRSxVQUFBeWlFLFFBbDNkQSxXQUNBLEdBQUE1aEUsS0FBQTZqRSxhQUFBLENBQ0EsSUFBQTcvRCxFQUFBLElBQUErK0QsR0FBQS9pRSxNQUNBZ0UsRUFBQTQvRCxTQUFBLEVBQ0E1L0QsRUFBQTYvRCxjQUFBLE9BRUE3L0QsRUFBQWhFLEtBQUF3OEUsU0FDQTVZLFVBQUEsRUFFQSxPQUFBNS9ELEdBMDJkQSsrRCxHQUFBNWpFLFVBQUFMLE1BLzFkQSxXQUNBLElBQUFzdkQsRUFBQXB1RCxLQUFBdWpFLFlBQUF6a0UsUUFDQXd3RixFQUFBdHZGLEtBQUE0akUsUUFDQWUsRUFBQXp3RCxHQUFBazZDLEdBQ0FtaEMsRUFBQUQsRUFBQSxFQUNBblgsRUFBQXhULEVBQUF2VyxFQUFBbnRELE9BQUEsRUFDQXlpQixFQThvSUEsU0FBQWlQLEVBQUFFLEVBQUEydEQsR0FJQSxJQUhBLElBQUF4NkUsR0FBQSxFQUNBL0UsRUFBQXUvRSxFQUFBdi9FLFNBRUErRSxFQUFBL0UsR0FBQSxDQUNBLElBQUEyWSxFQUFBNG1FLEVBQUF4NkUsR0FDQXczRCxFQUFBNWpELEVBQUE0akQsS0FFQSxPQUFBNWpELEVBQUF0VyxNQUNBLFdBQUFxdkIsR0FBQTZxQyxFQUEwQyxNQUMxQyxnQkFBQTNxQyxHQUFBMnFDLEVBQXdDLE1BQ3hDLFdBQUEzcUMsRUFBQTB1QyxHQUFBMXVDLEVBQUFGLEVBQUE2cUMsR0FBK0QsTUFDL0QsZ0JBQUE3cUMsRUFBQTB1QyxHQUFBMXVDLEVBQUFFLEVBQUEycUMsSUFHQSxPQUFjN3FDLFFBQUFFLE9BN3BJZDI4RCxDQUFBLEVBQUFyWCxFQUFBbjRFLEtBQUFna0UsV0FDQXJ4QyxFQUFBalAsRUFBQWlQLE1BQ0FFLEVBQUFuUCxFQUFBbVAsSUFDQTV4QixFQUFBNHhCLEVBQUFGLEVBQ0Ezc0IsRUFBQXVwRixFQUFBMThELEVBQUFGLEVBQUEsRUFDQW85QyxFQUFBL3ZFLEtBQUE4akUsY0FDQTJyQixFQUFBMWYsRUFBQTl1RSxPQUNBMnRELEVBQUEsRUFDQThnQyxFQUFBbnVCLEdBQUF0Z0UsRUFBQWpCLEtBQUErakUsZUFFQSxJQUFBWSxJQUFBNHFCLEdBQUFwWCxHQUFBbDNFLEdBQUF5dUYsR0FBQXp1RixFQUNBLE9BQUFzeUUsR0FBQW5sQixFQUFBcHVELEtBQUF3akUsYUFFQSxJQUFBeC9ELEtBRUE4a0UsRUFDQSxLQUFBN25FLEtBQUEydEQsRUFBQThnQyxHQUFBLENBTUEsSUFIQSxJQUFBQyxHQUFBLEVBQ0E3d0YsRUFBQXN2RCxFQUhBcG9ELEdBQUFzcEYsS0FLQUssRUFBQUYsR0FBQSxDQUNBLElBQUE3MUUsRUFBQW0yRCxFQUFBNGYsR0FDQXJoQyxFQUFBMTBDLEVBQUEwMEMsU0FDQWhyRCxFQUFBc1csRUFBQXRXLEtBQ0EyNkMsRUFBQXFRLEVBQUF4dkQsR0FFQSxHQUFBd0UsR0FBQWdpRCxFQUNBeG1ELEVBQUFtL0MsT0FDVyxJQUFBQSxFQUFBLENBQ1gsR0FBQTM2QyxHQUFBK2hELEVBQ0EsU0FBQXlqQixFQUVBLE1BQUFBLEdBSUE5a0UsRUFBQTRxRCxLQUFBOXZELEVBRUEsT0FBQWtGLEdBb3pkQTYrRCxHQUFBMWpFLFVBQUF5aUYsR0FBQXpELEdBQ0F0YixHQUFBMWpFLFVBQUE4K0UsTUFsZ1FBLFdBQ0EsT0FBQUEsR0FBQWorRSxPQWtnUUE2aUUsR0FBQTFqRSxVQUFBc3hDLE9BcitQQSxXQUNBLFdBQUF1eUIsR0FBQWhqRSxLQUFBbEIsUUFBQWtCLEtBQUF5akUsWUFxK1BBWixHQUFBMWpFLFVBQUEwMkIsS0E1OFBBLFdBQ0E3MUIsS0FBQTJqRSxhQUFBNytELElBQ0E5RSxLQUFBMmpFLFdBQUFwckIsR0FBQXY0QyxLQUFBbEIsVUFFQSxJQUFBMDRCLEVBQUF4M0IsS0FBQTBqRSxXQUFBMWpFLEtBQUEyakUsV0FBQTFpRSxPQUdBLE9BQWN1MkIsT0FBQTE0QixNQUZkMDRCLEVBQUExeUIsRUFBQTlFLEtBQUEyakUsV0FBQTNqRSxLQUFBMGpFLGVBdzhQQWIsR0FBQTFqRSxVQUFBZzRFLE1BcjVQQSxTQUFBcjRFLEdBSUEsSUFIQSxJQUFBa0YsRUFDQWlvRSxFQUFBanNFLEtBRUFpc0UsYUFBQTVJLElBQUEsQ0FDQSxJQUFBbVosRUFBQXZaLEdBQUFnSixHQUNBdVEsRUFBQTlZLFVBQUEsRUFDQThZLEVBQUE3WSxXQUFBNytELEVBQ0FkLEVBQ0FndEUsRUFBQXpOLFlBQUFpWixFQUVBeDRFLEVBQUF3NEUsRUFFQSxJQUFBeEwsRUFBQXdMLEVBQ0F2USxJQUFBMUksWUFHQSxPQURBeU4sRUFBQXpOLFlBQUF6a0UsRUFDQWtGLEdBcTRQQTYrRCxHQUFBMWpFLFVBQUF5aUUsUUE5MlBBLFdBQ0EsSUFBQTlpRSxFQUFBa0IsS0FBQXVqRSxZQUNBLEdBQUF6a0UsYUFBQWlrRSxHQUFBLENBQ0EsSUFBQTZzQixFQUFBOXdGLEVBVUEsT0FUQWtCLEtBQUF3akUsWUFBQXZpRSxTQUNBMnVGLEVBQUEsSUFBQTdzQixHQUFBL2lFLFFBRUE0dkYsSUFBQWh1QixXQUNBNEIsWUFBQWhpRSxNQUNBKy9DLEtBQUFzMUIsR0FDQTc3QixNQUFBNG1CLElBQ0ExVCxRQUFBcHBELElBRUEsSUFBQWsrRCxHQUFBNHNCLEVBQUE1dkYsS0FBQXlqRSxXQUVBLE9BQUF6akUsS0FBQTYyRSxLQUFBalYsS0FnMlBBaUIsR0FBQTFqRSxVQUFBMHdGLE9BQUFodEIsR0FBQTFqRSxVQUFBd2pFLFFBQUFFLEdBQUExakUsVUFBQUwsTUEvMFBBLFdBQ0EsT0FBQXkwRSxHQUFBdnpFLEtBQUF1akUsWUFBQXZqRSxLQUFBd2pFLGNBaTFQQVgsR0FBQTFqRSxVQUFBbTJCLE1BQUF1dEMsR0FBQTFqRSxVQUFBcUIsS0FFQTIvRCxLQUNBMEMsR0FBQTFqRSxVQUFBZ2hFLElBejdQQSxXQUNBLE9BQUFuZ0UsT0EwN1BBNmlFLEdBTUFsRSxHQVFBN1IsR0FBQTRSLE1BSUEvYSxFQUFBLFdBQ0EsT0FBQSthLElBQ0t6Z0UsS0FBQUwsRUFBQUYsRUFBQUUsRUFBQUMsTUFBQWlILElBQUFqSCxFQUFBRCxRQUFBK2xELEtBYUoxbEQsS0FBQStCLDJUQ3hzaEJBdEMsRUFBQSxLQUNBQSxFQUFBLElBQ0FBLEVBQUEsSUFFRCxRQUFBQSxFQUFBLFNBQ0FBLEVBQUEsU0FDQUEsRUFBQSxTQUVBQSxFQUFBLElBQ0FveUYsRUFBQXB5RixFQUFBLDBEQUVNcXlGLGdyQkFBWTNuRixFQUFBQyxRQUFNQywrQ0FLcEIsT0FDRUYsRUFBQUMsUUFBQWpGLGNBQUEsT0FBS3NGLFVBQVksT0FDZk4sRUFBQUMsUUFBQWpGLGNBQUE0c0YsRUFBQTNuRixRQUFBLE1BQ0FELEVBQUFDLFFBQUFqRixjQUFBNnNGLEVBQUE1bkYsUUFBQSxNQUNBRCxFQUFBQyxRQUFBakYsY0FBQThzRixFQUFBN25GLFFBQUEsaUJBT1IsRUFBQXluRixFQUFBajRELFFBQU96dkIsRUFBQUMsUUFBQWpGLGNBQUMyc0YsRUFBRCxNQUFRbndGLFNBQVN1d0YsZUFBZSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDM5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vY29udGVudC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vY29udGVudC5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2NvbnRlbnQuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vdG9kby5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vdG9kby5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3RvZG8uY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgJy4uL2NvbXBvbmVudC1jc3MvdG9kby5jc3MnO1xyXG5pbXBvcnQgRmxpcE1vdmUgZnJvbSBcInJlYWN0LWZsaXAtbW92ZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9kb0l0ZW1zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHMpe1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgIHRoaXMuY3JlYXRlVGFza3MgPSB0aGlzLmNyZWF0ZVRhc2tzLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBkZWxldGUoa2V5KXtcclxuICAgIHRoaXMucHJvcHMuZGVsZXRlKGtleSk7XHJcbiAgfVxyXG5cclxuICBsaWtlKGtleSl7XHJcbiAgICB0aGlzLnByb3BzLmxpa2Uoa2V5KTtcclxuICB9XHJcblxyXG4gIC8vIGNvbXBsZXRlKGtleSl7XHJcbiAgLy8gICB0aGlzLnByb3BzLmNvbXBsZXRlKGtleSk7XHJcbiAgLy8gfVxyXG4gIC8vXHJcbiAgLy8gc2V0dGluZyhrZXkpe1xyXG4gIC8vICAgdGhpcy5wcm9wcy5zZXR0aW5nKGtleSk7XHJcbiAgLy8gfVxyXG4gIC8vXHJcbiAgLy8gZWRpdChrZXksIHZhbHVlVCwgdmFsdWVEKXtcclxuICAvL1xyXG4gIC8vICAgaWYgKHRoaXMuX2lucHV0VGl0bGUudmFsdWUgIT09IFwiXCIgKSB7XHJcbiAgLy8gICAgIGNvbnN0IHZhbHVlVCA9IHRoaXMuX2lucHV0VGl0bGUudmFsdWU7XHJcbiAgLy8gICAgIGNvbnN0IHZhbHVlRCA9IHRoaXMuX2lucHV0RGVzY3JpcHRpb24udmFsdWU7XHJcbiAgLy8gICAgIGNvbnNvbGUubG9nKGtleSk7XHJcbiAgLy8gICAgIGNvbnNvbGUubG9nKHZhbHVlRCk7XHJcbiAgLy8gICAgIHRoaXMucHJvcHMuZWRpdChrZXksIHZhbHVlVCwgdmFsdWVEKTtcclxuICAvLyAgICAgIHRoaXMuX2lucHV0VGl0bGUudmFsdWUgPSBcIlwiO1xyXG4gIC8vICAgICAgdGhpcy5faW5wdXREZXNjcmlwdGlvbi52YWx1ZSA9IFwiXCI7XHJcbiAgLy8gICAgICB9XHJcbiAgLy8gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIC8vIH1cclxuICAvL1xyXG4gIC8vIGFkZENvbW1lbnQoa2V5LCB2YWx1ZSl7XHJcbiAgLy9cclxuICAvLyAgIGlmICh0aGlzLl9pbnB1dENvbW1lbnQudmFsdWUgIT09IFwiXCIpIHtcclxuICAvLyAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9pbnB1dENvbW1lbnQudmFsdWU7XHJcbiAgLy8gICAgIHRoaXMucHJvcHMuYWRkQ29tbWVudChrZXksIHZhbHVlKTtcclxuICAvLyAgICAgY29uc29sZS5sb2codmFsdWUpO1xyXG4gIC8vICAgICBjb25zb2xlLmxvZyhrZXkpO1xyXG4gIC8vICAgICAgdGhpcy5faW5wdXRDb21tZW50LnZhbHVlID0gXCJcIjtcclxuICAvLyAgICAgIH1cclxuICAvLyAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgLy8gfVxyXG5cclxuICBjcmVhdGVUYXNrcyhpdGVtKSB7XHJcblxyXG4gICAgLy8gY29uc3QgY29tRW50cmllcyA9IHRoaXMucHJvcHMuYWRkQ29tbWVudDtcclxuICAgIC8vIGNvbnN0IGNvbUxpc3QgPSBjb21FbnRyaWVzLm1hcCh0aGlzLmFkZENvbW1lbnQpXHJcblxyXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSd0b2RvLWl0ZW0nIGRhdGEtZW1wdHktbWVzc2FnZT1cIk5vIFRPRE9zXCIga2V5PXtpdGVtLmtleX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9kby1pdGVtX190b3AtdG9kby1zZWN0aW9uXCI+XHJcbiAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9kby1pdGVtX190b3AtbGVmdC10b2RvLXNlY3Rpb25cIj5cclxuICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRvZG8taXRlbV9fdGl0bGVcIj57aXRlbS50ZXh0fTwvcD5cclxuICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRvZG8taXRlbV9fZGVzY3JpcHRpb25cIj57aXRlbS5kZXNjcmlwdGlvbn08L3A+XHJcbiAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvZG8taXRlbV9fdG9wLXJpZ2h0LXRvZG8tc2VjdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhcyBmYS10aW1lc1wiIG9uQ2xpY2s9eygpID0+IHRoaXMuZGVsZXRlKGl0ZW0ua2V5KX0+PC9pPlxyXG4gICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRvZG8taXRlbV9fbGlrZVwiPlxyXG4gICAgICAgICAgICAgICAgICAge2l0ZW0uaXNMaWtlZCA/IChcclxuICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmFzIGZhLXRodW1icy11cFwiIG9uQ2xpY2s9eygpID0+IHRoaXMubGlrZShpdGVtLmtleSl9Lz4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgOiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYXMgZmEtdGh1bWJzLWRvd25cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLmxpa2UoaXRlbS5rZXkpfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPXtgZmFzIGZhLWNoZWNrICR7aXRlbS5jb21wbGV0ZWQgPyBcImZhLWNoZWNrLWFjdGl2ZVwiIDogXCJcIn1gfVxyXG4gICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5jb21wbGV0ZShpdGVtLmtleSl9PjwvaT5cclxuICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9e2BmYXMgZmEtZWRpdCAke2l0ZW0uc2V0dGluZyA/IFwiZmEtZWRpdC1hY3RpdmVcIiA6IFwiXCJ9YH1cclxuICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0dGluZyhpdGVtLmtleSl9PjwvaT5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAge2l0ZW0uc2V0dGluZyAmJlxyXG4gICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcHVwLWJhY2tncm91bmRcIj5cclxuICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNldHRpbmdzLWZvcm1cIj5cclxuICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1mb3JtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgIDxoMT5FZGl0PC9oMT5cclxuICAgICAgICAgICAgICAgICAgICAgPGZvcm0gY2xhc3NOYW1lPVwiZWRpdC1mb3JtX19pbnB1dC1mb3JtXCIgb25TdWJtaXQ9eygpID0+IHRoaXMuZWRpdChpdGVtLmtleSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgIDxoMj5UaXRsZTwvaDI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHJlZj17KGEpID0+IHRoaXMuX2lucHV0VGl0bGUgPSBhfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0ge2l0ZW0udGV4dH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9pbnB1dD5cclxuICAgICAgICAgICAgICAgICAgICAgIDxoMj5EZXNjcmlwdGlvbjwvaDI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgcmVmPXsoYikgPT4gdGhpcy5faW5wdXREZXNjcmlwdGlvbiA9IGJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSB7aXRlbS5kZXNjcmlwdGlvbn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9pbnB1dD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCI+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50cy1mb3JtXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cImNvbW1lbnRzLWZvcm1fX2lucHV0LWZvcm1cIiBvblN1Ym1pdD17KCkgPT4gdGhpcy5hZGRDb21tZW50KGl0ZW0ua2V5KX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImNtbnRzXCI+Q29tbWVudHM8L2gxPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCByZWY9eyhhKSA9PiB0aGlzLl9pbnB1dENvbW1lbnQgPSBhfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImNvbW1lbnRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciBjb21tZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2lucHV0PlxyXG4gICAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJjb21tZW50cy1mb3JtX19jb21tZW50cy1saXN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICB7aXRlbS5jb21tZW50cy5tYXAoY29tbWVudCA9PiA8bGk+e2NvbW1lbnR9PC9saT4pfVxyXG4gICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uICBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldHRpbmcoaXRlbS5rZXkpfT4gQ2xvc2UgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICA8L2Rpdj5cclxuICB9XHJcblxyXG5cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgLy9sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIml0ZW1zXCIsIEpTT04uc3RyaW5naWZ5KFtdKSlcclxuICAgIGNvbnN0IHRvZG9FbnRyaWVzID0gW3RoaXMucHJvcHMuZW50cmllc107XHJcbiAgICBjb25zb2xlLmxvZyh0b2RvRW50cmllcyk7XHJcbiAgICBjb25zdCBsaXN0SXRlbXMgPSB0b2RvRW50cmllcy5tYXAodGhpcy5jcmVhdGVUYXNrcyk7XHJcblxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJpdGVtc1wiLCBKU09OLnN0cmluZ2lmeSh0b2RvRW50cmllcykpO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInRvZG8taXRlbS1saXN0XCIpLmlubmVySFRNTCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiaXRlbXNcIik7XHJcblxyXG4gICAgaWYgKCFsaXN0SXRlbXMgfHwgIWxpc3RJdGVtcy5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuby10b2RvLXBsYWNlaG9sZGVyXCI+Tm8gVE9ET3M8L3NwYW4+XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvZG8tbGlzdC1mb3JtXCIgPlxyXG4gICAgICAgICAgPGgxPlRPRE8gTGlzdDwvaDE+XHJcbiAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwidG9kby1pdGVtLWxpc3RcIiA+XHJcbiAgICAgICAgICAgIDxGbGlwTW92ZSBkdXJhdGlvbj17MjUwfSBlYXNpbmc9XCJlYXNlLW91dFwiPlxyXG4gICAgICAgICAgICAgIHtsaXN0SXRlbXN9XHJcbiAgICAgICAgICAgIDwvRmxpcE1vdmU+XHJcbiAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFRvZG9JdGVtcyBmcm9tICcuL3RvZG9JdGVtcy5qc3gnO1xyXG5pbXBvcnQgJy4uL2NvbXBvbmVudC1jc3MvY29udGVudC5jc3MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9kb0xpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgIHRoaXMuX2lucHV0VGl0bGUgPSBSZWFjdC5jcmVhdGVSZWYoKTtcclxuICAgIHRoaXMuX2lucHV0RGVzY3JpcHRpb24gPSBSZWFjdC5jcmVhdGVSZWYoKTtcclxuXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBpdGVtczogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIml0ZW1zXCIpKVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmFkZEl0ZW0gPSB0aGlzLmFkZEl0ZW0uYmluZCh0aGlzKTtcclxuICAgIC8vIHRoaXMuZGVsZXRlSXRlbSA9IHRoaXMuZGVsZXRlSXRlbS5iaW5kKHRoaXMpO1xyXG4gICAgLy8gdGhpcy5saWtlSXRlbSA9IHRoaXMubGlrZUl0ZW0uYmluZCh0aGlzKTtcclxuICAgIC8vIHRoaXMuY29tcGxldGVJdGVtID0gdGhpcy5jb21wbGV0ZUl0ZW0uYmluZCh0aGlzKTtcclxuICAgIC8vIHRoaXMuY29tbWVudEl0ZW0gPSB0aGlzLmNvbW1lbnRJdGVtLmJpbmQodGhpcyk7XHJcbiAgICAvLyB0aGlzLnNldHRpbmdJdGVtID0gdGhpcy5zZXR0aW5nSXRlbS5iaW5kKHRoaXMpO1xyXG4gICAgLy8gdGhpcy5lZGl0SXRlbSA9IHRoaXMuZWRpdEl0ZW0uYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG5cclxuIGFkZEl0ZW0odGl0bGUsIGRlc2NyaXB0aW9uKSB7XHJcbiAgaWYgKHRoaXMuX2lucHV0VGl0bGUudmFsdWUgIT09IFwiXCIgJiYgdGhpcy5faW5wdXREZXNjcmlwdGlvbi52YWx1ZSAhPT0gXCJcIikge1xyXG5cclxuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5faW5wdXRUaXRsZS52YWx1ZTtcclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdGhpcy5faW5wdXREZXNjcmlwdGlvbi52YWx1ZTtcclxuXHJcbiAgICB0aGlzLl9pbnB1dFRpdGxlLnZhbHVlID0gXCJcIjtcclxuICAgIHRoaXMuX2lucHV0RGVzY3JpcHRpb24udmFsdWUgPSBcIlwiO1xyXG4gICAgdGhpcy5wcm9wcy5hZGRJdGVtKHRpdGxlLCBkZXNjcmlwdGlvbik7XHJcbiAgfVxyXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbn1cclxuXHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSd0b2RvLWZvcm0nPlxyXG4gICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cInRvZG8tZm9ybV9faW5wdXQtZm9ybVwiIG9uU3VibWl0PXt0aGlzLmFkZEl0ZW19PlxyXG4gICAgICAgICAgPGgxPk5ldyBUT0RPIEl0ZW08L2gxPlxyXG4gICAgICAgICAgPGlucHV0IHJlZj17dGhpcy5faW5wdXRUZXh0fVxyXG4gICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHRhc2tcIj5cclxuICAgICAgICAgICAgPC9pbnB1dD5cclxuICAgICAgICAgIDxpbnB1dCByZWY9e3RoaXMuX2lucHV0RGVzY3JpcHRpb259XHJcbiAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgZGVzY3JpcHRpb25cIj5cclxuICAgICAgICAgICAgPC9pbnB1dD5cclxuICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiPkFkZDwvYnV0dG9uPlxyXG4gICAgICAgIDwvZm9ybT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZm9vdGVye1xcclxcbiAgY29sb3I6ICNDN0UzQzg7XFxyXFxuICBiYWNrZ3JvdW5kOiAjNDNBMDQ3O1xcclxcbiAgbWF4LWhlaWdodDogMTB2aDtcXHJcXG4gIGZvbnQtc2l6ZTogMzVweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAyNXB4O1xcclxcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDI1cHg7XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Zvb3Rlci5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vZm9vdGVyLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vZm9vdGVyLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0ICcuLi9jb21wb25lbnQtY3NzL2Zvb3Rlci5jc3MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9vdGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4oXHJcbiAgICAgIDxmb290ZXIgY2xhc3M9XCJmb290ZXJcIj5FUEFNPC9mb290ZXI+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJmdW5jdGlvbiBmaW5kSXRlbShpbmRleCl7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmtleSA9PT0gaW5kZXgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpdGVtU2V0KGluZGV4KXtcclxuICAgIHRoaXMuc2V0U3RhdGUoKHByZXZTdGF0ZSk9PntcclxuICAgICAgICBwcmV2U3RhdGUuaXRlbXMuc3BsaWNlKGluZGV4LDEsdGhpcy5zdGF0ZS5pdGVtc1tpbmRleF0pXHJcbiAgICAgICAgcmV0dXJue1xyXG4gICAgICAgICAgcHJldlN0YXRlXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG5mdW5jdGlvbiBhZGRJdGVtKHRpdGxlLCBkZXNjcmlwdGlvbil7XHJcbiAgY29uc3QgbmV3SXRlbSA9IHtcclxuICAgIHRpdGxlOiB0aXRsZSxcclxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcclxuICAgIGlzTGlrZWQ6IGZhbHNlLFxyXG4gICAgY29tcGxldGVkOiBmYWxzZSxcclxuICAgIHNldHRpbmc6IGZhbHNlLFxyXG4gICAga2V5OiBEYXRlLm5vdygpLFxyXG4gICAgY29tbWVudHM6W11cclxuICB9O1xyXG5cclxuICBjb25zb2xlLmxvZyhuZXdJdGVtKVxyXG5cclxuICAgICAgdGhpcy5zZXRTdGF0ZSgocHJldlN0YXRlKSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpdGVtczogcHJldlN0YXRlLml0ZW1zLmNvbmNhdChuZXdJdGVtKVxyXG4gICAgfTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29tbWVudEl0ZW0oa2V5LCB2YWx1ZSkge1xyXG4gICAgY29uc3QgaXRlbUluZGV4ID0gdGhpcy5maW5kSXRlbShrZXkpXHJcbiAgICBjb25zdCBzZWxlY3RlZEtleSA9IHRoaXMuc3RhdGUuaXRlbXNbaXRlbUluZGV4XVxyXG4gICAgc2VsZWN0ZWRLZXkuY29tbWVudHMgPSBbLi4uc2VsZWN0ZWRLZXkuY29tbWVudHMsIHZhbHVlXVxyXG4gICAgcmV0dXJuIHRoaXMuaXRlbVNldChpdGVtSW5kZXgpXHJcbiAgfVxyXG5cclxuXHJcbmZ1bmN0aW9uIHNldHRpbmdJdGVtKGtleSl7XHJcbiAgICBjb25zdCBpdGVtSW5kZXggPSB0aGlzLmZpbmRJdGVtKGtleSlcclxuICAgIGNvbnN0IHNlbGVjdGVkS2V5ID0gdGhpcy5zdGF0ZS5pdGVtc1tpdGVtSW5kZXhdXHJcbiAgICBzZWxlY3RlZEtleS5zZXR0aW5nID0gIXNlbGVjdGVkS2V5LnNldHRpbmc7XHJcbiAgICByZXR1cm4gdGhpcy5pdGVtU2V0KGl0ZW1JbmRleClcclxuICB9XHJcblxyXG5mdW5jdGlvbiBlZGl0SXRlbShrZXksIHZhbHVlVCwgdmFsdWVEKSB7XHJcbiAgICBjb25zdCBpdGVtSW5kZXggPSB0aGlzLmZpbmRJdGVtKGtleSlcclxuICAgIGNvbnN0IHNlbGVjdGVkS2V5ID0gdGhpcy5zdGF0ZS5pdGVtc1tpdGVtSW5kZXhdXHJcbiAgICBzZWxlY3RlZEtleS50ZXh0ID0gdmFsdWVUO1xyXG4gICAgc2VsZWN0ZWRLZXkuZGVzY3JpcHRpb24gPSB2YWx1ZUQ7XHJcbiAgICByZXR1cm4gdGhpcy5pdGVtU2V0KGl0ZW1JbmRleClcclxuXHJcbiAgfVxyXG5cclxuZnVuY3Rpb24gY29tcGxldGVJdGVtKGtleSl7XHJcbiAgICBjb25zdCBpdGVtSW5kZXggPSB0aGlzLmZpbmRJdGVtKGtleSlcclxuICAgIGNvbnN0IHNlbGVjdGVkS2V5ID0gdGhpcy5zdGF0ZS5pdGVtc1tpdGVtSW5kZXhdXHJcbiAgICBzZWxlY3RlZEtleS5jb21wbGV0ZWQgPSAhc2VsZWN0ZWRLZXkuY29tcGxldGVkO1xyXG4gICAgcmV0dXJuIHRoaXMuaXRlbVNldChpdGVtSW5kZXgpXHJcbiAgfVxyXG5cclxuY29uc3QgbGlrZUl0ZW0gPSBmdW5jdGlvbiAoa2V5KXtcclxuICAgIGNvbnN0IGl0ZW1JbmRleCA9IHRoaXMuZmluZEl0ZW0oa2V5KVxyXG4gICAgY29uc3Qgc2VsZWN0ZWRLZXkgPSB0aGlzLnN0YXRlLml0ZW1zW2l0ZW1JbmRleF1cclxuICAgIHNlbGVjdGVkS2V5LmlzTGlrZWQgPSAhc2VsZWN0ZWRLZXkuaXNMaWtlZDtcclxuICAgIHJldHVybiB0aGlzLml0ZW1TZXQoaXRlbUluZGV4KVxyXG4gIH1cclxuXHJcbmNvbnN0IGRlbGV0ZUl0ZW0gPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICBjb25zdCBmaWx0ZXJlZEl0ZW1zID0gdGhpcy5zdGF0ZS5pdGVtcy5maWx0ZXIoaXRlbSA9PiB7XHJcbiAgICAgIHJldHVybiAoaXRlbS5rZXkgIT09IGtleSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgaXRlbXM6IGZpbHRlcmVkSXRlbXNcclxuICAgIH0pXHJcblxyXG4gIH1cclxuXHJcbiAgbW9kdWxlLmV4cG9ydHMgPSB7YWRkSXRlbSwgbGlrZUl0ZW0sIGRlbGV0ZUl0ZW19XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0ICcuLi9jb21wb25lbnQtY3NzL3RvZG8uY3NzJztcclxuaW1wb3J0IFRvZG9JdGVtcyBmcm9tICcuL3RvZG9JdGVtcy5qc3gnO1xyXG5cclxuaW1wb3J0IHthZGRJdGVtLCBsaWtlSXRlbSwgZGVsZXRlSXRlbX0gZnJvbSBcIi4vVG9kb1NlcnZpY2VzLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0Q29udGVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gIHRoaXMuc3RhdGUgPSB7XHJcbiAgICBpdGVtczogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIml0ZW1zXCIpKVxyXG4gIH07XHJcbn1cclxuXHJcbiAgaGFuZGxlTGlrZSAoa2V5KSB7XHJcbiAgICAgbGlrZUl0ZW0oa2V5KVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlQWRkaW5nSXRlbSAodGl0bGUsIGRlc2NyaXB0aW9uKXtcclxuICAgICAgYWRkSXRlbSAodGl0bGUsIGRlc2NyaXB0aW9uKVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlUmVtb3ZlVG9kb0VsZW0gKGtleSl7XHJcbiAgICAgIGRlbGV0ZUl0ZW0gKGtleSlcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybihcclxuICAgICAgPFRvZG9JdGVtcyBlbnRyaWVzPXt0aGlzLnN0YXRlLml0ZW1zfVxyXG4gICAgICAgICAgICAgICAgIGxpa2U9e3RoaXMuc3RhdGUuaGFuZGxlTGlrZX1cclxuICAgICAgICAgICAgICAgICBkZWxldGU9e3RoaXMuc3RhdGUuaGFuZGxlUmVtb3ZlVG9kb0VsZW19XHJcbiAgICAgICAgICAgICAgICAgYWRkSXRlbT17dGhpcy5zdGF0ZS5oYW5kbGVBZGRpbmdJdGVtfS8+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCAnLi4vY29tcG9uZW50LWNzcy9jb250ZW50LmNzcyc7XHJcbmltcG9ydCBUb2RvTGlzdCBmcm9tICcuL3RvZG9MaXN0LmpzeCc7XHJcbmltcG9ydCBMaXN0Q29udGVudCBmcm9tICcuL2xpc3RDb250LmpzeCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50e1xyXG5cclxuICByZW5kZXIoKXtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb250ZW50Jz5cclxuICAgICAgICA8VG9kb0xpc3QvPlxyXG4gICAgICAgIDxMaXN0Q29udGVudC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jb250ZW50e1xcclxcbiAgcGFkZGluZzogMTVweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNEREREREQ7XFxyXFxuICBtaW4taGVpZ2h0OiA4MHZoO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1mb3JtX19pbnB1dC1mb3Jte1xcclxcbiAgYm9yZGVyLXJhZGl1czogMjVweDtcXHJcXG4gIGJhY2tncm91bmQ6ICAjNDNBMDQ3O1xcclxcbiAgY29sb3I6ICNFMUYwRTI7XFxyXFxuICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgaGVpZ2h0OiA3NXZoO1xcclxcbiAgbWFyZ2luOjEwcHg7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcblxcclxcblxcclxcbi50b2RvLWZvcm17XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gIG1hcmdpbjoxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG5pbnB1dHtcXHJcXG4gICBtYXJnaW46IDEwcHg7XFxyXFxuICAgcGFkZGluZzogNXB4O1xcclxcbiAgIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTFGMEUyO1xcclxcbiAgIGNvbG9yOiAjNDNBMDQ3O1xcclxcbiB9XFxyXFxuXFxyXFxuYnV0dG9ue1xcclxcbiAgIGJvcmRlci1yYWRpdXM6IDI1cHg7XFxyXFxuICAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgIGJhY2tncm91bmQtY29sb3I6ICNFMUYwRTI7XFxyXFxuICAgY29sb3I6ICM0M0EwNDc7XFxyXFxuIH1cXHJcXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjFcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBiYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksQT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxDPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGVhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGZhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksaGE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxqYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2I9RXJyb3IoYytcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9YmE/dm9pZCAwOkQoXCIyMjdcIik7XG5mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixoLGcsayl7dGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITE7dGhpcy5fY2F1Z2h0RXJyb3I9bnVsbDt2YXIgdj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyx2KX1jYXRjaChsKXt0aGlzLl9jYXVnaHRFcnJvcj1sLHRoaXMuX2hhc0NhdWdodEVycm9yPSEwfX1cbnZhciBFPXtfY2F1Z2h0RXJyb3I6bnVsbCxfaGFzQ2F1Z2h0RXJyb3I6ITEsX3JldGhyb3dFcnJvcjpudWxsLF9oYXNSZXRocm93RXJyb3I6ITEsaW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsZyxrKXtrYS5hcHBseShFLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7RS5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKEUuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHY9RS5jbGVhckNhdWdodEVycm9yKCk7RS5faGFzUmV0aHJvd0Vycm9yfHwoRS5faGFzUmV0aHJvd0Vycm9yPSEwLEUuX3JldGhyb3dFcnJvcj12KX19LHJldGhyb3dDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBtYS5hcHBseShFLGFyZ3VtZW50cyl9LGhhc0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEUuX2hhc0NhdWdodEVycm9yfSxjbGVhckNhdWdodEVycm9yOmZ1bmN0aW9uKCl7aWYoRS5faGFzQ2F1Z2h0RXJyb3Ipe3ZhciBhPVxuRS5fY2F1Z2h0RXJyb3I7RS5fY2F1Z2h0RXJyb3I9bnVsbDtFLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1EKFwiMTk4XCIpfX07ZnVuY3Rpb24gbWEoKXtpZihFLl9oYXNSZXRocm93RXJyb3Ipe3ZhciBhPUUuX3JldGhyb3dFcnJvcjtFLl9yZXRocm93RXJyb3I9bnVsbDtFLl9oYXNSZXRocm93RXJyb3I9ITE7dGhyb3cgYTt9fXZhciBuYT1udWxsLG9hPXt9O1xuZnVuY3Rpb24gcGEoKXtpZihuYSlmb3IodmFyIGEgaW4gb2Epe3ZhciBiPW9hW2FdLGM9bmEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDpEKFwiOTZcIixhKTtpZighcWFbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6RChcIjk3XCIsYSk7cWFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0saD1iLGc9ZDtyYS5oYXNPd25Qcm9wZXJ0eShnKT9EKFwiOTlcIixnKTp2b2lkIDA7cmFbZ109Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmc2Eoa1tlXSxoLGcpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHNhKGYucmVnaXN0cmF0aW9uTmFtZSxoLGcpLGU9ITApOmU9ITE7ZT92b2lkIDA6RChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHNhKGEsYixjKXt0YVthXT9EKFwiMTAwXCIsYSk6dm9pZCAwO3RhW2FdPWI7dWFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgcWE9W10scmE9e30sdGE9e30sdWE9e307ZnVuY3Rpb24gdmEoYSl7bmE/RChcIjEwMVwiKTp2b2lkIDA7bmE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7cGEoKX1mdW5jdGlvbiB3YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtvYS5oYXNPd25Qcm9wZXJ0eShjKSYmb2FbY109PT1kfHwob2FbY10/RChcIjEwMlwiLGMpOnZvaWQgMCxvYVtjXT1kLGI9ITApfWImJnBhKCl9XG52YXIgeGE9T2JqZWN0LmZyZWV6ZSh7cGx1Z2luczpxYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6cmEscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6dGEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczp1YSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp2YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6d2F9KSxDYT1udWxsLERhPW51bGwsRWE9bnVsbDtmdW5jdGlvbiBGYShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PUVhKGQpO0UuaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBHYShhLGIpe251bGw9PWI/RChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gSGEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIElhPW51bGw7XG5mdW5jdGlvbiBKYShhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKylGYShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJkZhKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIEthKGEpe3JldHVybiBKYShhLCEwKX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gSmEoYSwhMSl9dmFyIE1hPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOnZhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp3YX07XG5mdW5jdGlvbiBOYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPUNhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBPYShhLGIpe251bGwhPT1hJiYoSWE9R2EoSWEsYSkpO2E9SWE7SWE9bnVsbDthJiYoYj9IYShhLEthKTpIYShhLExhKSxJYT9EKFwiOTVcIik6dm9pZCAwLEUucmV0aHJvd0NhdWdodEVycm9yKCkpfWZ1bmN0aW9uIFBhKGEsYixjLGQpe2Zvcih2YXIgZT1udWxsLGY9MDtmPHFhLmxlbmd0aDtmKyspe3ZhciBoPXFhW2ZdO2gmJihoPWguZXh0cmFjdEV2ZW50cyhhLGIsYyxkKSkmJihlPUdhKGUsaCkpfU9hKGUsITEpfXZhciBRYT1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246TWEsZ2V0TGlzdGVuZXI6TmEscnVuRXZlbnRzSW5CYXRjaDpPYSxydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOlBhfSksUmE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRj1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK1JhLFNhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrUmE7XG5mdW5jdGlvbiBUYShhKXtpZihhW0ZdKXJldHVybiBhW0ZdO2Zvcig7IWFbRl07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtGXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIFVhKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTtEKFwiMzNcIil9ZnVuY3Rpb24gVmEoYSl7cmV0dXJuIGFbU2FdfHxudWxsfXZhciBYYT1PYmplY3QuZnJlZXplKHtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbRl09YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6VGEsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbRl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpVYSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOlZhLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW1NhXT1ifX0pO1xuZnVuY3Rpb24gTChhKXtkbyBhPWFbXCJyZXR1cm5cIl07d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gYmIoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT1MKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfWZ1bmN0aW9uIGNiKGEsYixjKXtpZihiPU5hKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9R2EoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9R2EoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gZGIoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmYmIoYS5fdGFyZ2V0SW5zdCxjYixhKX1cbmZ1bmN0aW9uIGViKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0woYik6bnVsbDtiYihiLGNiLGEpfX1mdW5jdGlvbiBmYihhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1OYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9R2EoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9R2EoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIGdiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmZmIoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIGhiKGEpe0hhKGEsZGIpfVxuZnVuY3Rpb24gaWIoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGg9MCxnPWU7ZztnPUwoZykpaCsrO2c9MDtmb3IodmFyIGs9ZjtrO2s9TChrKSlnKys7Zm9yKDswPGgtZzspZT1MKGUpLGgtLTtmb3IoOzA8Zy1oOylmPUwoZiksZy0tO2Zvcig7aC0tOyl7aWYoZT09PWZ8fGU9PT1mLmFsdGVybmF0ZSlicmVhayBhO2U9TChlKTtmPUwoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2g9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWgmJmg9PT1mKWJyZWFrO2UucHVzaChjKTtjPUwoYyl9Zm9yKGM9W107ZCYmZCE9PWY7KXtoPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztjLnB1c2goZCk7ZD1MKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspZmIoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspZmIoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIgamI9T2JqZWN0LmZyZWV6ZSh7YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczpoYixhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXtIYShhLGViKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOmliLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe0hhKGEsZ2IpfX0pLGtiPW51bGw7ZnVuY3Rpb24gbGIoKXsha2ImJm0uY2FuVXNlRE9NJiYoa2I9XCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50P1widGV4dENvbnRlbnRcIjpcImlubmVyVGV4dFwiKTtyZXR1cm4ga2J9dmFyIE09e19yb290Om51bGwsX3N0YXJ0VGV4dDpudWxsLF9mYWxsYmFja1RleHQ6bnVsbH07XG5mdW5jdGlvbiBtYigpe2lmKE0uX2ZhbGxiYWNrVGV4dClyZXR1cm4gTS5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9TS5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPW5iKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgaD1jLWE7Zm9yKGQ9MTtkPD1oJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtNLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gTS5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIG5iKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gTS5fcm9vdD9NLl9yb290LnZhbHVlOk0uX3Jvb3RbbGIoKV19XG52YXIgb2I9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxwYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6Qy50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIE4oYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP0MudGhhdFJldHVybnNUcnVlOkMudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbkEoTi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1DLnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OkMudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxvYi5sZW5ndGg7YSsrKXRoaXNbb2JbYV1dPW51bGx9fSk7Ti5JbnRlcmZhY2U9cGI7Ti5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7QShlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9QSh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtxYihjKTtyZXR1cm4gY307cWIoTik7XG5mdW5jdGlvbiByYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBzYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6RChcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gcWIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9cmI7YS5yZWxlYXNlPXNifXZhciB0Yj1OLmV4dGVuZCh7ZGF0YTpudWxsfSksdWI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPVs5LDEzLDI3LDMyXSx3Yj1tLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cseGI9bnVsbDttLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoeGI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB5Yj1tLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXhiLHpiPW0uY2FuVXNlRE9NJiYoIXdifHx4YiYmODx4YiYmMTE+PXhiKSxBYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxCYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcENvbXBvc2l0aW9uRW5kXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wVGV4dElucHV0XCIsXCJ0b3BQYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvbkVuZCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uU3RhcnQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25VcGRhdGUgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9fSxLYj0hMTtcbmZ1bmN0aW9uIExiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlVcFwiOnJldHVybi0xIT09dmIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJ0b3BLZXlEb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwidG9wS2V5UHJlc3NcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcEJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBNYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBOYj0hMTtmdW5jdGlvbiBPYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gTWIoYik7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0tiPSEwO3JldHVybiBBYjtjYXNlIFwidG9wVGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1BYiYmS2I/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gUGIoYSxiKXtpZihOYilyZXR1cm5cInRvcENvbXBvc2l0aW9uRW5kXCI9PT1hfHwhd2ImJkxiKGEsYik/KGE9bWIoKSxNLl9yb290PW51bGwsTS5fc3RhcnRUZXh0PW51bGwsTS5fZmFsbGJhY2tUZXh0PW51bGwsTmI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIHpiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIFFiPXtldmVudFR5cGVzOkJiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZih3YiliOntzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uU3RhcnRcIjplPUJiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjplPUJiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uVXBkYXRlXCI6ZT1CYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgTmI/TGIoYSxjKSYmKGU9QmIuY29tcG9zaXRpb25FbmQpOlwidG9wS2V5RG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1CYi5jb21wb3NpdGlvblN0YXJ0KTtlPyh6YiYmKE5ifHxlIT09QmIuY29tcG9zaXRpb25TdGFydD9lPT09QmIuY29tcG9zaXRpb25FbmQmJk5iJiYoZj1tYigpKTooTS5fcm9vdD1kLE0uX3N0YXJ0VGV4dD1uYigpLE5iPSEwKSksZT10Yi5nZXRQb29sZWQoZSxcbmIsYyxkKSxmP2UuZGF0YT1mOihmPU1iKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxoYihlKSxmPWUpOmY9bnVsbDsoYT15Yj9PYihhLGMpOlBiKGEsYykpPyhiPXViLmdldFBvb2xlZChCYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsaGIoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sUmI9bnVsbCxTYj1udWxsLFRiPW51bGw7ZnVuY3Rpb24gVWIoYSl7aWYoYT1EYShhKSl7UmImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBSYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpEKFwiMTk0XCIpO3ZhciBiPUNhKGEuc3RhdGVOb2RlKTtSYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19dmFyIFZiPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe1JiPWF9fTtmdW5jdGlvbiBXYihhKXtTYj9UYj9UYi5wdXNoKGEpOlRiPVthXTpTYj1hfVxuZnVuY3Rpb24gWGIoKXtyZXR1cm4gbnVsbCE9PVNifHxudWxsIT09VGJ9ZnVuY3Rpb24gWWIoKXtpZihTYil7dmFyIGE9U2IsYj1UYjtUYj1TYj1udWxsO1ViKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylVYihiW2FdKX19dmFyIFpiPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpWYixlbnF1ZXVlU3RhdGVSZXN0b3JlOldiLG5lZWRzU3RhdGVSZXN0b3JlOlhiLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOllifSk7ZnVuY3Rpb24gJGIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBhYyhhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBiYygpe312YXIgY2M9ITE7ZnVuY3Rpb24gZGMoYSxiKXtpZihjYylyZXR1cm4gYShiKTtjYz0hMDt0cnl7cmV0dXJuICRiKGEsYil9ZmluYWxseXtjYz0hMSxYYigpJiYoYmMoKSxZYigpKX19XG52YXIgZWM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gZmMoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFlY1thLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gZ2MoYSl7YT1hLnRhcmdldHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1cbmZ1bmN0aW9uIGhjKGEsYil7aWYoIW0uY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2E9XCJvblwiK2E7Yj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gaWMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIGpjKGEpe3ZhciBiPWljKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0LmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtjLnNldC5jYWxsKHRoaXMsYSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5mdW5jdGlvbiBrYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9amMoYSkpfWZ1bmN0aW9uIGxjKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1pYyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIG1jPWJhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLE89XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLG5jPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxvYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQscGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5yZXR1cm5cIik6NjAxMDUscWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxzYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHRjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHZjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxcbndjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseGM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIHljKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14YyYmYVt4Y118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6YyhhKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSByYzpyZXR1cm5cIlJlYWN0RnJhZ21lbnRcIjtjYXNlIHFjOnJldHVyblwiUmVhY3RQb3J0YWxcIjtjYXNlIG9jOnJldHVyblwiUmVhY3RDYWxsXCI7Y2FzZSBwYzpyZXR1cm5cIlJlYWN0UmV0dXJuXCJ9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBBYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlO3ZhciBlPXpjKGEpO3ZhciBmPW51bGw7YyYmKGY9emMoYykpO2M9ZDtlPVwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKGM/XCIgKGF0IFwiK2MuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitjLmxpbmVOdW1iZXIrXCIpXCI6Zj9cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDplPVwiXCJ9Yis9ZTthPWFbXCJyZXR1cm5cIl19d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgQmM9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLENjPXt9LERjPXt9O2Z1bmN0aW9uIEVjKGEpe2lmKERjLmhhc093blByb3BlcnR5KGEpKXJldHVybiEwO2lmKENjLmhhc093blByb3BlcnR5KGEpKXJldHVybiExO2lmKEJjLnRlc3QoYSkpcmV0dXJuIERjW2FdPSEwO0NjW2FdPSEwO3JldHVybiExfVxuZnVuY3Rpb24gRmMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gR2MoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8RmMoYSxiLGMsZCkpcmV0dXJuITA7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9XG5mdW5jdGlvbiBVKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgVj17fTtcImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwwLCExLGEsbnVsbCl9KTtcbltbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtWW2JdPW5ldyBVKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMiwhMSxhLG51bGwpfSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMCxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw2LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIEhjPS9bXFwtXFw6XShbYS16XSkvZztmdW5jdGlvbiBTYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShIYyxcblNjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShIYyxTYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShIYyxTYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO1YudGFiSW5kZXg9bmV3IFUoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24gVGMoYSxiLGMsZCl7dmFyIGU9Vi5oYXNPd25Qcm9wZXJ0eShiKT9WW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoR2MoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP0VjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gVmMoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9V2MobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBYYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlRjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBZYyhhLGIpe1hjKGEsYik7dmFyIGM9V2MoYi52YWx1ZSk7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2IuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9aYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZaYyhhLGIudHlwZSxXYyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uICRjKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKVwiXCI9PT1hLnZhbHVlJiYoYS52YWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpLGEuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtiPWEubmFtZTtcIlwiIT09YiYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWImJihhLm5hbWU9Yil9ZnVuY3Rpb24gWmMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfVxuZnVuY3Rpb24gV2MoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fXZhciBhZD17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDaGFuZ2UgdG9wQ2xpY2sgdG9wRm9jdXMgdG9wSW5wdXQgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBiZChhLGIsYyl7YT1OLmdldFBvb2xlZChhZC5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO1diKGMpO2hiKGEpO3JldHVybiBhfXZhciBjZD1udWxsLGRkPW51bGw7ZnVuY3Rpb24gZWQoYSl7T2EoYSwhMSl9XG5mdW5jdGlvbiBmZChhKXt2YXIgYj1VYShhKTtpZihsYyhiKSlyZXR1cm4gYX1mdW5jdGlvbiBnZChhLGIpe2lmKFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBoZD0hMTttLmNhblVzZURPTSYmKGhkPWhjKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIGlkKCl7Y2QmJihjZC5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixqZCksZGQ9Y2Q9bnVsbCl9ZnVuY3Rpb24gamQoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJmZkKGRkKSYmKGE9YmQoZGQsYSxnYyhhKSksZGMoZWQsYSkpfWZ1bmN0aW9uIGtkKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhpZCgpLGNkPWIsZGQ9YyxjZC5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixqZCkpOlwidG9wQmx1clwiPT09YSYmaWQoKX1cbmZ1bmN0aW9uIGxkKGEpe2lmKFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI9PT1hfHxcInRvcEtleVVwXCI9PT1hfHxcInRvcEtleURvd25cIj09PWEpcmV0dXJuIGZkKGRkKX1mdW5jdGlvbiBtZChhLGIpe2lmKFwidG9wQ2xpY2tcIj09PWEpcmV0dXJuIGZkKGIpfWZ1bmN0aW9uIG5kKGEsYil7aWYoXCJ0b3BJbnB1dFwiPT09YXx8XCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGZkKGIpfVxudmFyIG9kPXtldmVudFR5cGVzOmFkLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6aGQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1VhKGIpOndpbmRvdyxmPXZvaWQgMCxoPXZvaWQgMCxnPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09Z3x8XCJpbnB1dFwiPT09ZyYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1nZDpmYyhlKT9oZD9mPW5kOihmPWxkLGg9a2QpOihnPWUubm9kZU5hbWUsIWd8fFwiaW5wdXRcIiE9PWcudG9Mb3dlckNhc2UoKXx8XCJjaGVja2JveFwiIT09ZS50eXBlJiZcInJhZGlvXCIhPT1lLnR5cGV8fChmPW1kKSk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gYmQoZixjLGQpO2gmJmgoYSxlLGIpO1widG9wQmx1clwiPT09YSYmbnVsbCE9YiYmKGE9Yi5fd3JhcHBlclN0YXRlfHxlLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJlpjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LHBkPU4uZXh0ZW5kKHt2aWV3Om51bGwsXG5kZXRhaWw6bnVsbH0pLHFkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiByZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPXFkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gc2QoKXtyZXR1cm4gcmR9XG52YXIgdGQ9cGQuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOnNkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pLHVkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX19LHZkPXtldmVudFR5cGVzOnVkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxcbmIsYyxkKXtpZihcInRvcE1vdXNlT3ZlclwiPT09YSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fFwidG9wTW91c2VPdXRcIiE9PWEmJlwidG9wTW91c2VPdmVyXCIhPT1hKXJldHVybiBudWxsO3ZhciBlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O1widG9wTW91c2VPdXRcIj09PWE/KGE9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP1RhKGIpOm51bGwpOmE9bnVsbDtpZihhPT09YilyZXR1cm4gbnVsbDt2YXIgZj1udWxsPT1hP2U6VWEoYSk7ZT1udWxsPT1iP2U6VWEoYik7dmFyIGg9dGQuZ2V0UG9vbGVkKHVkLm1vdXNlTGVhdmUsYSxjLGQpO2gudHlwZT1cIm1vdXNlbGVhdmVcIjtoLnRhcmdldD1mO2gucmVsYXRlZFRhcmdldD1lO2M9dGQuZ2V0UG9vbGVkKHVkLm1vdXNlRW50ZXIsYixjLGQpO2MudHlwZT1cIm1vdXNlZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1cbmY7aWIoaCxjLGEsYik7cmV0dXJuW2gsY119fTtmdW5jdGlvbiB3ZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7YltcInJldHVyblwiXTspYj1iW1wicmV0dXJuXCJdO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2JbXCJyZXR1cm5cIl07KWlmKGI9YltcInJldHVyblwiXSwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIHhkKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PXdkKGEpOiExfWZ1bmN0aW9uIHlkKGEpezIhPT13ZChhKT9EKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIHpkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPXdkKGEpLDM9PT1iP0QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Y1tcInJldHVyblwiXSxmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09YylyZXR1cm4geWQoZSksYTtpZihoPT09ZClyZXR1cm4geWQoZSksYjtoPWguc2libGluZ31EKFwiMTg4XCIpfWlmKGNbXCJyZXR1cm5cIl0hPT1kW1wicmV0dXJuXCJdKWM9ZSxkPWY7ZWxzZXtoPSExO2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWU7ZD1mO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZTtjPWY7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpe2ZvcihnPWYuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZjtkPWU7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1mO2M9ZTticmVha31nPWcuc2libGluZ31oP1xudm9pZCAwOkQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9EKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/RChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBBZChhKXthPXpkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gQmQoYSl7YT16ZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBDZD1OLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksRGQ9Ti5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxFZD1wZC5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gRmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgR2Q9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LEhkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxJZD1wZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9R2RbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9RmQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP0hkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpzZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9GZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9GZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLEpkPXRkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxLZD1wZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpzZH0pLExkPU4uZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLE1kPXRkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksTmQ9e30sT2Q9e307ZnVuY3Rpb24gUGQoYSxiKXt2YXIgYz1hWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSxkPVwib25cIitjO2M9XCJ0b3BcIitjO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O05kW2FdPWI7T2RbY109Yn1cblwiYmx1ciBjYW5jZWwgY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZG91YmxlQ2xpY2sgZHJhZ0VuZCBkcmFnU3RhcnQgZHJvcCBmb2N1cyBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbW91c2VEb3duIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSByYXRlQ2hhbmdlIHJlc2V0IHNlZWtlZCBzdWJtaXQgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtQZChhLCEwKX0pO1xuXCJhYm9ydCBhbmltYXRpb25FbmQgYW5pbWF0aW9uSXRlcmF0aW9uIGFuaW1hdGlvblN0YXJ0IGNhblBsYXkgY2FuUGxheVRocm91Z2ggZHJhZyBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBwbGF5aW5nIHByb2dyZXNzIHNjcm9sbCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvZ2dsZSB0b3VjaE1vdmUgdHJhbnNpdGlvbkVuZCB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UGQoYSwhMSl9KTtcbnZhciBRZD17ZXZlbnRUeXBlczpOZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1PZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9T2RbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDA9PT1GZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOmE9SWQ7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpjYXNlIFwidG9wRm9jdXNcIjphPUVkO2JyZWFrO2Nhc2UgXCJ0b3BDbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwidG9wRG91YmxlQ2xpY2tcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcE1vdXNlTW92ZVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6Y2FzZSBcInRvcE1vdXNlT3V0XCI6Y2FzZSBcInRvcE1vdXNlT3ZlclwiOmNhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmE9XG50ZDticmVhaztjYXNlIFwidG9wRHJhZ1wiOmNhc2UgXCJ0b3BEcmFnRW5kXCI6Y2FzZSBcInRvcERyYWdFbnRlclwiOmNhc2UgXCJ0b3BEcmFnRXhpdFwiOmNhc2UgXCJ0b3BEcmFnTGVhdmVcIjpjYXNlIFwidG9wRHJhZ092ZXJcIjpjYXNlIFwidG9wRHJhZ1N0YXJ0XCI6Y2FzZSBcInRvcERyb3BcIjphPUpkO2JyZWFrO2Nhc2UgXCJ0b3BUb3VjaENhbmNlbFwiOmNhc2UgXCJ0b3BUb3VjaEVuZFwiOmNhc2UgXCJ0b3BUb3VjaE1vdmVcIjpjYXNlIFwidG9wVG91Y2hTdGFydFwiOmE9S2Q7YnJlYWs7Y2FzZSBcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2UgXCJ0b3BBbmltYXRpb25JdGVyYXRpb25cIjpjYXNlIFwidG9wQW5pbWF0aW9uU3RhcnRcIjphPUNkO2JyZWFrO2Nhc2UgXCJ0b3BUcmFuc2l0aW9uRW5kXCI6YT1MZDticmVhaztjYXNlIFwidG9wU2Nyb2xsXCI6YT1wZDticmVhaztjYXNlIFwidG9wV2hlZWxcIjphPU1kO2JyZWFrO2Nhc2UgXCJ0b3BDb3B5XCI6Y2FzZSBcInRvcEN1dFwiOmNhc2UgXCJ0b3BQYXN0ZVwiOmE9RGQ7YnJlYWs7ZGVmYXVsdDphPVxuTn1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO2hiKGIpO3JldHVybiBifX0sUmQ9UWQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFNkPVtdO2Z1bmN0aW9uIFRkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2NbXCJyZXR1cm5cIl07KWM9Y1tcInJldHVyblwiXTtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPVRhKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sUGEoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LGdjKGEubmF0aXZlRXZlbnQpKX12YXIgVWQ9ITA7ZnVuY3Rpb24gVmQoYSl7VWQ9ISFhfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oUmQoYSk/V2Q6WGQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCExKX1mdW5jdGlvbiBZZChhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oUmQoYSk/V2Q6WGQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCEwKX1mdW5jdGlvbiBXZChhLGIpe2FjKFhkLGEsYil9XG5mdW5jdGlvbiBYZChhLGIpe2lmKFVkKXt2YXIgYz1nYyhiKTtjPVRhKGMpO251bGwhPT1jJiZcIm51bWJlclwiPT09dHlwZW9mIGMudGFnJiYyIT09d2QoYykmJihjPW51bGwpO2lmKFNkLmxlbmd0aCl7dmFyIGQ9U2QucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7ZGMoVGQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5TZC5sZW5ndGgmJlNkLnB1c2goYSl9fX1cbnZhciBaZD1PYmplY3QuZnJlZXplKHtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gVWR9LHNldEVuYWJsZWQ6VmQsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIFVkfSx0cmFwQnViYmxlZEV2ZW50OlcsdHJhcENhcHR1cmVkRXZlbnQ6WWQsZGlzcGF0Y2hFdmVudDpYZH0pO2Z1bmN0aW9uICRkKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgYWU9e2FuaW1hdGlvbmVuZDokZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjokZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OiRkKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOiRkKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sYmU9e30sY2U9e307bS5jYW5Vc2VET00mJihjZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBhZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBhZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBhZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBhZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZGUoYSl7aWYoYmVbYV0pcmV0dXJuIGJlW2FdO2lmKCFhZVthXSlyZXR1cm4gYTt2YXIgYj1hZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBjZSlyZXR1cm4gYmVbYV09YltjXTtyZXR1cm4gYX1cbnZhciBlZT17dG9wQW5pbWF0aW9uRW5kOmRlKFwiYW5pbWF0aW9uZW5kXCIpLHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjpkZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSx0b3BBbmltYXRpb25TdGFydDpkZShcImFuaW1hdGlvbnN0YXJ0XCIpLHRvcEJsdXI6XCJibHVyXCIsdG9wQ2FuY2VsOlwiY2FuY2VsXCIsdG9wQ2hhbmdlOlwiY2hhbmdlXCIsdG9wQ2xpY2s6XCJjbGlja1wiLHRvcENsb3NlOlwiY2xvc2VcIix0b3BDb21wb3NpdGlvbkVuZDpcImNvbXBvc2l0aW9uZW5kXCIsdG9wQ29tcG9zaXRpb25TdGFydDpcImNvbXBvc2l0aW9uc3RhcnRcIix0b3BDb21wb3NpdGlvblVwZGF0ZTpcImNvbXBvc2l0aW9udXBkYXRlXCIsdG9wQ29udGV4dE1lbnU6XCJjb250ZXh0bWVudVwiLHRvcENvcHk6XCJjb3B5XCIsdG9wQ3V0OlwiY3V0XCIsdG9wRG91YmxlQ2xpY2s6XCJkYmxjbGlja1wiLHRvcERyYWc6XCJkcmFnXCIsdG9wRHJhZ0VuZDpcImRyYWdlbmRcIix0b3BEcmFnRW50ZXI6XCJkcmFnZW50ZXJcIix0b3BEcmFnRXhpdDpcImRyYWdleGl0XCIsdG9wRHJhZ0xlYXZlOlwiZHJhZ2xlYXZlXCIsXG50b3BEcmFnT3ZlcjpcImRyYWdvdmVyXCIsdG9wRHJhZ1N0YXJ0OlwiZHJhZ3N0YXJ0XCIsdG9wRHJvcDpcImRyb3BcIix0b3BGb2N1czpcImZvY3VzXCIsdG9wSW5wdXQ6XCJpbnB1dFwiLHRvcEtleURvd246XCJrZXlkb3duXCIsdG9wS2V5UHJlc3M6XCJrZXlwcmVzc1wiLHRvcEtleVVwOlwia2V5dXBcIix0b3BMb2FkOlwibG9hZFwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcE1vdXNlRG93bjpcIm1vdXNlZG93blwiLHRvcE1vdXNlTW92ZTpcIm1vdXNlbW92ZVwiLHRvcE1vdXNlT3V0OlwibW91c2VvdXRcIix0b3BNb3VzZU92ZXI6XCJtb3VzZW92ZXJcIix0b3BNb3VzZVVwOlwibW91c2V1cFwiLHRvcFBhc3RlOlwicGFzdGVcIix0b3BTY3JvbGw6XCJzY3JvbGxcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BUZXh0SW5wdXQ6XCJ0ZXh0SW5wdXRcIix0b3BUb2dnbGU6XCJ0b2dnbGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLFxudG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOmRlKFwidHJhbnNpdGlvbmVuZFwiKSx0b3BXaGVlbDpcIndoZWVsXCJ9LGZlPXt0b3BBYm9ydDpcImFib3J0XCIsdG9wQ2FuUGxheTpcImNhbnBsYXlcIix0b3BDYW5QbGF5VGhyb3VnaDpcImNhbnBsYXl0aHJvdWdoXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWRlZE1ldGFkYXRhOlwibG9hZGVkbWV0YWRhdGFcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BQYXVzZTpcInBhdXNlXCIsdG9wUGxheTpcInBsYXlcIix0b3BQbGF5aW5nOlwicGxheWluZ1wiLHRvcFByb2dyZXNzOlwicHJvZ3Jlc3NcIix0b3BSYXRlQ2hhbmdlOlwicmF0ZWNoYW5nZVwiLHRvcFNlZWtlZDpcInNlZWtlZFwiLHRvcFNlZWtpbmc6XCJzZWVraW5nXCIsXG50b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIix0b3BXYWl0aW5nOlwid2FpdGluZ1wifSxnZT17fSxoZT0wLGllPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBqZShhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxpZSl8fChhW2llXT1oZSsrLGdlW2FbaWVdXT17fSk7cmV0dXJuIGdlW2FbaWVdXX1mdW5jdGlvbiBrZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBsZShhLGIpe3ZhciBjPWtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPWtlKGMpfX1mdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgbmU9bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxvZT17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb250ZXh0TWVudSB0b3BGb2N1cyB0b3BLZXlEb3duIHRvcEtleVVwIHRvcE1vdXNlRG93biB0b3BNb3VzZVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LHBlPW51bGwscWU9bnVsbCxyZT1udWxsLHNlPSExO1xuZnVuY3Rpb24gdWUoYSxiKXtpZihzZXx8bnVsbD09cGV8fHBlIT09ZWEoKSlyZXR1cm4gbnVsbDt2YXIgYz1wZTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZtZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuIHJlJiZmYShyZSxjKT9udWxsOihyZT1jLGE9Ti5nZXRQb29sZWQob2Uuc2VsZWN0LHFlLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9cGUsaGIoYSksYSl9XG52YXIgd2U9e2V2ZW50VHlwZXM6b2UsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9amUoZSk7Zj11YS5vblNlbGVjdDtmb3IodmFyIGg9MDtoPGYubGVuZ3RoO2grKyl7dmFyIGc9ZltoXTtpZighZS5oYXNPd25Qcm9wZXJ0eShnKXx8IWVbZ10pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1VhKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcInRvcEZvY3VzXCI6aWYoZmMoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpcGU9ZSxxZT1iLHJlPW51bGw7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpyZT1xZT1wZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BNb3VzZURvd25cIjpzZT0hMDticmVhaztjYXNlIFwidG9wQ29udGV4dE1lbnVcIjpjYXNlIFwidG9wTW91c2VVcFwiOnJldHVybiBzZT0hMSx1ZShjLGQpO2Nhc2UgXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIjppZihuZSlicmVhaztcbmNhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuIHVlKGMsZCl9cmV0dXJuIG51bGx9fTtNYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO0NhPVhhLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7RGE9WGEuZ2V0SW5zdGFuY2VGcm9tTm9kZTtFYT1YYS5nZXROb2RlRnJvbUluc3RhbmNlO01hLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46UWQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOnZkLENoYW5nZUV2ZW50UGx1Z2luOm9kLFNlbGVjdEV2ZW50UGx1Z2luOndlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46UWJ9KTtcbmZ1bmN0aW9uIHhlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzW1wicmV0dXJuXCJdPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuZnVuY3Rpb24geWUoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyB4ZShhLnRhZyxiLGEua2V5LGEubW9kZSksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLnBlbmRpbmdQcm9wcz1iLGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmV4cGlyYXRpb25UaW1lPWM7ZC5jaGlsZD1hLmNoaWxkO2QubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7ZC5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7ZC5zaWJsaW5nPWEuc2libGluZztkLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiB6ZShhLGIsYyl7dmFyIGQ9YS50eXBlLGU9YS5rZXk7YT1hLnByb3BzO3ZhciBmPXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZClmPWQucHJvdG90eXBlJiZkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PzI6MDtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgZClmPTU7ZWxzZSBzd2l0Y2goZCl7Y2FzZSByYzpyZXR1cm4gQWUoYS5jaGlsZHJlbixiLGMsZSk7Y2FzZSB2YzpmPTExO2J8PTM7YnJlYWs7Y2FzZSBzYzpmPTExO2J8PTI7YnJlYWs7Y2FzZSBvYzpmPTc7YnJlYWs7Y2FzZSBwYzpmPTk7YnJlYWs7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXN3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHRjOmY9MTM7YnJlYWs7Y2FzZSB1YzpmPTEyO2JyZWFrO2Nhc2Ugd2M6Zj0xNDticmVhaztkZWZhdWx0OmlmKFwibnVtYmVyXCI9PT10eXBlb2YgZC50YWcpcmV0dXJuIGI9ZCxiLnBlbmRpbmdQcm9wcz1hLGIuZXhwaXJhdGlvblRpbWU9YyxcbmI7RChcIjEzMFwiLG51bGw9PWQ/ZDp0eXBlb2YgZCxcIlwiKX1lbHNlIEQoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9Yj1uZXcgeGUoZixhLGUsYik7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIEFlKGEsYixjLGQpe2E9bmV3IHhlKDEwLGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gQmUoYSxiLGMpe2E9bmV3IHhlKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBDZShhLGIsYyl7Yj1uZXcgeGUoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9dmFyIERlPW51bGwsRWU9bnVsbDtcbmZ1bmN0aW9uIEZlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19ZnVuY3Rpb24gR2UoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7RGU9RmUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO0VlPUZlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9ZnVuY3Rpb24gSGUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIERlJiZEZShhKX1mdW5jdGlvbiBJZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRWUmJkVlKGEpfW5ldyBTZXQ7XG5mdW5jdGlvbiBKZShhKXtyZXR1cm57YmFzZVN0YXRlOmEsZXhwaXJhdGlvblRpbWU6MCxmaXJzdDpudWxsLGxhc3Q6bnVsbCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMSxpc0luaXRpYWxpemVkOiExLGNhcHR1cmVkVmFsdWVzOm51bGx9fWZ1bmN0aW9uIEtlKGEsYil7bnVsbD09PWEubGFzdD9hLmZpcnN0PWEubGFzdD1iOihhLmxhc3QubmV4dD1iLGEubGFzdD1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iLmV4cGlyYXRpb25UaW1lKWEuZXhwaXJhdGlvblRpbWU9Yi5leHBpcmF0aW9uVGltZX12YXIgTGU9dm9pZCAwLE1lPXZvaWQgMDtcbmZ1bmN0aW9uIE5lKGEpe0xlPU1lPW51bGw7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jJiYoYz1hLnVwZGF0ZVF1ZXVlPUplKG51bGwpKTtudWxsIT09Yj8oYT1iLnVwZGF0ZVF1ZXVlLG51bGw9PT1hJiYoYT1iLnVwZGF0ZVF1ZXVlPUplKG51bGwpKSk6YT1udWxsO0xlPWM7TWU9YSE9PWM/YTpudWxsfWZ1bmN0aW9uIE9lKGEsYil7TmUoYSk7YT1MZTt2YXIgYz1NZTtudWxsPT09Yz9LZShhLGIpOm51bGw9PT1hLmxhc3R8fG51bGw9PT1jLmxhc3Q/KEtlKGEsYiksS2UoYyxiKSk6KEtlKGEsYiksYy5sYXN0PWIpfWZ1bmN0aW9uIFBlKGEsYixjLGQpe2E9YS5wYXJ0aWFsU3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIsYyxkKTphfVxuZnVuY3Rpb24gUWUoYSxiLGMsZCxlLGYpe251bGwhPT1hJiZhLnVwZGF0ZVF1ZXVlPT09YyYmKGM9Yi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmMuYmFzZVN0YXRlLGV4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3Q6Yy5maXJzdCxsYXN0OmMubGFzdCxpc0luaXRpYWxpemVkOmMuaXNJbml0aWFsaXplZCxjYXB0dXJlZFZhbHVlczpjLmNhcHR1cmVkVmFsdWVzLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExfSk7Yy5leHBpcmF0aW9uVGltZT0wO2MuaXNJbml0aWFsaXplZD9hPWMuYmFzZVN0YXRlOihhPWMuYmFzZVN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxjLmlzSW5pdGlhbGl6ZWQ9ITApO2Zvcih2YXIgaD0hMCxnPWMuZmlyc3Qsaz0hMTtudWxsIT09Zzspe3ZhciB2PWcuZXhwaXJhdGlvblRpbWU7aWYodj5mKXt2YXIgbD1jLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1sfHxsPnYpYy5leHBpcmF0aW9uVGltZT12O2t8fChrPSEwLGMuYmFzZVN0YXRlPWEpfWVsc2V7a3x8XG4oYy5maXJzdD1nLm5leHQsbnVsbD09PWMuZmlyc3QmJihjLmxhc3Q9bnVsbCkpO2lmKGcuaXNSZXBsYWNlKWE9UGUoZyxkLGEsZSksaD0hMDtlbHNlIGlmKHY9UGUoZyxkLGEsZSkpYT1oP0Eoe30sYSx2KTpBKGEsdiksaD0hMTtnLmlzRm9yY2VkJiYoYy5oYXNGb3JjZVVwZGF0ZT0hMCk7bnVsbCE9PWcuY2FsbGJhY2smJih2PWMuY2FsbGJhY2tMaXN0LG51bGw9PT12JiYodj1jLmNhbGxiYWNrTGlzdD1bXSksdi5wdXNoKGcpKTtudWxsIT09Zy5jYXB0dXJlZFZhbHVlJiYodj1jLmNhcHR1cmVkVmFsdWVzLG51bGw9PT12P2MuY2FwdHVyZWRWYWx1ZXM9W2cuY2FwdHVyZWRWYWx1ZV06di5wdXNoKGcuY2FwdHVyZWRWYWx1ZSkpfWc9Zy5uZXh0fW51bGwhPT1jLmNhbGxiYWNrTGlzdD9iLmVmZmVjdFRhZ3w9MzI6bnVsbCE9PWMuZmlyc3R8fGMuaGFzRm9yY2VVcGRhdGV8fG51bGwhPT1jLmNhcHR1cmVkVmFsdWVzfHwoYi51cGRhdGVRdWV1ZT1udWxsKTtrfHwoYy5iYXNlU3RhdGU9YSk7XG5yZXR1cm4gYX1mdW5jdGlvbiBSZShhLGIpe3ZhciBjPWEuY2FsbGJhY2tMaXN0O2lmKG51bGwhPT1jKWZvcihhLmNhbGxiYWNrTGlzdD1udWxsLGE9MDthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXSxlPWQuY2FsbGJhY2s7ZC5jYWxsYmFjaz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBlP0QoXCIxOTFcIixlKTp2b2lkIDA7ZS5jYWxsKGIpfX1cbmZ1bmN0aW9uIFNlKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhLGIsYyxkLGUsZil7aWYobnVsbD09PWJ8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKXJldHVybiEwO3ZhciBuPWEuc3RhdGVOb2RlO2E9YS50eXBlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLnNob3VsZENvbXBvbmVudFVwZGF0ZT9uLnNob3VsZENvbXBvbmVudFVwZGF0ZShjLGUsZik6YS5wcm90b3R5cGUmJmEucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFmYShiLGMpfHwhZmEoZCxlKTohMH1mdW5jdGlvbiBoKGEsYil7Yi51cGRhdGVyPXI7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YX1mdW5jdGlvbiBnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5iLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9ZnVuY3Rpb24gayhhLGIsYyxkKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpcmV0dXJuIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLmNhbGwobnVsbCxjLGQpfXZhciB2PWEuY2FjaGVDb250ZXh0LGw9YS5nZXRNYXNrZWRDb250ZXh0LHA9YS5nZXRVbm1hc2tlZENvbnRleHQsej1hLmlzQ29udGV4dENvbnN1bWVyLEI9YS5oYXNDb250ZXh0Q2hhbmdlZCxyPXtpc01vdW50ZWQ6eGQsZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7T2UoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxcbmNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxkLGUpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YyhhKTtPZShhLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiEwLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGQpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGU9YyhhKTtPZShhLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOmQsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiEwLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZSl9fTtyZXR1cm57YWRvcHRDbGFzc0luc3RhbmNlOmgsY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczprLFxuY29uc3RydWN0Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPXAoYSksZT16KGEpLGY9ZT9sKGEsZCk6amE7Yz1uZXcgYyhiLGYpO3ZhciBuPW51bGwhPT1jLnN0YXRlJiZ2b2lkIDAhPT1jLnN0YXRlP2Muc3RhdGU6bnVsbDtoKGEsYyk7YS5tZW1vaXplZFN0YXRlPW47Yj1rKGEsYyxiLG4pO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoYS5tZW1vaXplZFN0YXRlPUEoe30sYS5tZW1vaXplZFN0YXRlLGIpKTtlJiZ2KGEsZCxmKTtyZXR1cm4gY30sbW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9YS5hbHRlcm5hdGUsZT1hLnN0YXRlTm9kZSxmPWEucGVuZGluZ1Byb3BzLG49cChhKTtlLnByb3BzPWY7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWphO2UuY29udGV4dD1sKGEsbik7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChjPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGMhPT1lLnN0YXRlJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGUuc3RhdGU9UWUoZCxhLGMsZSxmLGIpKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9LHJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxuPWEuc3RhdGVOb2RlO24ucHJvcHM9YS5tZW1vaXplZFByb3BzO24uc3RhdGU9XG5hLm1lbW9pemVkU3RhdGU7dmFyIGg9YS5tZW1vaXplZFByb3BzLHI9YS5wZW5kaW5nUHJvcHMsej1uLmNvbnRleHQscT1wKGEpO3E9bChhLHEpOyhjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1yfHx6IT09cSkmJmcoYSxuLHIscSk7ej1hLm1lbW9pemVkU3RhdGU7Yj1udWxsIT09YS51cGRhdGVRdWV1ZT9RZShudWxsLGEsYS51cGRhdGVRdWV1ZSxuLHIsYik6ejt2YXIgdT12b2lkIDA7aCE9PXImJih1PWsoYSxuLHIsYikpO2lmKG51bGwhPT11JiZ2b2lkIDAhPT11KXtiPW51bGw9PT1ifHx2b2lkIDA9PT1iP3U6QSh7fSxiLHUpO3ZhciB0PWEudXBkYXRlUXVldWU7XG5udWxsIT09dCYmKHQuYmFzZVN0YXRlPUEoe30sdC5iYXNlU3RhdGUsdSkpfWlmKCEoaCE9PXJ8fHohPT1ifHxCKCl8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KSwhMTsoaD1mKGEsaCxyLHosYixxKSk/KGN8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxNb3VudCYmbi5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9XG40KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpLGQoYSxyKSxlKGEsYikpO24ucHJvcHM9cjtuLnN0YXRlPWI7bi5jb250ZXh0PXE7cmV0dXJuIGh9LHVwZGF0ZUNsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBuPWIudHlwZSx4PWIuc3RhdGVOb2RlO3gucHJvcHM9Yi5tZW1vaXplZFByb3BzO3guc3RhdGU9Yi5tZW1vaXplZFN0YXRlO3ZhciBoPWIubWVtb2l6ZWRQcm9wcyxyPWIucGVuZGluZ1Byb3BzLHE9eC5jb250ZXh0LHU9cChiKTt1PWwoYix1KTsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1yfHxxIT09dSkmJmcoYix4LHIsdSk7cT1iLm1lbW9pemVkU3RhdGU7Yz1udWxsIT09Yi51cGRhdGVRdWV1ZT9RZShhLGIsYi51cGRhdGVRdWV1ZSx4LHIsYyk6cTt2YXIgdD12b2lkIDA7aCE9PXImJih0PWsoYix4LHIsYykpO2lmKG51bGwhPT10JiZ2b2lkIDAhPT10KXtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP3Q6QSh7fSxjLHQpO3ZhciB5PWIudXBkYXRlUXVldWU7bnVsbCE9PXkmJih5LmJhc2VTdGF0ZT1BKHt9LHkuYmFzZVN0YXRlLHQpKX1pZighKGghPT1yfHxxIT09Y3x8QigpfHxudWxsIT09Yi51cGRhdGVRdWV1ZSYmYi51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZcbnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksITE7KHQ9ZihiLGgscixxLGMsdSkpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxVcGRhdGUmJnguY29tcG9uZW50V2lsbFVwZGF0ZShyLGMsdSksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJnguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUocixjLHUpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjA0OCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJlxucT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yMDQ4KSxkKGIsciksZShiLGMpKTt4LnByb3BzPXI7eC5zdGF0ZT1jO3guY29udGV4dD11O3JldHVybiB0fX19dmFyIFRlPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBVZShhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigyIT09Yy50YWc/RChcIjExMFwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6RChcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM9PT1qYT9kLnJlZnM9e306ZC5yZWZzO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP0QoXCIxNDhcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDpEKFwiMjU0XCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBWZShhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmRChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gV2UoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT15ZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGgoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gZyhhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPUJlKGMsYS5tb2RlLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1VZShhLGIsYyksZFtcInJldHVyblwiXT1hLGQ7ZD16ZShjLGEubW9kZSxkKTtkLnJlZj1VZShhLGIsYyk7ZFtcInJldHVyblwiXT1hO3JldHVybiBkfWZ1bmN0aW9uIHYoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuQ2UoYyxhLm1vZGUsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8MTAhPT1iLnRhZylyZXR1cm4gYj1BZShjLGEubW9kZSxkLGYpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPUJlKFwiXCIrYixhLm1vZGUsYyksYltcInJldHVyblwiXT1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgbmM6cmV0dXJuIGM9emUoYixhLm1vZGUsYyksYy5yZWY9VWUoYSxudWxsLGIpLGNbXCJyZXR1cm5cIl09YSxjO2Nhc2UgcWM6cmV0dXJuIGI9Q2UoYixhLm1vZGUsYyksYltcInJldHVyblwiXT1hLGJ9aWYoVGUoYil8fHljKGIpKXJldHVybiBiPUFlKGIsXG5hLm1vZGUsYyxudWxsKSxiW1wicmV0dXJuXCJdPWEsYjtWZShhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpnKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgbmM6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1yYz9sKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgcWM6cmV0dXJuIGMua2V5PT09ZT92KGEsYixjLGQpOm51bGx9aWYoVGUoYyl8fHljKGMpKXJldHVybiBudWxsIT09ZT9udWxsOmwoYSxiLGMsZCxudWxsKTtWZShhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEIoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGcoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBuYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09cmM/bChiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgcWM6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLHYoYixhLGQsZSl9aWYoVGUoZCl8fHljKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGwoYixhLGQsZSxudWxsKTtWZShiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoZSxnLGwsaCl7Zm9yKHZhciByPW51bGwsaz1udWxsLHE9Zyx1PWc9MCx0PW51bGw7bnVsbCE9PXEmJnU8bC5sZW5ndGg7dSsrKXtxLmluZGV4PnU/KHQ9cSxxPW51bGwpOnQ9cS5zaWJsaW5nO3ZhciBuPXooZSxxLGxbdV0saCk7aWYobnVsbD09PW4pe251bGw9PT1xJiYocT10KTticmVha31hJiZxJiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHEpO2c9ZihuLGcsdSk7bnVsbD09PWs/cj1uOmsuc2libGluZz1uO2s9bjtxPXR9aWYodT09PWwubGVuZ3RoKXJldHVybiBjKGUscSkscjtpZihudWxsPT09cSl7Zm9yKDt1PGwubGVuZ3RoO3UrKylpZihxPXAoZSxsW3VdLGgpKWc9ZihxLGcsdSksbnVsbD09PWs/cj1xOmsuc2libGluZz1xLGs9cTtyZXR1cm4gcn1mb3IocT1kKGUscSk7dTxsLmxlbmd0aDt1KyspaWYodD1CKHEsZSx1LGxbdV0saCkpe2lmKGEmJm51bGwhPT10LmFsdGVybmF0ZSlxW1wiZGVsZXRlXCJdKG51bGw9PT10LmtleT91OnQua2V5KTtnPWYodCxnLHUpO251bGw9PT1rP3I9dDprLnNpYmxpbmc9dDtrPXR9YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gcn1mdW5jdGlvbiBRKGUsZyxsLGgpe3ZhciByPXljKGwpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiByP0QoXCIxNTBcIik6dm9pZCAwO2w9ci5jYWxsKGwpO251bGw9PWw/RChcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciBrPVxucj1udWxsLHE9Zyx1PWc9MCx0PW51bGwsbj1sLm5leHQoKTtudWxsIT09cSYmIW4uZG9uZTt1Kyssbj1sLm5leHQoKSl7cS5pbmRleD51Pyh0PXEscT1udWxsKTp0PXEuc2libGluZzt2YXIgSD16KGUscSxuLnZhbHVlLGgpO2lmKG51bGw9PT1IKXtxfHwocT10KTticmVha31hJiZxJiZudWxsPT09SC5hbHRlcm5hdGUmJmIoZSxxKTtnPWYoSCxnLHUpO251bGw9PT1rP3I9SDprLnNpYmxpbmc9SDtrPUg7cT10fWlmKG4uZG9uZSlyZXR1cm4gYyhlLHEpLHI7aWYobnVsbD09PXEpe2Zvcig7IW4uZG9uZTt1Kyssbj1sLm5leHQoKSluPXAoZSxuLnZhbHVlLGgpLG51bGwhPT1uJiYoZz1mKG4sZyx1KSxudWxsPT09az9yPW46ay5zaWJsaW5nPW4saz1uKTtyZXR1cm4gcn1mb3IocT1kKGUscSk7IW4uZG9uZTt1Kyssbj1sLm5leHQoKSlpZihuPUIocSxlLHUsbi52YWx1ZSxoKSxudWxsIT09bil7aWYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlKXFbXCJkZWxldGVcIl0obnVsbD09PW4ua2V5P3U6bi5rZXkpO1xuZz1mKG4sZyx1KTtudWxsPT09az9yPW46ay5zaWJsaW5nPW47az1ufWEmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHJ9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGcpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXJjJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBuYzphOnt2YXIgaz1mLmtleTtmb3IobD1kO251bGwhPT1sOyl7aWYobC5rZXk9PT1rKWlmKDEwPT09bC50YWc/Zi50eXBlPT09cmM6bC50eXBlPT09Zi50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnR5cGU9PT1yYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsZyk7ZC5yZWY9VWUoYSxsLGYpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT1cbnJjPyhkPUFlKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGcsZi5rZXkpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihnPXplKGYsYS5tb2RlLGcpLGcucmVmPVVlKGEsZCxmKSxnW1wicmV0dXJuXCJdPWEsYT1nKX1yZXR1cm4gaChhKTtjYXNlIHFjOmE6e2ZvcihsPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxnKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1DZShmLGEubW9kZSxnKTtkW1wicmV0dXJuXCJdPWE7YT1kfXJldHVybiBoKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmXG42PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsZykpOihjKGEsZCksZD1CZShmLGEubW9kZSxnKSksZFtcInJldHVyblwiXT1hLGE9ZCxoKGEpO2lmKFRlKGYpKXJldHVybiByKGEsZCxmLGcpO2lmKHljKGYpKXJldHVybiBRKGEsZCxmLGcpO2wmJlZlKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpnPWEudHlwZSxEKFwiMTUyXCIsZy5kaXNwbGF5TmFtZXx8Zy5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgWGU9V2UoITApLFllPVdlKCExKTtcbmZ1bmN0aW9uIFplKGEsYixjLGQsZSxmLGgpe2Z1bmN0aW9uIGcoYSxiLGMpe2soYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gayhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1llKGIsbnVsbCxjLGQpOlhlKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIHYoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBsKGEsYixjLGQsZSxmKXt2KGEsYik7aWYoIWMmJiFlKXJldHVybiBkJiZ5KGIsITEpLHIoYSxiKTtjPWIuc3RhdGVOb2RlO21jLmN1cnJlbnQ9Yjt2YXIgZz1lP251bGw6Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtlJiYoayhhLGIsbnVsbCxmKSxiLmNoaWxkPW51bGwpO2soYSxiLGcsZik7Yi5tZW1vaXplZFN0YXRlPWMuc3RhdGU7Yi5tZW1vaXplZFByb3BzPWMucHJvcHM7ZCYmeShiLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBwKGEpe3ZhciBiPWEuc3RhdGVOb2RlO1xuYi5wZW5kaW5nQ29udGV4dD90KGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJnQoYSxiLmNvbnRleHQsITEpO1koYSxiLmNvbnRhaW5lckluZm8pfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDtmb3IobnVsbCE9PWUmJihlW1wicmV0dXJuXCJdPWEpO251bGwhPT1lOyl7c3dpdGNoKGUudGFnKXtjYXNlIDEyOnZhciBmPWUuc3RhdGVOb2RlfDA7aWYoZS50eXBlPT09YiYmMCE9PShmJmMpKXtmb3IoZj1lO251bGwhPT1mOyl7dmFyIGc9Zi5hbHRlcm5hdGU7aWYoMD09PWYuZXhwaXJhdGlvblRpbWV8fGYuZXhwaXJhdGlvblRpbWU+ZClmLmV4cGlyYXRpb25UaW1lPWQsbnVsbCE9PWcmJigwPT09Zy5leHBpcmF0aW9uVGltZXx8Zy5leHBpcmF0aW9uVGltZT5kKSYmKGcuZXhwaXJhdGlvblRpbWU9ZCk7ZWxzZSBpZihudWxsIT09ZyYmKDA9PT1nLmV4cGlyYXRpb25UaW1lfHxnLmV4cGlyYXRpb25UaW1lPmQpKWcuZXhwaXJhdGlvblRpbWU9XG5kO2Vsc2UgYnJlYWs7Zj1mW1wicmV0dXJuXCJdfWY9bnVsbH1lbHNlIGY9ZS5jaGlsZDticmVhaztjYXNlIDEzOmY9ZS50eXBlPT09YS50eXBlP251bGw6ZS5jaGlsZDticmVhaztkZWZhdWx0OmY9ZS5jaGlsZH1pZihudWxsIT09ZilmW1wicmV0dXJuXCJdPWU7ZWxzZSBmb3IoZj1lO251bGwhPT1mOyl7aWYoZj09PWEpe2Y9bnVsbDticmVha31lPWYuc2libGluZztpZihudWxsIT09ZSl7Zj1lO2JyZWFrfWY9ZltcInJldHVyblwiXX1lPWZ9fWZ1bmN0aW9uIEIoYSxiLGMpe3ZhciBkPWIudHlwZS5fY29udGV4dCxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFByb3BzO2lmKCFxKCkmJmY9PT1lKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO3ZhciBsPWUudmFsdWU7Yi5tZW1vaXplZFByb3BzPWU7aWYobnVsbD09PWYpbD0xMDczNzQxODIzO2Vsc2UgaWYoZi52YWx1ZT09PWUudmFsdWUpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYiksXG5yKGEsYik7bD0wfWVsc2V7dmFyIHU9Zi52YWx1ZTtpZih1PT09bCYmKDAhPT11fHwxL3U9PT0xL2wpfHx1IT09dSYmbCE9PWwpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO2w9MH1lbHNlIGlmKGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKHUsbCk6MTA3Mzc0MTgyMyxsfD0wLDA9PT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKX1lbHNlIHooYixkLGwsYyl9Yi5zdGF0ZU5vZGU9bDtHKGIpO2coYSxiLGUuY2hpbGRyZW4pO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHIoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/RChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz15ZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO1xuYi5jaGlsZD1jO2ZvcihjW1wicmV0dXJuXCJdPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9eWUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjW1wicmV0dXJuXCJdPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIFE9YS5zaG91bGRTZXRUZXh0Q29udGVudCxuPWEuc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSx4PWIucHVzaEhvc3RDb250ZXh0LFk9Yi5wdXNoSG9zdENvbnRhaW5lcixHPWQucHVzaFByb3ZpZGVyLFI9Yy5nZXRNYXNrZWRDb250ZXh0LFM9Yy5nZXRVbm1hc2tlZENvbnRleHQscT1jLmhhc0NvbnRleHRDaGFuZ2VkLHU9Yy5wdXNoQ29udGV4dFByb3ZpZGVyLHQ9Yy5wdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHk9Yy5pbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyLEg9ZS5lbnRlckh5ZHJhdGlvblN0YXRlLFdhPWUucmVzZXRIeWRyYXRpb25TdGF0ZSxDYj1lLnRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuYT1TZShjLGYsaCxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRQcm9wcz1ifSxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRTdGF0ZT1ifSk7dmFyIEpjPWEuYWRvcHRDbGFzc0luc3RhbmNlLEtjPWEuY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxMYz1hLmNvbnN0cnVjdENsYXNzSW5zdGFuY2UsRGI9YS5tb3VudENsYXNzSW5zdGFuY2UsTWM9YS5yZXN1bWVNb3VudENsYXNzSW5zdGFuY2UsRWI9YS51cGRhdGVDbGFzc0luc3RhbmNlO3JldHVybntiZWdpbldvcms6ZnVuY3Rpb24oYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOnAoYik7YnJlYWs7Y2FzZSAyOnUoYik7YnJlYWs7Y2FzZSA0OlkoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEzOkcoYil9cmV0dXJuIG51bGx9c3dpdGNoKGIudGFnKXtjYXNlIDA6bnVsbCE9PWE/RChcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLFxuZT1iLnBlbmRpbmdQcm9wcyxmPVMoYik7Zj1SKGIsZik7ZD1kKGUsZik7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyJiZ2b2lkIDA9PT1kLiQkdHlwZW9mPyhmPWIudHlwZSxiLnRhZz0yLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZC5zdGF0ZSYmdm9pZCAwIT09ZC5zdGF0ZT9kLnN0YXRlOm51bGwsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYoZT1LYyhiLGQsZSxiLm1lbW9pemVkU3RhdGUpLG51bGwhPT1lJiZ2b2lkIDAhPT1lJiYoYi5tZW1vaXplZFN0YXRlPUEoe30sYi5tZW1vaXplZFN0YXRlLGUpKSksZT11KGIpLEpjKGIsZCksRGIoYixjKSxhPWwoYSxiLCEwLGUsITEsYykpOihiLnRhZz0xLGcoYSxiLGQpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk7cmV0dXJuIGE7Y2FzZSAxOnJldHVybiBlPWIudHlwZSxjPWIucGVuZGluZ1Byb3BzLHEoKXx8XG5iLm1lbW9pemVkUHJvcHMhPT1jPyhkPVMoYiksZD1SKGIsZCksZT1lKGMsZCksYi5lZmZlY3RUYWd8PTEsZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMjplPXUoYik7bnVsbD09PWE/bnVsbD09PWIuc3RhdGVOb2RlPyhMYyhiLGIucGVuZGluZ1Byb3BzKSxEYihiLGMpLGQ9ITApOmQ9TWMoYixjKTpkPUViKGEsYixjKTtmPSExO3ZhciBoPWIudXBkYXRlUXVldWU7bnVsbCE9PWgmJm51bGwhPT1oLmNhcHR1cmVkVmFsdWVzJiYoZj1kPSEwKTtyZXR1cm4gbChhLGIsZCxlLGYsYyk7Y2FzZSAzOmE6aWYocChiKSxkPWIudXBkYXRlUXVldWUsbnVsbCE9PWQpe2Y9Yi5tZW1vaXplZFN0YXRlO2U9UWUoYSxiLGQsbnVsbCxudWxsLGMpO2IubWVtb2l6ZWRTdGF0ZT1lO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMpZD1udWxsO2Vsc2UgaWYoZj09PWUpe1dhKCk7YT1yKGEsYik7YnJlYWsgYX1lbHNlIGQ9XG5lLmVsZW1lbnQ7Zj1iLnN0YXRlTm9kZTsobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZi5oeWRyYXRlJiZIKGIpPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPVllKGIsbnVsbCxkLGMpKTooV2EoKSxnKGEsYixkKSk7Yi5tZW1vaXplZFN0YXRlPWU7YT1iLmNoaWxkfWVsc2UgV2EoKSxhPXIoYSxiKTtyZXR1cm4gYTtjYXNlIDU6YTp7eChiKTtudWxsPT09YSYmQ2IoYik7ZT1iLnR5cGU7aD1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO2lmKCFxKCkmJmg9PT1kKXtpZihoPWIubW9kZSYxJiZuKGUsZCkpYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2lmKCFofHwxMDczNzQxODIzIT09Yyl7YT1yKGEsYik7YnJlYWsgYX19aD1kLmNoaWxkcmVuO1EoZSxkKT9oPW51bGw6ZiYmUShlLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTt2KGEsYik7MTA3Mzc0MTgyMyE9PWMmJmIubW9kZSYxJiZuKGUsZCk/KGIuZXhwaXJhdGlvblRpbWU9XG4xMDczNzQxODIzLGIubWVtb2l6ZWRQcm9wcz1kLGE9bnVsbCk6KGcoYSxiLGgpLGIubWVtb2l6ZWRQcm9wcz1kLGE9Yi5jaGlsZCl9cmV0dXJuIGE7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQ2IoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLG51bGw7Y2FzZSA4OmIudGFnPTc7Y2FzZSA3OnJldHVybiBlPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09ZXx8KGU9Yi5tZW1vaXplZFByb3BzKSxkPWUuY2hpbGRyZW4sYi5zdGF0ZU5vZGU9bnVsbD09PWE/WWUoYixiLnN0YXRlTm9kZSxkLGMpOlhlKGIsYS5zdGF0ZU5vZGUsZCxjKSxiLm1lbW9pemVkUHJvcHM9ZSxiLnN0YXRlTm9kZTtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWU/KG51bGw9PT1hP2IuY2hpbGQ9WGUoYixudWxsLGUsYyk6ZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPVxuZSxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxNDpyZXR1cm4gYz1iLnR5cGUucmVuZGVyLGM9YyhiLnBlbmRpbmdQcm9wcyxiLnJlZiksZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYi5jaGlsZDtjYXNlIDEwOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTE6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4scSgpfHxudWxsIT09YyYmYi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTM6cmV0dXJuIEIoYSxiLGMpO2Nhc2UgMTI6ZD1iLnR5cGU7Zj1iLnBlbmRpbmdQcm9wczt2YXIgdD1iLm1lbW9pemVkUHJvcHM7ZT1kLl9jdXJyZW50VmFsdWU7aD1kLl9jaGFuZ2VkQml0cztpZihxKCl8fDAhPT1ofHx0IT09Zil7Yi5tZW1vaXplZFByb3BzPVxuZjt0PWYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzO2lmKHZvaWQgMD09PXR8fG51bGw9PT10KXQ9MTA3Mzc0MTgyMztiLnN0YXRlTm9kZT10OzAhPT0oaCZ0KSYmeihiLGQsaCxjKTtjPWYuY2hpbGRyZW47Yz1jKGUpO2coYSxiLGMpO2E9Yi5jaGlsZH1lbHNlIGE9cihhLGIpO3JldHVybiBhO2RlZmF1bHQ6RChcIjE1NlwiKX19fX1cbmZ1bmN0aW9uICRlKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXthLmVmZmVjdFRhZ3w9NH12YXIgaD1hLmNyZWF0ZUluc3RhbmNlLGc9YS5jcmVhdGVUZXh0SW5zdGFuY2Usaz1hLmFwcGVuZEluaXRpYWxDaGlsZCx2PWEuZmluYWxpemVJbml0aWFsQ2hpbGRyZW4sbD1hLnByZXBhcmVVcGRhdGUscD1hLnBlcnNpc3RlbmNlLHo9Yi5nZXRSb290SG9zdENvbnRhaW5lcixCPWIucG9wSG9zdENvbnRleHQscj1iLmdldEhvc3RDb250ZXh0LFE9Yi5wb3BIb3N0Q29udGFpbmVyLG49Yy5wb3BDb250ZXh0UHJvdmlkZXIseD1jLnBvcFRvcExldmVsQ29udGV4dE9iamVjdCxZPWQucG9wUHJvdmlkZXIsRz1lLnByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UsUj1lLnByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlLFM9ZS5wb3BIeWRyYXRpb25TdGF0ZSxxPXZvaWQgMCx1PXZvaWQgMCx0PXZvaWQgMDthLm11dGF0aW9uPyhxPWZ1bmN0aW9uKCl7fSx1PWZ1bmN0aW9uKGEsYixjKXsoYi51cGRhdGVRdWV1ZT1cbmMpJiZmKGIpfSx0PWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZmKGIpfSk6cD9EKFwiMjM1XCIpOkQoXCIyMzZcIik7cmV0dXJue2NvbXBsZXRlV29yazpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIG51bGw7Y2FzZSAyOnJldHVybiBuKGIpLGE9Yi5zdGF0ZU5vZGUsZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiZudWxsIT09ZC5jYXB0dXJlZFZhbHVlcyYmKGIuZWZmZWN0VGFnJj0tNjUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50RGlkQ2F0Y2g/Yi5lZmZlY3RUYWd8PTI1NjpkLmNhcHR1cmVkVmFsdWVzPW51bGwpLG51bGw7Y2FzZSAzOlEoYik7eChiKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClTKGIpLGIuZWZmZWN0VGFnJj0tMztxKGIpO2E9Yi51cGRhdGVRdWV1ZTtcbm51bGwhPT1hJiZudWxsIT09YS5jYXB0dXJlZFZhbHVlcyYmKGIuZWZmZWN0VGFnfD0yNTYpO3JldHVybiBudWxsO2Nhc2UgNTpCKGIpO2M9eigpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBwPWEubWVtb2l6ZWRQcm9wcyxIPWIuc3RhdGVOb2RlLHk9cigpO0g9bChILGUscCxkLGMseSk7dShhLGIsSCxlLHAsZCxjLHkpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFkKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXIoKTtpZihTKGIpKUcoYixjLGEpJiZmKGIpO2Vsc2V7cD1oKGUsZCxjLGEsYik7YTpmb3IoeT1iLmNoaWxkO251bGwhPT15Oyl7aWYoNT09PXkudGFnfHw2PT09eS50YWcpayhwLHkuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT15LnRhZyYmbnVsbCE9PXkuY2hpbGQpe3kuY2hpbGRbXCJyZXR1cm5cIl09eTt5PXkuY2hpbGQ7Y29udGludWV9aWYoeT09PWIpYnJlYWs7XG5mb3IoO251bGw9PT15LnNpYmxpbmc7KXtpZihudWxsPT09eVtcInJldHVyblwiXXx8eVtcInJldHVyblwiXT09PWIpYnJlYWsgYTt5PXlbXCJyZXR1cm5cIl19eS5zaWJsaW5nW1wicmV0dXJuXCJdPXlbXCJyZXR1cm5cIl07eT15LnNpYmxpbmd9dihwLGUsZCxjLGEpJiZmKGIpO2Iuc3RhdGVOb2RlPXB9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXQoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZClyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjZcIik6dm9pZCAwLG51bGw7YT16KCk7Yz1yKCk7UyhiKT9SKGIpJiZmKGIpOmIuc3RhdGVOb2RlPWcoZCxhLGMsYil9cmV0dXJuIG51bGw7Y2FzZSA3OihkPWIubWVtb2l6ZWRQcm9wcyk/dm9pZCAwOkQoXCIxNjVcIik7Yi50YWc9ODtlPVtdO2E6Zm9yKChwPWIuc3RhdGVOb2RlKSYmKHBbXCJyZXR1cm5cIl09Yik7bnVsbCE9PVxucDspe2lmKDU9PT1wLnRhZ3x8Nj09PXAudGFnfHw0PT09cC50YWcpRChcIjI0N1wiKTtlbHNlIGlmKDk9PT1wLnRhZyllLnB1c2gocC5wZW5kaW5nUHJvcHMudmFsdWUpO2Vsc2UgaWYobnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PXBbXCJyZXR1cm5cIl18fHBbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7cD1wW1wicmV0dXJuXCJdfXAuc2libGluZ1tcInJldHVyblwiXT1wW1wicmV0dXJuXCJdO3A9cC5zaWJsaW5nfXA9ZC5oYW5kbGVyO2Q9cChkLnByb3BzLGUpO2IuY2hpbGQ9WGUoYixudWxsIT09YT9hLmNoaWxkOm51bGwsZCxjKTtyZXR1cm4gYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGIudGFnPTcsbnVsbDtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgMTE6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBRKGIpLHEoYiksbnVsbDtcbmNhc2UgMTM6cmV0dXJuIFkoYiksbnVsbDtjYXNlIDEyOnJldHVybiBudWxsO2Nhc2UgMDpEKFwiMTY3XCIpO2RlZmF1bHQ6RChcIjE1NlwiKX19fX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQsZSl7dmFyIGY9YS5wb3BIb3N0Q29udGFpbmVyLGg9YS5wb3BIb3N0Q29udGV4dCxnPWIucG9wQ29udGV4dFByb3ZpZGVyLGs9Yi5wb3BUb3BMZXZlbENvbnRleHRPYmplY3Qsdj1jLnBvcFByb3ZpZGVyO3JldHVybnt0aHJvd0V4Y2VwdGlvbjpmdW5jdGlvbihhLGIsYyl7Yi5lZmZlY3RUYWd8PTUxMjtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO2I9e3ZhbHVlOmMsc291cmNlOmIsc3RhY2s6QWMoYil9O2Rve3N3aXRjaChhLnRhZyl7Y2FzZSAzOk5lKGEpO2EudXBkYXRlUXVldWUuY2FwdHVyZWRWYWx1ZXM9W2JdO2EuZWZmZWN0VGFnfD0xMDI0O3JldHVybjtjYXNlIDI6aWYoYz1hLnN0YXRlTm9kZSwwPT09KGEuZWZmZWN0VGFnJjY0KSYmbnVsbCE9PWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudERpZENhdGNoJiYhZShjKSl7TmUoYSk7Yz1hLnVwZGF0ZVF1ZXVlO3ZhciBkPWMuY2FwdHVyZWRWYWx1ZXM7bnVsbD09PWQ/XG5jLmNhcHR1cmVkVmFsdWVzPVtiXTpkLnB1c2goYik7YS5lZmZlY3RUYWd8PTEwMjQ7cmV0dXJufX1hPWFbXCJyZXR1cm5cIl19d2hpbGUobnVsbCE9PWEpfSx1bndpbmRXb3JrOmZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOmcoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gZihhKSxrKGEpLGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA1OnJldHVybiBoKGEpLG51bGw7Y2FzZSA0OnJldHVybiBmKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdihhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fSx1bndpbmRJbnRlcnJ1cHRlZFdvcms6ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZyhhKTticmVhaztjYXNlIDM6ZihhKTtrKGEpO2JyZWFrO2Nhc2UgNTpoKGEpO2JyZWFrO2Nhc2UgNDpmKGEpO2JyZWFrO2Nhc2UgMTM6dihhKX19fX1cbmZ1bmN0aW9uIGJmKGEsYil7dmFyIGM9Yi5zb3VyY2U7bnVsbD09PWIuc3RhY2smJkFjKGMpO251bGwhPT1jJiZ6YyhjKTtiPWIudmFsdWU7bnVsbCE9PWEmJjI9PT1hLnRhZyYmemMoYSk7dHJ5e2ImJmIuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihiKX1jYXRjaChkKXtkJiZkLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoZCl9fVxuZnVuY3Rpb24gY2YoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKHQpe2IoYSx0KX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIGgoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEllJiZJZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpmKGEpO3ZhciBjPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtjLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxjLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxjLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7YihhLHQpfWJyZWFrO2Nhc2UgNTpmKGEpO2JyZWFrO2Nhc2UgNzpnKGEuc3RhdGVOb2RlKTticmVhaztjYXNlIDQ6cCYmdihhKX19ZnVuY3Rpb24gZyhhKXtmb3IodmFyIGI9YTs7KWlmKGgoYiksbnVsbD09PWIuY2hpbGR8fHAmJjQ9PT1iLnRhZyl7aWYoYj09PVxuYSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ31lbHNlIGIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGR9ZnVuY3Rpb24gayhhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31mdW5jdGlvbiB2KGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9YltcInJldHVyblwiXTthOmZvcig7Oyl7bnVsbD09PWM/RChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWM9ITB9aWYoNT09PVxuYi50YWd8fDY9PT1iLnRhZylnKGIpLGU/UyhkLGIuc3RhdGVOb2RlKTpSKGQsYi5zdGF0ZU5vZGUpO2Vsc2UgaWYoND09PWIudGFnP2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpoKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkW1wicmV0dXJuXCJdPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX12YXIgbD1hLmdldFB1YmxpY0luc3RhbmNlLHA9YS5tdXRhdGlvbjthPWEucGVyc2lzdGVuY2U7cHx8KGE/RChcIjIzNVwiKTpEKFwiMjM2XCIpKTt2YXIgej1wLmNvbW1pdE1vdW50LEI9cC5jb21taXRVcGRhdGUscj1wLnJlc2V0VGV4dENvbnRlbnQsUT1wLmNvbW1pdFRleHRVcGRhdGUsbj1wLmFwcGVuZENoaWxkLFxueD1wLmFwcGVuZENoaWxkVG9Db250YWluZXIsWT1wLmluc2VydEJlZm9yZSxHPXAuaW5zZXJ0SW5Db250YWluZXJCZWZvcmUsUj1wLnJlbW92ZUNoaWxkLFM9cC5yZW1vdmVDaGlsZEZyb21Db250YWluZXI7cmV0dXJue2NvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlczpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmlmKGIuZWZmZWN0VGFnJjIwNDgmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTthLnByb3BzPWIubWVtb2l6ZWRQcm9wczthLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYyxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9YnJlYWs7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdFJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7cihhLnN0YXRlTm9kZSl9LFxuY29tbWl0UGxhY2VtZW50OmZ1bmN0aW9uKGEpe2E6e2Zvcih2YXIgYj1hW1wicmV0dXJuXCJdO251bGwhPT1iOyl7aWYoayhiKSl7dmFyIGM9YjticmVhayBhfWI9YltcInJldHVyblwiXX1EKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6RChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHIoYiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWNbXCJyZXR1cm5cIl18fGsoY1tcInJldHVyblwiXSkpe2M9bnVsbDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jLnNpYmxpbmdbXCJyZXR1cm5cIl09Y1tcInJldHVyblwiXTtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09XG5jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkW1wicmV0dXJuXCJdPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpYz9kP0coYixlLnN0YXRlTm9kZSxjKTpZKGIsZS5zdGF0ZU5vZGUsYyk6ZD94KGIsZS5zdGF0ZU5vZGUpOm4oYixlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkW1wicmV0dXJuXCJdPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lW1wicmV0dXJuXCJdfHxlW1wicmV0dXJuXCJdPT09YSlyZXR1cm47ZT1lW1wicmV0dXJuXCJdfWUuc2libGluZ1tcInJldHVyblwiXT1lW1wicmV0dXJuXCJdO2U9ZS5zaWJsaW5nfX0sY29tbWl0RGVsZXRpb246ZnVuY3Rpb24oYSl7dihhKTtcbmFbXCJyZXR1cm5cIl09bnVsbDthLmNoaWxkPW51bGw7YS5hbHRlcm5hdGUmJihhLmFsdGVybmF0ZS5jaGlsZD1udWxsLGEuYWx0ZXJuYXRlW1wicmV0dXJuXCJdPW51bGwpfSxjb21taXRXb3JrOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZCKGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjJcIik6dm9pZCAwO2M9Yi5tZW1vaXplZFByb3BzO1EoYi5zdGF0ZU5vZGUsbnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmMsYyk7YnJlYWs7Y2FzZSAzOmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdExpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAyOmE9XG5jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEucHJvcHM9Yy5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWIubWVtb2l6ZWRQcm9wcztiPWIubWVtb2l6ZWRTdGF0ZTthLnByb3BzPWMubWVtb2l6ZWRQcm9wczthLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZTthLmNvbXBvbmVudERpZFVwZGF0ZShkLGIsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yz1jLnVwZGF0ZVF1ZXVlO251bGwhPT1jJiZSZShjLGEpO2JyZWFrO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWwoYy5jaGlsZC5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgMjphPWMuY2hpbGQuc3RhdGVOb2RlfVJlKGIsYSl9YnJlYWs7Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJlxuNCYmeihhLGMudHlwZSxjLm1lbW9pemVkUHJvcHMsYyk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRFcnJvckxvZ2dpbmc6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjp2YXIgYz1hLnR5cGU7Yj1hLnN0YXRlTm9kZTt2YXIgZD1hLnVwZGF0ZVF1ZXVlO251bGw9PT1kfHxudWxsPT09ZC5jYXB0dXJlZFZhbHVlcz9EKFwiMjY0XCIpOnZvaWQgMDt2YXIgZj1kLmNhcHR1cmVkVmFsdWVzO2QuY2FwdHVyZWRWYWx1ZXM9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2gmJmUoYik7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHM7Yi5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrKyl7ZD1mW2NdO3ZhciBnPWQudmFsdWUsaD1kLnN0YWNrO2JmKGEsZCk7Yi5jb21wb25lbnREaWRDYXRjaChnLHtjb21wb25lbnRTdGFjazpudWxsIT09aD9oOlwiXCJ9KX1icmVhaztcbmNhc2UgMzpjPWEudXBkYXRlUXVldWU7bnVsbD09PWN8fG51bGw9PT1jLmNhcHR1cmVkVmFsdWVzP0QoXCIyNjRcIik6dm9pZCAwO2Y9Yy5jYXB0dXJlZFZhbHVlcztjLmNhcHR1cmVkVmFsdWVzPW51bGw7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrKylkPWZbY10sYmYoYSxkKSxiKGQudmFsdWUpO2JyZWFrO2RlZmF1bHQ6RChcIjI2NVwiKX19LGNvbW1pdEF0dGFjaFJlZjpmdW5jdGlvbihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1sKGMpO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fSxjb21taXREZXRhY2hSZWY6ZnVuY3Rpb24oYSl7YT1hLnJlZjtudWxsIT09YSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EobnVsbCk6YS5jdXJyZW50PW51bGwpfX19dmFyIGRmPXt9O1xuZnVuY3Rpb24gZWYoYSxiKXtmdW5jdGlvbiBjKGEpe2E9PT1kZj9EKFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX12YXIgZD1hLmdldENoaWxkSG9zdENvbnRleHQsZT1hLmdldFJvb3RIb3N0Q29udGV4dDthPWIuY3JlYXRlQ3Vyc29yO3ZhciBmPWIucHVzaCxoPWIucG9wLGc9YShkZiksaz1hKGRmKSx2PWEoZGYpO3JldHVybntnZXRIb3N0Q29udGV4dDpmdW5jdGlvbigpe3JldHVybiBjKGcuY3VycmVudCl9LGdldFJvb3RIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKCl7cmV0dXJuIGModi5jdXJyZW50KX0scG9wSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhKXtoKGcsYSk7aChrLGEpO2godixhKX0scG9wSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7ay5jdXJyZW50PT09YSYmKGgoZyxhKSxoKGssYSkpfSxwdXNoSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhLGIpe2YodixiLGEpO2YoayxhLGEpO2YoZyxkZixhKTtiPWUoYik7aChnLGEpO2YoZyxiLGEpfSxwdXNoSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9XG5jKHYuY3VycmVudCksZT1jKGcuY3VycmVudCk7Yj1kKGUsYS50eXBlLGIpO2UhPT1iJiYoZihrLGEsYSksZihnLGIsYSkpfX19XG5mdW5jdGlvbiBmZihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9bmV3IHhlKDUsbnVsbCxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gYyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBiPWYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9aChiLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hW1wicmV0dXJuXCJdO3A9YX12YXIgZT1hLnNob3VsZFNldFRleHRDb250ZW50O1xuYT1hLmh5ZHJhdGlvbjtpZighYSlyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7fSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbigpe0QoXCIxNzVcIil9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NlwiKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19O3ZhciBmPWEuY2FuSHlkcmF0ZUluc3RhbmNlLGg9YS5jYW5IeWRyYXRlVGV4dEluc3RhbmNlLGc9YS5nZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcsaz1hLmdldEZpcnN0SHlkcmF0YWJsZUNoaWxkLHY9YS5oeWRyYXRlSW5zdGFuY2UsbD1hLmh5ZHJhdGVUZXh0SW5zdGFuY2UscD1udWxsLHo9bnVsbCxCPSExO3JldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe3o9XG5rKGEuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3A9YTtyZXR1cm4gQj0hMH0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3o9cD1udWxsO0I9ITF9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKGEpe2lmKEIpe3ZhciBkPXo7aWYoZCl7aWYoIWMoYSxkKSl7ZD1nKGQpO2lmKCFkfHwhYyhhLGQpKXthLmVmZmVjdFRhZ3w9MjtCPSExO3A9YTtyZXR1cm59YihwLHopfXA9YTt6PWsoZCl9ZWxzZSBhLmVmZmVjdFRhZ3w9MixCPSExLHA9YX19LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2I9dihhLnN0YXRlTm9kZSxhLnR5cGUsYS5tZW1vaXplZFByb3BzLGIsYyxhKTthLnVwZGF0ZVF1ZXVlPWI7cmV0dXJuIG51bGwhPT1iPyEwOiExfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gbChhLnN0YXRlTm9kZSxhLm1lbW9pemVkUHJvcHMsYSl9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe2lmKGEhPT1cbnApcmV0dXJuITE7aWYoIUIpcmV0dXJuIGQoYSksQj0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWMmJlwiYm9keVwiIT09YyYmIWUoYyxhLm1lbW9pemVkUHJvcHMpKWZvcihjPXo7YzspYihhLGMpLGM9ZyhjKTtkKGEpO3o9cD9nKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfX19XG5mdW5jdGlvbiBnZihhKXtmdW5jdGlvbiBiKGEsYixjKXthPWEuc3RhdGVOb2RlO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Y31mdW5jdGlvbiBjKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jaGlsZENvbnRleHRUeXBlc31mdW5jdGlvbiBkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGUsZD1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBiO2M9Yy5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gYyllIGluIGQ/dm9pZCAwOkQoXCIxMDhcIix6YyhhKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIEEoe30sYixjKX12YXIgZT1hLmNyZWF0ZUN1cnNvcixmPWEucHVzaCxoPWEucG9wLGc9ZShqYSksaz1lKCExKSx2PWphO3JldHVybntnZXRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGMoYSk/XG52OmcuY3VycmVudH0sY2FjaGVDb250ZXh0OmIsZ2V0TWFza2VkQ29udGV4dDpmdW5jdGlvbihhLGMpe3ZhciBkPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWQpcmV0dXJuIGphO3ZhciBlPWEuc3RhdGVOb2RlO2lmKGUmJmUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWMpcmV0dXJuIGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGY9e30sZztmb3IoZyBpbiBkKWZbZ109Y1tnXTtlJiZiKGEsYyxmKTtyZXR1cm4gZn0saGFzQ29udGV4dENoYW5nZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gay5jdXJyZW50fSxpc0NvbnRleHRDb25zdW1lcjpmdW5jdGlvbihhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY29udGV4dFR5cGVzfSxpc0NvbnRleHRQcm92aWRlcjpjLHBvcENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtjKGEpJiYoaChrLGEpLGgoZyxhKSl9LHBvcFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhKXtoKGssXG5hKTtoKGcsYSl9LHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3Q6ZnVuY3Rpb24oYSxiLGMpe251bGwhPWcuY3Vyc29yP0QoXCIxNjhcIik6dm9pZCAwO2YoZyxiLGEpO2YoayxjLGEpfSxwcm9jZXNzQ2hpbGRDb250ZXh0OmQscHVzaENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtpZighYyhhKSlyZXR1cm4hMTt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fGphO3Y9Zy5jdXJyZW50O2YoZyxiLGEpO2YoayxrLmN1cnJlbnQsYSk7cmV0dXJuITB9LGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtjP3ZvaWQgMDpEKFwiMTY5XCIpO2lmKGIpe3ZhciBlPWQoYSx2KTtjLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWU7aChrLGEpO2goZyxhKTtmKGcsZSxhKX1lbHNlIGgoayxhKTtmKGssYixhKX0sZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7Zm9yKDIhPT1cbndkKGEpfHwyIT09YS50YWc/RChcIjE3MFwiKTp2b2lkIDA7MyE9PWEudGFnOyl7aWYoYyhhKSlyZXR1cm4gYS5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7KGE9YVtcInJldHVyblwiXSk/dm9pZCAwOkQoXCIxNzFcIil9cmV0dXJuIGEuc3RhdGVOb2RlLmNvbnRleHR9fX1cbmZ1bmN0aW9uIGhmKGEpe3ZhciBiPWEuY3JlYXRlQ3Vyc29yLGM9YS5wdXNoLGQ9YS5wb3AsZT1iKG51bGwpLGY9YihudWxsKSxoPWIoMCk7cmV0dXJue3B1c2hQcm92aWRlcjpmdW5jdGlvbihhKXt2YXIgYj1hLnR5cGUuX2NvbnRleHQ7YyhoLGIuX2NoYW5nZWRCaXRzLGEpO2MoZixiLl9jdXJyZW50VmFsdWUsYSk7YyhlLGEsYSk7Yi5fY3VycmVudFZhbHVlPWEucGVuZGluZ1Byb3BzLnZhbHVlO2IuX2NoYW5nZWRCaXRzPWEuc3RhdGVOb2RlfSxwb3BQcm92aWRlcjpmdW5jdGlvbihhKXt2YXIgYj1oLmN1cnJlbnQsYz1mLmN1cnJlbnQ7ZChlLGEpO2QoZixhKTtkKGgsYSk7YT1hLnR5cGUuX2NvbnRleHQ7YS5fY3VycmVudFZhbHVlPWM7YS5fY2hhbmdlZEJpdHM9Yn19fVxuZnVuY3Rpb24gamYoKXt2YXIgYT1bXSxiPS0xO3JldHVybntjcmVhdGVDdXJzb3I6ZnVuY3Rpb24oYSl7cmV0dXJue2N1cnJlbnQ6YX19LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4tMT09PWJ9LHBvcDpmdW5jdGlvbihjKXswPmJ8fChjLmN1cnJlbnQ9YVtiXSxhW2JdPW51bGwsYi0tKX0scHVzaDpmdW5jdGlvbihjLGQpe2IrKzthW2JdPWMuY3VycmVudDtjLmN1cnJlbnQ9ZH0sY2hlY2tUaGF0U3RhY2tJc0VtcHR5OmZ1bmN0aW9uKCl7fSxyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXY6ZnVuY3Rpb24oKXt9fX1cbmZ1bmN0aW9uIGtmKGEpe2Z1bmN0aW9uIGIoKXtpZihudWxsIT09SSlmb3IodmFyIGE9SVtcInJldHVyblwiXTtudWxsIT09YTspTGMoYSksYT1hW1wicmV0dXJuXCJdO1lhPW51bGw7Wj0wO0k9bnVsbDtOYz0hMX1mdW5jdGlvbiBjKGEpe3JldHVybiBudWxsIT09eWEmJnlhLmhhcyhhKX1mdW5jdGlvbiBkKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hW1wicmV0dXJuXCJdLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmNTEyKSl7Yj1DYihiLGEsWik7dmFyIGU9YTtpZigxMDczNzQxODIzPT09Wnx8MTA3Mzc0MTgyMyE9PWUuZXhwaXJhdGlvblRpbWUpe2I6c3dpdGNoKGUudGFnKXtjYXNlIDM6Y2FzZSAyOnZhciBmPWUudXBkYXRlUXVldWU7Zj1udWxsPT09Zj8wOmYuZXhwaXJhdGlvblRpbWU7YnJlYWsgYjtkZWZhdWx0OmY9MH1mb3IodmFyIGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9XG5nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7TmM9ITA7YnJlYWt9fWVsc2V7YT1LYyhhKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTI1NTksYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PVxubnVsbCxjLmVmZmVjdFRhZ3w9NTEyKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha319cmV0dXJuIG51bGx9ZnVuY3Rpb24gZShhKXt2YXIgYj1XYShhLmFsdGVybmF0ZSxhLFopO251bGw9PT1iJiYoYj1kKGEpKTttYy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhLGMsZil7Y2E/RChcIjI0M1wiKTp2b2lkIDA7Y2E9ITA7aWYoYyE9PVp8fGEhPT1ZYXx8bnVsbD09PUkpYigpLFlhPWEsWj1jLEk9eWUoWWEuY3VycmVudCxudWxsLFopLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGc9ITE7ZG97dHJ5e2lmKGYpZm9yKDtudWxsIT09SSYmIVMoKTspST1lKEkpO2Vsc2UgZm9yKDtudWxsIT09STspST1lKEkpfWNhdGNoKE9jKXtpZihudWxsPT09SSl7Zz0hMDtxKE9jKTticmVha31mPUk7dmFyIGg9ZltcInJldHVyblwiXTtpZihudWxsPT09aCl7Zz0hMDtxKE9jKTticmVha31KYyhoLGYsT2MpO0k9ZChmKX1icmVha313aGlsZSgxKTtcbmNhPSExO2lmKGd8fG51bGwhPT1JKXJldHVybiBudWxsO2lmKE5jKXJldHVybiBhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuY3VycmVudC5hbHRlcm5hdGU7RChcIjI2MlwiKX1mdW5jdGlvbiBoKGEsYixjLGQpe2E9e3ZhbHVlOmMsc291cmNlOmEsc3RhY2s6QWMoYSl9O09lKGIse2V4cGlyYXRpb25UaW1lOmQscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6bnVsbCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTphLG5leHQ6bnVsbH0pO3YoYixkKX1mdW5jdGlvbiBnKGEsYil7YTp7Y2EmJiFaYT9EKFwiMjYzXCIpOnZvaWQgMDtmb3IodmFyIGQ9YVtcInJldHVyblwiXTtudWxsIT09ZDspe3N3aXRjaChkLnRhZyl7Y2FzZSAyOnZhciBlPWQuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRDYXRjaCYmIWMoZSkpe2goYSxkLGIsXG4xKTthPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgMzpoKGEsZCxiLDEpO2E9dm9pZCAwO2JyZWFrIGF9ZD1kW1wicmV0dXJuXCJdfTM9PT1hLnRhZyYmaChhLGEsYiwxKTthPXZvaWQgMH1yZXR1cm4gYX1mdW5jdGlvbiBrKGEpe2E9MCE9PWlhP2lhOmNhP1phPzE6WjphLm1vZGUmMT96YT8xMCooKChsKCkrNTApLzEwfDApKzEpOjI1KigoKGwoKSs1MDApLzI1fDApKzEpOjE7emEmJigwPT09ZGF8fGE+ZGEpJiYoZGE9YSk7cmV0dXJuIGF9ZnVuY3Rpb24gdihhLGMpe2E6e2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5jKWEuZXhwaXJhdGlvblRpbWU9YztudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmMpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yyk7aWYobnVsbD09PWFbXCJyZXR1cm5cIl0paWYoMz09PWEudGFnKXt2YXIgZD1cbmEuc3RhdGVOb2RlOyFjYSYmMCE9PVomJmM8WiYmYigpO2NhJiYhWmEmJllhPT09ZHx8QihkLGMpO0ZiPndnJiZEKFwiMTg1XCIpfWVsc2V7Yz12b2lkIDA7YnJlYWsgYX1hPWFbXCJyZXR1cm5cIl19Yz12b2lkIDB9cmV0dXJuIGN9ZnVuY3Rpb24gbCgpe3ZlPUljKCktUGM7cmV0dXJuIHhnPSh2ZS8xMHwwKSsyfWZ1bmN0aW9uIHAoYSxiLGMsZCxlKXt2YXIgZj1pYTtpYT0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e2lhPWZ9fWZ1bmN0aW9uIHooYSl7aWYoMCE9PUdiKXtpZihhPkdiKXJldHVybjt5ZyhRYyl9dmFyIGI9SWMoKS1QYztHYj1hO1FjPWxnKFEse3RpbWVvdXQ6MTAqKGEtMiktYn0pfWZ1bmN0aW9uIEIoYSxiKXtpZihudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdClhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIsbnVsbD09PUs/KGxhPUs9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihLPUsubmV4dFNjaGVkdWxlZFJvb3Q9YSxLLm5leHRTY2hlZHVsZWRSb290PWxhKTtcbmVsc2V7dmFyIGM9YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Y3x8YjxjKWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1UfHwoSj9IYiYmKGFhPWEsUD0xLEcoYSwxLCExKSk6MT09PWI/bigpOnooYikpfWZ1bmN0aW9uIHIoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Sylmb3IodmFyIGM9SyxkPWxhO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1LP0QoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtsYT1LPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1sYSlsYT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsSy5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1LKXtLPWM7Sy5uZXh0U2NoZWR1bGVkUm9vdD1sYTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PVxuZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1LKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9YWE7bnVsbCE9PWMmJmM9PT1iJiYxPT09YT9GYisrOkZiPTA7YWE9YjtQPWF9ZnVuY3Rpb24gUShhKXt4KDAsITAsYSl9ZnVuY3Rpb24gbigpe3goMSwhMSxudWxsKX1mdW5jdGlvbiB4KGEsYixjKXskYT1jO3IoKTtpZihiKWZvcig7bnVsbCE9PWFhJiYwIT09UCYmKDA9PT1hfHxhPj1QKSYmKCFJYnx8bCgpPj1QKTspRyhhYSxQLCFJYikscigpO2Vsc2UgZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApOylHKGFhLFAsITEpLHIoKTtudWxsIT09JGEmJihHYj0wLFFjPS0xKTswIT09UCYmeihQKTskYT1udWxsO0liPSExO1koKX1mdW5jdGlvbiBZKCl7RmI9MDtpZihudWxsIT09QWEpe3ZhciBhPUFhO0FhPW51bGw7Zm9yKHZhciBiPVxuMDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKHZnKXtCYXx8KEJhPSEwLEpiPXZnKX19fWlmKEJhKXRocm93IGE9SmIsSmI9bnVsbCxCYT0hMSxhO31mdW5jdGlvbiBHKGEsYixjKXtUP0QoXCIyNDVcIik6dm9pZCAwO1Q9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9SKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPWYoYSxiLCEwKSxudWxsIT09YyYmKFMoKT9hLmZpbmlzaGVkV29yaz1jOlIoYSxjLGIpKSkpOihjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITEpLG51bGwhPT1jJiZSKGEsYyxiKSkpO1Q9ITF9ZnVuY3Rpb24gUihhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1BYT9BYT1bZF06QWEucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1cbjA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7WmE9Y2E9ITA7Yz1iLnN0YXRlTm9kZTtjLmN1cnJlbnQ9PT1iP0QoXCIxNzdcIik6dm9pZCAwO2Q9Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWQ/RChcIjI2MVwiKTp2b2lkIDA7Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT1sKCk7bWMuY3VycmVudD1udWxsO2lmKDE8Yi5lZmZlY3RUYWcpaWYobnVsbCE9PWIubGFzdEVmZmVjdCl7Yi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yjt2YXIgZj1iLmZpcnN0RWZmZWN0fWVsc2UgZj1iO2Vsc2UgZj1iLmZpcnN0RWZmZWN0O3pnKGMuY29udGFpbmVySW5mbyk7Zm9yKHc9ZjtudWxsIT09dzspe3ZhciBoPSExLGs9dm9pZCAwO3RyeXtmb3IoO251bGwhPT13Oyl3LmVmZmVjdFRhZyYyMDQ4JiZEYih3LmFsdGVybmF0ZSx3KSx3PXcubmV4dEVmZmVjdH1jYXRjaChhYil7aD0hMCxrPWFifWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PVxudyYmKHc9dy5uZXh0RWZmZWN0KSl9Zm9yKHc9ZjtudWxsIT09dzspe2g9ITE7az12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXt2YXIgcD13LmVmZmVjdFRhZztwJjE2JiZNYyh3KTtpZihwJjEyOCl7dmFyIG49dy5hbHRlcm5hdGU7bnVsbCE9PW4mJmtnKG4pfXN3aXRjaChwJjE0KXtjYXNlIDI6RWIodyk7dy5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpFYih3KTt3LmVmZmVjdFRhZyY9LTM7dGUody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA0OnRlKHcuYWx0ZXJuYXRlLHcpO2JyZWFrO2Nhc2UgODpnZyh3KX13PXcubmV4dEVmZmVjdH19Y2F0Y2goYWIpe2g9ITAsaz1hYn1oJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LGspLG51bGwhPT13JiYodz13Lm5leHRFZmZlY3QpKX1BZyhjLmNvbnRhaW5lckluZm8pO2MuY3VycmVudD1iO2Zvcih3PWY7bnVsbCE9PXc7KXtwPSExO249dm9pZCAwO3RyeXtmb3IoZj1jLGg9ZSxrPWQ7bnVsbCE9PXc7KXt2YXIgcj13LmVmZmVjdFRhZztcbnImMzYmJmhnKGYsdy5hbHRlcm5hdGUsdyxoLGspO3ImMjU2JiZpZyh3LHEpO3ImMTI4JiZqZyh3KTt2YXIgdD13Lm5leHRFZmZlY3Q7dy5uZXh0RWZmZWN0PW51bGw7dz10fX1jYXRjaChhYil7cD0hMCxuPWFifXAmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsbiksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfWNhPVphPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBIZSYmSGUoYi5zdGF0ZU5vZGUpO2I9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYoeWE9bnVsbCk7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifWZ1bmN0aW9uIFMoKXtyZXR1cm4gbnVsbD09PSRhfHwkYS50aW1lUmVtYWluaW5nKCk+Qmc/ITE6SWI9ITB9ZnVuY3Rpb24gcShhKXtudWxsPT09YWE/RChcIjI0NlwiKTp2b2lkIDA7YWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtCYXx8KEJhPSEwLEpiPWEpfXZhciB1PWpmKCksdD1lZihhLHUpLHk9Z2YodSk7dT1oZih1KTt2YXIgSD1mZihhKSxcbldhPVplKGEsdCx5LHUsSCx2LGspLmJlZ2luV29yayxDYj0kZShhLHQseSx1LEgpLmNvbXBsZXRlV29yazt0PWFmKHQseSx1LHYsYyk7dmFyIEpjPXQudGhyb3dFeGNlcHRpb24sS2M9dC51bndpbmRXb3JrLExjPXQudW53aW5kSW50ZXJydXB0ZWRXb3JrO3Q9Y2YoYSxnLHYsayxmdW5jdGlvbihhKXtudWxsPT09eWE/eWE9bmV3IFNldChbYV0pOnlhLmFkZChhKX0sbCk7dmFyIERiPXQuY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzLE1jPXQuY29tbWl0UmVzZXRUZXh0Q29udGVudCxFYj10LmNvbW1pdFBsYWNlbWVudCxnZz10LmNvbW1pdERlbGV0aW9uLHRlPXQuY29tbWl0V29yayxoZz10LmNvbW1pdExpZmVDeWNsZXMsaWc9dC5jb21taXRFcnJvckxvZ2dpbmcsamc9dC5jb21taXRBdHRhY2hSZWYsa2c9dC5jb21taXREZXRhY2hSZWYsSWM9YS5ub3csbGc9YS5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2sseWc9YS5jYW5jZWxEZWZlcnJlZENhbGxiYWNrLHpnPWEucHJlcGFyZUZvckNvbW1pdCxcbkFnPWEucmVzZXRBZnRlckNvbW1pdCxQYz1JYygpLHhnPTIsdmU9UGMsUmM9MCxpYT0wLGNhPSExLEk9bnVsbCxZYT1udWxsLFo9MCx3PW51bGwsWmE9ITEsTmM9ITEseWE9bnVsbCxsYT1udWxsLEs9bnVsbCxHYj0wLFFjPS0xLFQ9ITEsYWE9bnVsbCxQPTAsZGE9MCxJYj0hMSxCYT0hMSxKYj1udWxsLCRhPW51bGwsSj0hMSxIYj0hMSx6YT0hMSxBYT1udWxsLHdnPTFFMyxGYj0wLEJnPTE7cmV0dXJue3JlY2FsY3VsYXRlQ3VycmVudFRpbWU6bCxjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOmssc2NoZWR1bGVXb3JrOnYscmVxdWVzdFdvcms6QixmbHVzaFJvb3Q6ZnVuY3Rpb24oYSxiKXtUP0QoXCIyNTNcIik6dm9pZCAwO2FhPWE7UD1iO0coYSxiLCExKTtuKCk7WSgpfSxiYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe3ZhciBjPUo7Sj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoSj1jKXx8VHx8bigpfX0sdW5iYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe2lmKEomJiFIYil7SGI9XG4hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtIYj0hMX19cmV0dXJuIGEoYil9LGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1Q/RChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gcChhLGIpfWZpbmFsbHl7Sj1jLG4oKX19LGZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1KO0o9ITA7dHJ5e3AoYSl9ZmluYWxseXsoSj1iKXx8VHx8eCgxLCExLG51bGwpfX0sZGVmZXJyZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPWlhO2lhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7aWE9Yn19LHN5bmNVcGRhdGVzOnAsaW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKGEsYixjKXtpZih6YSlyZXR1cm4gYShiLGMpO0p8fFR8fDA9PT1kYXx8KHgoZGEsITEsbnVsbCksZGE9MCk7dmFyIGQ9emEsZT1KO0o9emE9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXt6YT1kLChKPWUpfHxUfHxuKCl9fSxmbHVzaEludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbigpe1R8fFxuMD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKX0sY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjpmdW5jdGlvbigpe3ZhciBhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO2E8PVJjJiYoYT1SYysxKTtyZXR1cm4gUmM9YX0sbGVnYWN5Q29udGV4dDp5fX1cbmZ1bmN0aW9uIGxmKGEpe2Z1bmN0aW9uIGIoYSxiLGMsZCxlLGYpe2Q9Yi5jdXJyZW50O2lmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBnPWsoYyk7Yz12KGMpP2woYyxnKTpnfWVsc2UgYz1qYTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWY7T2UoZCx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6e2VsZW1lbnQ6YX0sY2FsbGJhY2s6dm9pZCAwPT09Yj9udWxsOmIsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtoKGQsZSk7cmV0dXJuIGV9ZnVuY3Rpb24gYyhhKXthPUFkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfXZhciBkPWEuZ2V0UHVibGljSW5zdGFuY2U7YT1rZihhKTt2YXIgZT1hLnJlY2FsY3VsYXRlQ3VycmVudFRpbWUsZj1hLmNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIsaD1hLnNjaGVkdWxlV29yayxnPWEubGVnYWN5Q29udGV4dCxcbms9Zy5maW5kQ3VycmVudFVubWFza2VkQ29udGV4dCx2PWcuaXNDb250ZXh0UHJvdmlkZXIsbD1nLnByb2Nlc3NDaGlsZENvbnRleHQ7cmV0dXJue2NyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyl7Yj1uZXcgeGUoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBiLnN0YXRlTm9kZT1hfSx1cGRhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxjLGQsZyl7dmFyIGg9Yy5jdXJyZW50LGs9ZSgpO2g9ZihoKTtyZXR1cm4gYihhLGMsZCxrLGgsZyl9LHVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWU6ZnVuY3Rpb24oYSxcbmMsZCxmLGcpe3ZhciBoPWUoKTtyZXR1cm4gYihhLGMsZCxoLGYsZyl9LGZsdXNoUm9vdDphLmZsdXNoUm9vdCxyZXF1ZXN0V29yazphLnJlcXVlc3RXb3JrLGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246YS5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uLGJhdGNoZWRVcGRhdGVzOmEuYmF0Y2hlZFVwZGF0ZXMsdW5iYXRjaGVkVXBkYXRlczphLnVuYmF0Y2hlZFVwZGF0ZXMsZGVmZXJyZWRVcGRhdGVzOmEuZGVmZXJyZWRVcGRhdGVzLHN5bmNVcGRhdGVzOmEuc3luY1VwZGF0ZXMsaW50ZXJhY3RpdmVVcGRhdGVzOmEuaW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmEuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMsZmx1c2hDb250cm9sbGVkOmEuZmx1c2hDb250cm9sbGVkLGZsdXNoU3luYzphLmZsdXNoU3luYyxnZXRQdWJsaWNSb290SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGQoYS5jaGlsZC5zdGF0ZU5vZGUpO1xuZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fSxmaW5kSG9zdEluc3RhbmNlOmMsZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1CZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIEdlKEEoe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGMoYSl9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9fX12YXIgbWY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpsZn0pLG5mPW1mJiZsZnx8bWYsb2Y9bmZbXCJkZWZhdWx0XCJdP25mW1wiZGVmYXVsdFwiXTpuZjtcbmZ1bmN0aW9uIHBmKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6cWMsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319dmFyIHFmPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cscmY9dm9pZCAwO3JmPXFmP2Z1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTt2YXIgc2Y9dm9pZCAwLHRmPXZvaWQgMDtcbmlmKG0uY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrKXt2YXIgdWY9bnVsbCx2Zj0hMSx3Zj0tMSx4Zj0hMSx5Zj0wLHpmPTMzLEFmPTMzLEJmPXZvaWQgMDtCZj1xZj97ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9eWYtcGVyZm9ybWFuY2Uubm93KCk7cmV0dXJuIDA8YT9hOjB9fTp7ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9eWYtRGF0ZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19O3ZhciBDZj1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PUNmKXt2Zj0hMTthPXJmKCk7aWYoMD49eWYtYSlpZigtMSE9PVxud2YmJndmPD1hKUJmLmRpZFRpbWVvdXQ9ITA7ZWxzZXt4Znx8KHhmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShEZikpO3JldHVybn1lbHNlIEJmLmRpZFRpbWVvdXQ9ITE7d2Y9LTE7YT11Zjt1Zj1udWxsO251bGwhPT1hJiZhKEJmKX19LCExKTt2YXIgRGY9ZnVuY3Rpb24oYSl7eGY9ITE7dmFyIGI9YS15ZitBZjtiPEFmJiZ6ZjxBZj8oOD5iJiYoYj04KSxBZj1iPHpmP3pmOmIpOnpmPWI7eWY9YStBZjt2Znx8KHZmPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShDZixcIipcIikpfTtzZj1mdW5jdGlvbihhLGIpe3VmPWE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJih3Zj1yZigpK2IudGltZW91dCk7eGZ8fCh4Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRGYpKTtyZXR1cm4gMH07dGY9ZnVuY3Rpb24oKXt1Zj1udWxsO3ZmPSExO3dmPS0xfX1lbHNlIHNmPXdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrLHRmPXdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2s7ZWxzZSBzZj1cbmZ1bmN0aW9uKGEpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sZGlkVGltZW91dDohMX0pfSl9LHRmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07ZnVuY3Rpb24gRWYoYSl7dmFyIGI9XCJcIjtiYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEZmKGEsYil7YT1BKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RWYoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gR2YoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEhmKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBJZihhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0QoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpEKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBMZihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgTWY9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gTmYoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBPZihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/TmYoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUGY9dm9pZCAwLFFmPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1mLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BmPVBmfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BmLmlubmVySFRNTD1cIlxceDNjc3ZnXFx4M2VcIitiK1wiXFx4M2Mvc3ZnXFx4M2VcIjtmb3IoYj1QZi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBSZihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIFNmPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LFRmPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhTZikuZm9yRWFjaChmdW5jdGlvbihhKXtUZi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1NmW2JdPVNmW2FdfSl9KTtcbmZ1bmN0aW9uIFVmKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fFNmLmhhc093blByb3BlcnR5KGUpJiZTZltlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBWZj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gV2YoYSxiLGMpe2ImJihWZlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6RChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/RChcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gWGYoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBZZj1NZi5odG1sLFpmPUMudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiAkZihhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1qZShhKTtiPXVhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2MuaGFzT3duUHJvcGVydHkoZSkmJmNbZV18fChcInRvcFNjcm9sbFwiPT09ZT9ZZChcInRvcFNjcm9sbFwiLFwic2Nyb2xsXCIsYSk6XCJ0b3BGb2N1c1wiPT09ZXx8XCJ0b3BCbHVyXCI9PT1lPyhZZChcInRvcEZvY3VzXCIsXCJmb2N1c1wiLGEpLFlkKFwidG9wQmx1clwiLFwiYmx1clwiLGEpLGMudG9wQmx1cj0hMCxjLnRvcEZvY3VzPSEwKTpcInRvcENhbmNlbFwiPT09ZT8oaGMoXCJjYW5jZWxcIiwhMCkmJllkKFwidG9wQ2FuY2VsXCIsXCJjYW5jZWxcIixhKSxjLnRvcENhbmNlbD0hMCk6XCJ0b3BDbG9zZVwiPT09ZT8oaGMoXCJjbG9zZVwiLCEwKSYmWWQoXCJ0b3BDbG9zZVwiLFwiY2xvc2VcIixhKSxjLnRvcENsb3NlPSEwKTplZS5oYXNPd25Qcm9wZXJ0eShlKSYmVyhlLGVlW2VdLGEpLGNbZV09ITApfX1cbmZ1bmN0aW9uIGFnKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PVlmJiYoZD1OZihhKSk7ZD09PVlmP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIlxceDNjc2NyaXB0XFx4M2VcXHgzYy9zY3JpcHRcXHgzZVwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmcoYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gY2coYSxiLGMsZCl7dmFyIGU9WGYoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGYgaW4gZmUpZmUuaGFzT3duUHJvcGVydHkoZikmJlcoZixmZVtmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VyhcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1coXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpWYyhhLGMpO2Y9VWMoYSxjKTtXKFwidG9wSW52YWxpZFwiLFxuXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUZmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOkhmKGEsYyk7Zj1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpmKGEsYyk7Zj1JZihhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfVdmKGIsZixaZik7dmFyIGg9ZixnO2ZvcihnIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGs9aFtnXTtcInN0eWxlXCI9PT1nP1VmKGEsayxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZRZihhLGspKTpcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZSZihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmXG5SZihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWcmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1nJiZcImF1dG9Gb2N1c1wiIT09ZyYmKHRhLmhhc093blByb3BlcnR5KGcpP251bGwhPWsmJiRmKGQsZyk6bnVsbCE9ayYmVGMoYSxnLGssZSkpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjprYyhhKTskYyhhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmtjKGEpO0xmKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/R2YoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJkdmKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9fVxuZnVuY3Rpb24gZGcoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPVVjKGEsYyk7ZD1VYyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9RmYoYSxjKTtkPUZmKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9SWYoYSxjKTtkPUlmKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9V2YoYixkLFpmKTtiPWE9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGEgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5oYXNPd25Qcm9wZXJ0eShhKSYmbnVsbCE9Y1thXSlpZihcInN0eWxlXCI9PT1hKXt2YXIgZz1jW2FdO2ZvcihiIGluIGcpZy5oYXNPd25Qcm9wZXJ0eShiKSYmKGh8fFxuKGg9e30pLGhbYl09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWEmJlwiY2hpbGRyZW5cIiE9PWEmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmXCJhdXRvRm9jdXNcIiE9PWEmJih0YS5oYXNPd25Qcm9wZXJ0eShhKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goYSxudWxsKSk7Zm9yKGEgaW4gZCl7dmFyIGs9ZFthXTtnPW51bGwhPWM/Y1thXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShhKSYmayE9PWcmJihudWxsIT1rfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1hKWlmKGcpe2ZvcihiIGluIGcpIWcuaGFzT3duUHJvcGVydHkoYil8fGsmJmsuaGFzT3duUHJvcGVydHkoYil8fChofHwoaD17fSksaFtiXT1cIlwiKTtmb3IoYiBpbiBrKWsuaGFzT3duUHJvcGVydHkoYikmJmdbYl0hPT1rW2JdJiYoaHx8KGg9e30pLGhbYl09a1tiXSl9ZWxzZSBofHwoZnx8KGY9W10pLGYucHVzaChhLGgpKSxcbmg9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09YT8oaz1rP2suX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmchPT1rJiYoZj1mfHxbXSkucHVzaChhLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWE/Zz09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiYodGEuaGFzT3duUHJvcGVydHkoYSk/KG51bGwhPWsmJiRmKGUsYSksZnx8Zz09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goYSxrKSl9aCYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGgpO3JldHVybiBmfVxuZnVuY3Rpb24gZWcoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmWGMoYSxlKTtYZihjLGQpO2Q9WGYoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBoPWJbZl0sZz1iW2YrMV07XCJzdHlsZVwiPT09aD9VZihhLGcsWmYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/UWYoYSxnKTpcImNoaWxkcmVuXCI9PT1oP1JmKGEsZyk6VGMoYSxoLGcsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlljKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz9HZihhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/XG5HZihhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6R2YoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gZmcoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgZiBpbiBmZSlmZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGZlW2ZdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpXKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpWYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpIZihhLFxuYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmYoYSxjKSxXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpLCRmKGUsXCJvbkNoYW5nZVwiKX1XZihiLGMsWmYpO2Q9bnVsbDtmb3IodmFyIGggaW4gYyljLmhhc093blByb3BlcnR5KGgpJiYoZj1jW2hdLFwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBmP2EudGV4dENvbnRlbnQhPT1mJiYoZD1bXCJjaGlsZHJlblwiLGZdKTpcIm51bWJlclwiPT09dHlwZW9mIGYmJmEudGV4dENvbnRlbnQhPT1cIlwiK2YmJihkPVtcImNoaWxkcmVuXCIsXCJcIitmXSk6dGEuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWYmJiRmKGUsaCkpO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjprYyhhKTskYyhhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmtjKGEpO0xmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJlxuKGEub25jbGljaz1DKX1yZXR1cm4gZH1mdW5jdGlvbiBtZyhhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgbmc9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDphZyxjcmVhdGVUZXh0Tm9kZTpiZyxzZXRJbml0aWFsUHJvcGVydGllczpjZyxkaWZmUHJvcGVydGllczpkZyx1cGRhdGVQcm9wZXJ0aWVzOmVnLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6ZmcsZGlmZkh5ZHJhdGVkVGV4dDptZyx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpZYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9XG5jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lXFx4M2RcIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGVcXHgzZFwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVZhKGQpO2U/dm9pZCAwOkQoXCI5MFwiKTtsYyhkKTtZYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkdmKGEsISFjLm11bHRpcGxlLGIsITEpfX19KTtWYi5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KG5nKTt2YXIgb2c9bnVsbCxwZz1udWxsO1xuZnVuY3Rpb24gcWcoYSl7dGhpcy5fZXhwaXJhdGlvblRpbWU9WC5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1xZy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpEKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgcmc7WC51cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnFnLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnFnLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDpEKFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP0QoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7WC5mbHVzaFJvb3QoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07cWcucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIHJnKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9cmcucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnJnLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O2Z1bmN0aW9uIHNnKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9WC5jcmVhdGVDb250YWluZXIoYSxiLGMpfXNnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgcmc7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1gudXBkYXRlQ29udGFpbmVyKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5zZy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgcmc7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO1gudXBkYXRlQ29udGFpbmVyKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307c2cucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IHJnO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtYLnVwZGF0ZUNvbnRhaW5lcihiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuc2cucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHFnKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gdGcoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gdWcoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxudmFyIFg9b2Yoe2dldFJvb3RIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVUeXBlO3N3aXRjaChiKXtjYXNlIDk6Y2FzZSAxMTphPShhPWEuZG9jdW1lbnRFbGVtZW50KT9hLm5hbWVzcGFjZVVSSTpPZihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yj04PT09Yj9hLnBhcmVudE5vZGU6YSxhPWIubmFtZXNwYWNlVVJJfHxudWxsLGI9Yi50YWdOYW1lLGE9T2YoYSxiKX1yZXR1cm4gYX0sZ2V0Q2hpbGRIb3N0Q29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBPZihhLGIpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYX0scHJlcGFyZUZvckNvbW1pdDpmdW5jdGlvbigpe29nPVVkO3ZhciBhPWVhKCk7aWYobWUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBjPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbmlmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQil7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxoPS0xLGc9LTEsaz0wLHY9MCxsPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHo7Oyl7bCE9PWJ8fDAhPT1kJiYzIT09bC5ub2RlVHlwZXx8KGg9ZitkKTtsIT09ZXx8MCE9PWMmJjMhPT1sLm5vZGVUeXBlfHwoZz1mK2MpOzM9PT1sLm5vZGVUeXBlJiYoZis9bC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHo9bC5maXJzdENoaWxkKSlicmVhaztwPWw7bD16fWZvcig7Oyl7aWYobD09PWEpYnJlYWsgYjtwPT09YiYmKytrPT09ZCYmKGg9Zik7cD09PWUmJisrdj09PWMmJihnPWYpO2lmKG51bGwhPT0oej1sLm5leHRTaWJsaW5nKSlicmVhaztsPXA7cD1sLnBhcmVudE5vZGV9bD16fWI9LTE9PT1ofHwtMT09PWc/bnVsbDpcbntzdGFydDpoLGVuZDpnfX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtwZz17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifTtWZCghMSl9LHJlc2V0QWZ0ZXJDb21taXQ6ZnVuY3Rpb24oKXt2YXIgYT1wZyxiPWVhKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmaGEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihtZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe2I9d2luZG93LmdldFNlbGVjdGlvbigpO3ZhciBlPWNbbGIoKV0ubGVuZ3RoO2E9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2E6TWF0aC5taW4oZC5lbmQsZSk7IWIuZXh0ZW5kJiZhPlxuZCYmKGU9ZCxkPWEsYT1lKTtlPWxlKGMsYSk7dmFyIGY9bGUoYyxkKTtpZihlJiZmJiYoMSE9PWIucmFuZ2VDb3VudHx8Yi5hbmNob3JOb2RlIT09ZS5ub2RlfHxiLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxiLmZvY3VzTm9kZSE9PWYubm9kZXx8Yi5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSl7dmFyIGg9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtoLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCk7Yi5yZW1vdmVBbGxSYW5nZXMoKTthPmQ/KGIuYWRkUmFuZ2UoaCksYi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KGguc2V0RW5kKGYubm9kZSxmLm9mZnNldCksYi5hZGRSYW5nZShoKSl9fWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2MuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsXG5hLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfXBnPW51bGw7VmQob2cpO29nPW51bGx9LGNyZWF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1hZyhhLGIsYyxkKTthW0ZdPWU7YVtTYV09YjtyZXR1cm4gYX0sYXBwZW5kSW5pdGlhbENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sZmluYWxpemVJbml0aWFsQ2hpbGRyZW46ZnVuY3Rpb24oYSxiLGMsZCl7Y2coYSxiLGMsZCk7cmV0dXJuIHVnKGIsYyl9LHByZXBhcmVVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gZGcoYSxiLGMsZCxlKX0sc2hvdWxkU2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PVxudHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfSxzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuISFiLmhpZGRlbn0sY3JlYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQpe2E9YmcoYSxiKTthW0ZdPWQ7cmV0dXJuIGF9LG5vdzpyZixtdXRhdGlvbjp7Y29tbWl0TW91bnQ6ZnVuY3Rpb24oYSxiLGMpe3VnKGIsYykmJmEuZm9jdXMoKX0sY29tbWl0VXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YVtTYV09ZTtlZyhhLGIsYyxkLGUpfSxyZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe1JmKGEsXCJcIil9LGNvbW1pdFRleHRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMpe2Eubm9kZVZhbHVlPWN9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixhKTphLmFwcGVuZENoaWxkKGIpfSxcbmluc2VydEJlZm9yZTpmdW5jdGlvbihhLGIsYyl7YS5pbnNlcnRCZWZvcmUoYixjKX0saW5zZXJ0SW5Db250YWluZXJCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixjKTphLmluc2VydEJlZm9yZShiLGMpfSxyZW1vdmVDaGlsZDpmdW5jdGlvbihhLGIpe2EucmVtb3ZlQ2hpbGQoYil9LHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTphLnJlbW92ZUNoaWxkKGIpfX0saHlkcmF0aW9uOntjYW5IeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMSE9PWEubm9kZVR5cGV8fGIudG9Mb3dlckNhc2UoKSE9PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmF9LGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cIlwiPT09Ynx8MyE9PWEubm9kZVR5cGU/bnVsbDphfSxnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmc6ZnVuY3Rpb24oYSl7Zm9yKGE9XG5hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZDpmdW5jdGlvbihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUsZil7YVtGXT1mO2FbU2FdPWM7cmV0dXJuIGZnKGEsYixjLGUsZCl9LGh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2FbRl09YztyZXR1cm4gbWcoYSxiKX0sZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LFxuZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fX0sc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrOnNmLGNhbmNlbERlZmVycmVkQ2FsbGJhY2s6dGZ9KSxDZz1YOyRiPUNnLmJhdGNoZWRVcGRhdGVzO2FjPUNnLmludGVyYWN0aXZlVXBkYXRlcztiYz1DZy5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbmZ1bmN0aW9uIERnKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgc2coYSwhMSxiKX1cbmZ1bmN0aW9uIEVnKGEsYixjLGQsZSl7dGcoYyk/dm9pZCAwOkQoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPURnKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1YLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBGZyhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO3RnKGIpP3ZvaWQgMDpEKFwiMjAwXCIpO3JldHVybiBwZihhLGIsbnVsbCxjKX1cbnZhciBHZz17Y3JlYXRlUG9ydGFsOkZnLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKGIpcmV0dXJuIFguZmluZEhvc3RJbnN0YW5jZShiKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RChcIjE4OFwiKTpEKFwiMjEzXCIsT2JqZWN0LmtleXMoYSkpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRWcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gRWcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7dGcoYSk/dm9pZCAwOlxuRChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe0VnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEZnLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpYLmJhdGNoZWRVcGRhdGVzLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpYLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6WC5mbHVzaFN5bmMsdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOlguZmx1c2hDb250cm9sbGVkLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpRYSxFdmVudFBsdWdpblJlZ2lzdHJ5OnhhLEV2ZW50UHJvcGFnYXRvcnM6amIsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OlpiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpYYSxcblJlYWN0RE9NRXZlbnRMaXN0ZW5lcjpaZH0sdW5zdGFibGVfY3JlYXRlUm9vdDpmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgc2coYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9fTtYLmluamVjdEludG9EZXZUb29scyh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6VGEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4zLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgSGc9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpHZ30pLElnPUhnJiZHZ3x8SGc7bW9kdWxlLmV4cG9ydHM9SWdbXCJkZWZhdWx0XCJdP0lnW1wiZGVmYXVsdFwiXTpJZztcbiIsImltcG9ydCBSZWFjdCwgeyBDaGlsZHJlbiwgQ29tcG9uZW50LCBjbG9uZUVsZW1lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00sIHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuXG5mdW5jdGlvbiB3YXJuT25jZShtc2cpIHtcbiAgdmFyIGhhc1dhcm5lZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghaGFzV2FybmVkKSB7XG4gICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgfVxuICB9O1xufVxuXG5cbnZhciBzdGF0ZWxlc3NGdW5jdGlvbmFsQ29tcG9uZW50U3VwcGxpZWQgPSB3YXJuT25jZSgnXFxuPj4gRXJyb3IsIHZpYSByZWFjdC1mbGlwLW1vdmUgPDxcXG5cXG5Zb3UgcHJvdmlkZWQgYSBzdGF0ZWxlc3MgZnVuY3Rpb25hbCBjb21wb25lbnQgYXMgYSBjaGlsZCB0byA8RmxpcE1vdmU+LiBVbmZvcnR1bmF0ZWx5LCBTRkNzIGFyZW5cXCd0IHN1cHBvcnRlZCwgYmVjYXVzZSBGbGlwIE1vdmUgbmVlZHMgYWNjZXNzIHRvIHRoZSBiYWNraW5nIGluc3RhbmNlcyB2aWEgcmVmcywgYW5kIFNGQ3MgZG9uXFwndCBoYXZlIGEgcHVibGljIGluc3RhbmNlIHRoYXQgaG9sZHMgdGhhdCBpbmZvLlxcblxcblBsZWFzZSB3cmFwIHlvdXIgY29tcG9uZW50cyBpbiBhIG5hdGl2ZSBlbGVtZW50IChlZy4gPGRpdj4pLCBvciBhIG5vbi1mdW5jdGlvbmFsIGNvbXBvbmVudC5cXG4nKTtcblxudmFyIHByaW1pdGl2ZU5vZGVTdXBwbGllZCA9IHdhcm5PbmNlKCdcXG4+PiBFcnJvciwgdmlhIHJlYWN0LWZsaXAtbW92ZSA8PFxcblxcbllvdSBwcm92aWRlZCBhIHByaW1pdGl2ZSAodGV4dCBvciBudW1iZXIpIG5vZGUgYXMgYSBjaGlsZCB0byA8RmxpcE1vdmU+LiBGbGlwIE1vdmUgbmVlZHMgY29udGFpbmVycyB3aXRoIHVuaXF1ZSBrZXlzIHRvIG1vdmUgY2hpbGRyZW4gYXJvdW5kLlxcblxcblBsZWFzZSB3cmFwIHlvdXIgdmFsdWUgaW4gYSBuYXRpdmUgZWxlbWVudCAoZWcuIDxzcGFuPiksIG9yIGEgY29tcG9uZW50LlxcbicpO1xuXG52YXIgaW52YWxpZFR5cGVGb3JUaW1pbmdQcm9wID0gZnVuY3Rpb24gaW52YWxpZFR5cGVGb3JUaW1pbmdQcm9wKGFyZ3Ncbi8vIHByZXR0aWVyLWlnbm9yZVxuKSB7XG4gIHJldHVybiBjb25zb2xlLmVycm9yKCdcXG4+PiBFcnJvciwgdmlhIHJlYWN0LWZsaXAtbW92ZSA8PFxcblxcblRoZSBwcm9wIHlvdSBwcm92aWRlZCBmb3IgXFwnJyArIGFyZ3MucHJvcCArICdcXCcgaXMgaW52YWxpZC4gSXQgbmVlZHMgdG8gYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyLCBvciBhIHN0cmluZyB0aGF0IGNhbiBiZSByZXNvbHZlZCB0byBhIG51bWJlci4gVGhlIHZhbHVlIHlvdSBwcm92aWRlZCBpcyBcXCcnICsgYXJncy52YWx1ZSArICdcXCcuXFxuXFxuQXMgYSByZXN1bHQsICB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSB1c2VkLCB3aGljaCBpcyBcXCcnICsgYXJncy5kZWZhdWx0VmFsdWUgKyAnXFwnLlxcbicpO1xufTtcblxudmFyIGludmFsaWRFbnRlckxlYXZlUHJlc2V0ID0gZnVuY3Rpb24gaW52YWxpZEVudGVyTGVhdmVQcmVzZXQoYXJnc1xuLy8gcHJldHRpZXItaWdub3JlXG4pIHtcbiAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ1xcbj4+IEVycm9yLCB2aWEgcmVhY3QtZmxpcC1tb3ZlIDw8XFxuXFxuVGhlIGVudGVyL2xlYXZlIHByZXNldCB5b3UgcHJvdmlkZWQgaXMgaW52YWxpZC4gV2UgZG9uXFwndCBjdXJyZW50bHkgaGF2ZSBhIFxcJycgKyBhcmdzLnZhbHVlICsgJyBwcmVzZXQuXFwnXFxuXFxuQWNjZXB0YWJsZSB2YWx1ZXMgYXJlICcgKyBhcmdzLmFjY2VwdGFibGVWYWx1ZXMgKyAnLiBUaGUgZGVmYXVsdCB2YWx1ZSBvZiBcXCcnICsgYXJncy5kZWZhdWx0VmFsdWUgKyAnXFwnIHdpbGwgYmUgdXNlZC5cXG4nKTtcbn07XG5cbnZhciBwYXJlbnROb2RlUG9zaXRpb25TdGF0aWMgPSB3YXJuT25jZSgnXFxuPj4gV2FybmluZywgdmlhIHJlYWN0LWZsaXAtbW92ZSA8PFxcblxcbldoZW4gdXNpbmcgXCJ3cmFwcGVybGVzc1wiIG1vZGUgKGJ5IHN1cHBseWluZyBcXCd0eXBlTmFtZVxcJyBvZiBcXCdudWxsXFwnKSwgc3RyYW5nZSB0aGluZ3MgaGFwcGVuIHdoZW4gdGhlIGRpcmVjdCBwYXJlbnQgaGFzIHRoZSBkZWZhdWx0IFwic3RhdGljXCIgcG9zaXRpb24uXFxuXFxuRmxpcE1vdmUgaGFzIGFkZGVkIFxcJ3Bvc2l0aW9uOiByZWxhdGl2ZVxcJyB0byB0aGlzIG5vZGUsIHRvIGVuc3VyZSBGbGlwIE1vdmUgYW5pbWF0ZXMgY29ycmVjdGx5LlxcblxcblRvIGF2b2lkIHNlZWluZyB0aGlzIHdhcm5pbmcsIHNpbXBseSBhcHBseSBhIG5vbi1zdGF0aWMgcG9zaXRpb24gdG8gdGhhdCBwYXJlbnQgbm9kZS5cXG4nKTtcblxudmFyIGNoaWxkSXNEaXNhYmxlZCA9IHdhcm5PbmNlKCdcXG4+PiBXYXJuaW5nLCB2aWEgcmVhY3QtZmxpcC1tb3ZlIDw8XFxuXFxuT25lIG9yIG1vcmUgb2YgRmxpcCBNb3ZlXFwncyBjaGlsZCBlbGVtZW50cyBoYXZlIHRoZSBodG1sIGF0dHJpYnV0ZSBcXCdkaXNhYmxlZFxcJyBzZXQgdG8gdHJ1ZS5cXG5cXG5QbGVhc2Ugbm90ZSB0aGF0IHRoaXMgd2lsbCBjYXVzZSBhbmltYXRpb25zIHRvIGJyZWFrIGluIEludGVybmV0IEV4cGxvcmVyIDExIGFuZCBiZWxvdy4gRWl0aGVyIHJlbW92ZSB0aGUgZGlzYWJsZWQgYXR0cmlidXRlIG9yIHNldCBcXCdhbmltYXRpb25cXCcgdG8gZmFsc2UuXFxuJyk7XG5cbnZhciBlbnRlclByZXNldHMgPSB7XG4gIGVsZXZhdG9yOiB7XG4gICAgZnJvbTogeyB0cmFuc2Zvcm06ICdzY2FsZSgwKScsIG9wYWNpdHk6ICcwJyB9LFxuICAgIHRvOiB7IHRyYW5zZm9ybTogJycsIG9wYWNpdHk6ICcnIH1cbiAgfSxcbiAgZmFkZToge1xuICAgIGZyb206IHsgb3BhY2l0eTogJzAnIH0sXG4gICAgdG86IHsgb3BhY2l0eTogJycgfVxuICB9LFxuICBhY2NvcmRpb25WZXJ0aWNhbDoge1xuICAgIGZyb206IHsgdHJhbnNmb3JtOiAnc2NhbGVZKDApJywgdHJhbnNmb3JtT3JpZ2luOiAnY2VudGVyIHRvcCcgfSxcbiAgICB0bzogeyB0cmFuc2Zvcm06ICcnLCB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXIgdG9wJyB9XG4gIH0sXG4gIGFjY29yZGlvbkhvcml6b250YWw6IHtcbiAgICBmcm9tOiB7IHRyYW5zZm9ybTogJ3NjYWxlWCgwKScsIHRyYW5zZm9ybU9yaWdpbjogJ2xlZnQgY2VudGVyJyB9LFxuICAgIHRvOiB7IHRyYW5zZm9ybTogJycsIHRyYW5zZm9ybU9yaWdpbjogJ2xlZnQgY2VudGVyJyB9XG4gIH0sXG4gIG5vbmU6IG51bGxcbn07XG4vKipcbiAqIFJlYWN0IEZsaXAgTW92ZSB8IGVudGVyTGVhdmVQcmVzZXRzXG4gKiAoYykgMjAxNi1wcmVzZW50IEpvc2h1YSBDb21lYXVcbiAqXG4gKiBUaGlzIGNvbnRhaW5zIHRoZSBtYXN0ZXIgbGlzdCBvZiBwcmVzZXRzIGF2YWlsYWJsZSBmb3IgZW50ZXIvbGVhdmUgYW5pbWF0aW9ucyxcbiAqIGFsb25nIHdpdGggdGhlIG1hcHBpbmcgYmV0d2VlbiBwcmVzZXQgYW5kIHN0eWxlcy5cbiAqL1xuXG5cbnZhciBsZWF2ZVByZXNldHMgPSB7XG4gIGVsZXZhdG9yOiB7XG4gICAgZnJvbTogeyB0cmFuc2Zvcm06ICdzY2FsZSgxKScsIG9wYWNpdHk6ICcxJyB9LFxuICAgIHRvOiB7IHRyYW5zZm9ybTogJ3NjYWxlKDApJywgb3BhY2l0eTogJzAnIH1cbiAgfSxcbiAgZmFkZToge1xuICAgIGZyb206IHsgb3BhY2l0eTogJzEnIH0sXG4gICAgdG86IHsgb3BhY2l0eTogJzAnIH1cbiAgfSxcbiAgYWNjb3JkaW9uVmVydGljYWw6IHtcbiAgICBmcm9tOiB7IHRyYW5zZm9ybTogJ3NjYWxlWSgxKScsIHRyYW5zZm9ybU9yaWdpbjogJ2NlbnRlciB0b3AnIH0sXG4gICAgdG86IHsgdHJhbnNmb3JtOiAnc2NhbGVZKDApJywgdHJhbnNmb3JtT3JpZ2luOiAnY2VudGVyIHRvcCcgfVxuICB9LFxuICBhY2NvcmRpb25Ib3Jpem9udGFsOiB7XG4gICAgZnJvbTogeyB0cmFuc2Zvcm06ICdzY2FsZVgoMSknLCB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0IGNlbnRlcicgfSxcbiAgICB0bzogeyB0cmFuc2Zvcm06ICdzY2FsZVgoMCknLCB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0IGNlbnRlcicgfVxuICB9LFxuICBub25lOiBudWxsXG59O1xuXG4vLyBGb3Igbm93LCBhcHBlYXJQcmVzZXRzIHdpbGwgYmUgaWRlbnRpY2FsIHRvIGVudGVyUHJlc2V0cy5cbi8vIEFzc2lnbmluZyBhIGN1c3RvbSBleHBvcnQgaW4gY2FzZSB3ZSBldmVyIHdhbnQgdG8gYWRkIGFwcGVhci1zcGVjaWZpYyBvbmVzLlxudmFyIGFwcGVhclByZXNldHMgPSBlbnRlclByZXNldHM7XG5cbnZhciBkZWZhdWx0UHJlc2V0ID0gJ2VsZXZhdG9yJztcbnZhciBkaXNhYmxlUHJlc2V0ID0gJ25vbmUnO1xuXG52YXIgZmluZCA9IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlLCBhcnIpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycltpXSwgaSwgYXJyKSkge1xuICAgICAgcmV0dXJuIGFycltpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuXG52YXIgZXZlcnkgPSBmdW5jdGlvbiBldmVyeShwcmVkaWNhdGUsIGFycikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmICghcHJlZGljYXRlKGFycltpXSwgaSwgYXJyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tbXV0YWJsZS1leHBvcnRzXG52YXIgX2lzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KGFycikge1xuICBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcbiAgcmV0dXJuIF9pc0FycmF5KGFycik7XG59O1xuXG52YXIgaXNFbGVtZW50QW5TRkMgPSBmdW5jdGlvbiBpc0VsZW1lbnRBblNGQyhlbGVtZW50KSB7XG4gIHZhciBpc05hdGl2ZURPTUVsZW1lbnQgPSB0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJztcblxuICBpZiAoaXNOYXRpdmVET01FbGVtZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuICFlbGVtZW50LnR5cGUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ7XG59O1xuXG5mdW5jdGlvbiBvbWl0KG9iaikge1xuICB2YXIgYXR0cnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuXG4gIHZhciByZXN1bHQgPSB7fTtcbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoYXR0cnMuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBvYmpba2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBhcnJheXNFcXVhbChhLCBiKSB7XG4gIHZhciBzYW1lT2JqZWN0ID0gYSA9PT0gYjtcbiAgaWYgKHNhbWVPYmplY3QpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBub3RCb3RoQXJyYXlzID0gIV9pc0FycmF5KGEpIHx8ICFfaXNBcnJheShiKTtcbiAgdmFyIGRpZmZlcmVudExlbmd0aHMgPSBhLmxlbmd0aCAhPT0gYi5sZW5ndGg7XG5cbiAgaWYgKG5vdEJvdGhBcnJheXMgfHwgZGlmZmVyZW50TGVuZ3Rocykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBldmVyeShmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgpIHtcbiAgICByZXR1cm4gZWxlbWVudCA9PT0gYltpbmRleF07XG4gIH0sIGEpO1xufVxuXG5mdW5jdGlvbiBtZW1vaXplU3RyaW5nKGZuKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuXG4gIHJldHVybiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgaWYgKCFjYWNoZVtzdHJdKSB7XG4gICAgICBjYWNoZVtzdHJdID0gZm4oc3RyKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlW3N0cl07XG4gIH07XG59XG5cbnZhciBoeXBoZW5hdGUgPSBtZW1vaXplU3RyaW5nKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW0EtWl0pL2csICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG5cblxuXG5cblxuXG5cblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59O1xuXG4vKipcbiAqIFJlYWN0IEZsaXAgTW92ZSB8IHByb3BDb252ZXJ0ZXJcbiAqIChjKSAyMDE2LXByZXNlbnQgSm9zaHVhIENvbWVhdVxuICpcbiAqIEFic3RyYWN0ZWQgYXdheSBhIGJ1bmNoIG9mIHRoZSBtZXNzeSBidXNpbmVzcyB3aXRoIHByb3BzLlxuICogICAtIHByb3BzIGZsb3cgdHlwZXMgYW5kIGRlZmF1bHRQcm9wc1xuICogICAtIFR5cGUgY29udmVyc2lvbiAoV2UgYWNjZXB0ICdzdHJpbmcnIGFuZCAnbnVtYmVyJyB2YWx1ZXMgZm9yIGR1cmF0aW9uLFxuICogICAgIGRlbGF5LCBhbmQgb3RoZXIgZmllbGRzLCBidXQgd2UgYWN0dWFsbHkgbmVlZCB0aGVtIHRvIGJlIGludHMuKVxuICogICAtIENoaWxkcmVuIGNvbnZlcnNpb24gKHdlIG5lZWQgdGhlIGNoaWxkcmVuIHRvIGJlIGFuIGFycmF5LiBNYXkgbm90IGFsd2F5c1xuICogICAgIGJlLCBpZiBhIHNpbmdsZSBjaGlsZCBpcyBwYXNzZWQgaW4uKVxuICogICAtIFJlc29sdmluZyBhbmltYXRpb24gcHJlc2V0cyBpbnRvIHRoZWlyIGJhc2UgQ1NTIHN0eWxlc1xuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBibG9jay1zY29wZWQtdmFyICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kdXBsaWNhdGUtaW1wb3J0c1xuXG5cbmZ1bmN0aW9uIHByb3BDb252ZXJ0ZXIoQ29tcG9zZWRDb21wb25lbnQpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBpbmhlcml0cyhGbGlwTW92ZVByb3BDb252ZXJ0ZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gRmxpcE1vdmVQcm9wQ29udmVydGVyKCkge1xuICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRmxpcE1vdmVQcm9wQ29udmVydGVyKTtcbiAgICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBGbGlwTW92ZVByb3BDb252ZXJ0ZXIucHJvdG90eXBlLmNoZWNrQ2hpbGRyZW4gPSBmdW5jdGlvbiBjaGVja0NoaWxkcmVuKGNoaWxkcmVuKSB7XG4gICAgICAvLyBTa2lwIGFsbCBjb25zb2xlIHdhcm5pbmdzIGluIHByb2R1Y3Rpb24uXG4gICAgICAvLyBCYWlsIGVhcmx5LCB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3b3JrLlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBzYW1lIGFzIFJlYWN0Lk5vZGUsIGJ1dCB3aXRob3V0IGZyYWdtZW50cywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy80NzgxXG5cblxuICAgICAgLy8gRmxpcE1vdmUgZG9lcyBub3Qgc3VwcG9ydCBzdGF0ZWxlc3MgZnVuY3Rpb25hbCBjb21wb25lbnRzLlxuICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIGFueSBzdXBwbGllZCBjb21wb25lbnRzIHdvbid0IHdvcmsuXG4gICAgICAvLyBJZiB0aGUgY2hpbGQgZG9lc24ndCBoYXZlIGEga2V5LCBpdCBtZWFucyB3ZSBhcmVuJ3QgYW5pbWF0aW5nIGl0LlxuICAgICAgLy8gSXQncyBhbGxvd2VkIHRvIGJlIGFuIFNGQywgc2luY2Ugd2UgaWdub3JlIGl0LlxuICAgICAgQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIC8vIG51bGwsIHVuZGVmaW5lZCwgYW5kIGJvb2xlYW5zIHdpbGwgYmUgZmlsdGVyZWQgb3V0IGJ5IENoaWxkcmVuLnRvQXJyYXlcbiAgICAgICAgaWYgKGNoaWxkID09IG51bGwgfHwgdHlwZW9mIGNoaWxkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHR5cGVvZiBjaGlsZCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY2hpbGQpKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBwcmltaXRpdmVOb2RlU3VwcGxpZWQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNFbGVtZW50QW5TRkMoY2hpbGQpICYmIGNoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgc3RhdGVsZXNzRnVuY3Rpb25hbENvbXBvbmVudFN1cHBsaWVkKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBGbGlwTW92ZVByb3BDb252ZXJ0ZXIucHJvdG90eXBlLmNvbnZlcnRQcm9wcyA9IGZ1bmN0aW9uIGNvbnZlcnRQcm9wcyhwcm9wcykge1xuICAgICAgdmFyIHdvcmtpbmdQcm9wcyA9IHtcbiAgICAgICAgLy8gZXhwbGljaXRseSBieXBhc3MgdGhlIHByb3BzIHRoYXQgZG9uJ3QgbmVlZCBjb252ZXJzaW9uXG4gICAgICAgIGNoaWxkcmVuOiBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgZWFzaW5nOiBwcm9wcy5lYXNpbmcsXG4gICAgICAgIG9uU3RhcnQ6IHByb3BzLm9uU3RhcnQsXG4gICAgICAgIG9uRmluaXNoOiBwcm9wcy5vbkZpbmlzaCxcbiAgICAgICAgb25TdGFydEFsbDogcHJvcHMub25TdGFydEFsbCxcbiAgICAgICAgb25GaW5pc2hBbGw6IHByb3BzLm9uRmluaXNoQWxsLFxuICAgICAgICB0eXBlTmFtZTogcHJvcHMudHlwZU5hbWUsXG4gICAgICAgIGRpc2FibGVBbGxBbmltYXRpb25zOiBwcm9wcy5kaXNhYmxlQWxsQW5pbWF0aW9ucyxcbiAgICAgICAgZ2V0UG9zaXRpb246IHByb3BzLmdldFBvc2l0aW9uLFxuICAgICAgICBtYWludGFpbkNvbnRhaW5lckhlaWdodDogcHJvcHMubWFpbnRhaW5Db250YWluZXJIZWlnaHQsXG4gICAgICAgIHZlcnRpY2FsQWxpZ25tZW50OiBwcm9wcy52ZXJ0aWNhbEFsaWdubWVudCxcblxuICAgICAgICAvLyBEbyBzdHJpbmctdG8taW50IGNvbnZlcnNpb24gZm9yIGFsbCB0aW1pbmctcmVsYXRlZCBwcm9wc1xuICAgICAgICBkdXJhdGlvbjogdGhpcy5jb252ZXJ0VGltaW5nUHJvcCgnZHVyYXRpb24nKSxcbiAgICAgICAgZGVsYXk6IHRoaXMuY29udmVydFRpbWluZ1Byb3AoJ2RlbGF5JyksXG4gICAgICAgIHN0YWdnZXJEdXJhdGlvbkJ5OiB0aGlzLmNvbnZlcnRUaW1pbmdQcm9wKCdzdGFnZ2VyRHVyYXRpb25CeScpLFxuICAgICAgICBzdGFnZ2VyRGVsYXlCeTogdGhpcy5jb252ZXJ0VGltaW5nUHJvcCgnc3RhZ2dlckRlbGF5QnknKSxcblxuICAgICAgICAvLyBPdXIgZW50ZXIvbGVhdmUgYW5pbWF0aW9ucyBjYW4gYmUgc3BlY2lmaWVkIGFzIGJvb2xlYW4gKGRlZmF1bHQgb3JcbiAgICAgICAgLy8gZGlzYWJsZWQpLCBzdHJpbmcgKHByZXNldCBuYW1lKSwgb3Igb2JqZWN0IChhY3R1YWwgYW5pbWF0aW9uIHZhbHVlcykuXG4gICAgICAgIC8vIExldCdzIHN0YW5kYXJkaXplIHRoaXMgc28gdGhhdCB0aGV5J3JlIGFsd2F5cyBvYmplY3RzXG4gICAgICAgIGFwcGVhckFuaW1hdGlvbjogdGhpcy5jb252ZXJ0QW5pbWF0aW9uUHJvcChwcm9wcy5hcHBlYXJBbmltYXRpb24sIGFwcGVhclByZXNldHMpLFxuICAgICAgICBlbnRlckFuaW1hdGlvbjogdGhpcy5jb252ZXJ0QW5pbWF0aW9uUHJvcChwcm9wcy5lbnRlckFuaW1hdGlvbiwgZW50ZXJQcmVzZXRzKSxcbiAgICAgICAgbGVhdmVBbmltYXRpb246IHRoaXMuY29udmVydEFuaW1hdGlvblByb3AocHJvcHMubGVhdmVBbmltYXRpb24sIGxlYXZlUHJlc2V0cyksXG5cbiAgICAgICAgZGVsZWdhdGVkOiB7fVxuICAgICAgfTtcblxuICAgICAgdGhpcy5jaGVja0NoaWxkcmVuKHdvcmtpbmdQcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIC8vIEdhdGhlciBhbnkgYWRkaXRpb25hbCBwcm9wcztcbiAgICAgIC8vIHRoZXkgd2lsbCBiZSBkZWxlZ2F0ZWQgdG8gdGhlIFJlYWN0RWxlbWVudCBjcmVhdGVkLlxuICAgICAgdmFyIHByaW1hcnlQcm9wS2V5cyA9IE9iamVjdC5rZXlzKHdvcmtpbmdQcm9wcyk7XG4gICAgICB2YXIgZGVsZWdhdGVkUHJvcHMgPSBvbWl0KHRoaXMucHJvcHMsIHByaW1hcnlQcm9wS2V5cyk7XG5cbiAgICAgIC8vIFRoZSBGbGlwTW92ZSBjb250YWluZXIgZWxlbWVudCBuZWVkcyB0byBoYXZlIGEgbm9uLXN0YXRpYyBwb3NpdGlvbi5cbiAgICAgIC8vIFdlIHVzZSBgcmVsYXRpdmVgIGJ5IGRlZmF1bHQsIGJ1dCBpdCBjYW4gYmUgb3ZlcnJpZGRlbiBieSB0aGUgdXNlci5cbiAgICAgIC8vIE5vdyB0aGF0IHdlJ3JlIGRlbGVnYXRpbmcgcHJvcHMsIHdlIG5lZWQgdG8gbWVyZ2UgdGhpcyBpbi5cbiAgICAgIGRlbGVnYXRlZFByb3BzLnN0eWxlID0gX2V4dGVuZHMoe1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSwgZGVsZWdhdGVkUHJvcHMuc3R5bGUpO1xuXG4gICAgICB3b3JraW5nUHJvcHMuZGVsZWdhdGVkID0gZGVsZWdhdGVkUHJvcHM7XG5cbiAgICAgIHJldHVybiB3b3JraW5nUHJvcHM7XG4gICAgfTtcblxuICAgIEZsaXBNb3ZlUHJvcENvbnZlcnRlci5wcm90b3R5cGUuY29udmVydFRpbWluZ1Byb3AgPSBmdW5jdGlvbiBjb252ZXJ0VGltaW5nUHJvcChwcm9wKSB7XG4gICAgICB2YXIgcmF3VmFsdWUgPSB0aGlzLnByb3BzW3Byb3BdO1xuXG4gICAgICB2YXIgdmFsdWUgPSB0eXBlb2YgcmF3VmFsdWUgPT09ICdudW1iZXInID8gcmF3VmFsdWUgOiBwYXJzZUludChyYXdWYWx1ZSwgMTApO1xuXG4gICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBGbGlwTW92ZVByb3BDb252ZXJ0ZXIuZGVmYXVsdFByb3BzW3Byb3BdO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaW52YWxpZFR5cGVGb3JUaW1pbmdQcm9wKHtcbiAgICAgICAgICAgIHByb3A6IHByb3AsXG4gICAgICAgICAgICB2YWx1ZTogcmF3VmFsdWUsXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuXG5cbiAgICBGbGlwTW92ZVByb3BDb252ZXJ0ZXIucHJvdG90eXBlLmNvbnZlcnRBbmltYXRpb25Qcm9wID0gZnVuY3Rpb24gY29udmVydEFuaW1hdGlvblByb3AoYW5pbWF0aW9uLCBwcmVzZXRzKSB7XG4gICAgICBzd2l0Y2ggKHR5cGVvZiBhbmltYXRpb24gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFuaW1hdGlvbikpIHtcbiAgICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8gSWYgaXQncyB0cnVlLCB3ZSB3YW50IHRvIHVzZSB0aGUgZGVmYXVsdCBwcmVzZXQuXG4gICAgICAgICAgICAvLyBJZiBpdCdzIGZhbHNlLCB3ZSB3YW50IHRvIHVzZSB0aGUgJ25vbmUnIHByZXNldC5cbiAgICAgICAgICAgIHJldHVybiBwcmVzZXRzW2FuaW1hdGlvbiA/IGRlZmF1bHRQcmVzZXQgOiBkaXNhYmxlUHJlc2V0XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgcHJlc2V0S2V5cyA9IE9iamVjdC5rZXlzKHByZXNldHMpO1xuXG4gICAgICAgICAgICBpZiAocHJlc2V0S2V5cy5pbmRleE9mKGFuaW1hdGlvbikgPT09IC0xKSB7XG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgaW52YWxpZEVudGVyTGVhdmVQcmVzZXQoe1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IGFuaW1hdGlvbixcbiAgICAgICAgICAgICAgICAgIGFjY2VwdGFibGVWYWx1ZXM6IHByZXNldEtleXMuam9pbignLCAnKSxcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFByZXNldFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHByZXNldHNbZGVmYXVsdFByZXNldF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwcmVzZXRzW2FuaW1hdGlvbl07XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGlvbjtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIEZsaXBNb3ZlUHJvcENvbnZlcnRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9zZWRDb21wb25lbnQsIHRoaXMuY29udmVydFByb3BzKHRoaXMucHJvcHMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEZsaXBNb3ZlUHJvcENvbnZlcnRlcjtcbiAgfShDb21wb25lbnQpLCBfY2xhc3MuZGVmYXVsdFByb3BzID0ge1xuICAgIGVhc2luZzogJ2Vhc2UtaW4tb3V0JyxcbiAgICBkdXJhdGlvbjogMzUwLFxuICAgIGRlbGF5OiAwLFxuICAgIHN0YWdnZXJEdXJhdGlvbkJ5OiAwLFxuICAgIHN0YWdnZXJEZWxheUJ5OiAwLFxuICAgIHR5cGVOYW1lOiAnZGl2JyxcbiAgICBlbnRlckFuaW1hdGlvbjogZGVmYXVsdFByZXNldCxcbiAgICBsZWF2ZUFuaW1hdGlvbjogZGVmYXVsdFByZXNldCxcbiAgICBkaXNhYmxlQWxsQW5pbWF0aW9uczogZmFsc2UsXG4gICAgZ2V0UG9zaXRpb246IGZ1bmN0aW9uIGdldFBvc2l0aW9uKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH0sXG4gICAgbWFpbnRhaW5Db250YWluZXJIZWlnaHQ6IGZhbHNlLFxuICAgIHZlcnRpY2FsQWxpZ25tZW50OiAndG9wJ1xuICB9LCBfdGVtcDtcbn1cblxuLyoqXG4gKiBSZWFjdCBGbGlwIE1vdmVcbiAqIChjKSAyMDE2LXByZXNlbnQgSm9zaHVhIENvbWVhdVxuICpcbiAqIFRoZXNlIG1ldGhvZHMgcmVhZCBmcm9tIGFuZCB3cml0ZSB0byB0aGUgRE9NLlxuICogVGhleSBhbG1vc3QgYWx3YXlzIGhhdmUgc2lkZSBlZmZlY3RzLCBhbmQgd2lsbCBob3BlZnVsbHkgYmVjb21lIHRoZVxuICogb25seSBzcG90IGluIHRoZSBjb2RlYmFzZSB3aXRoIGltcHVyZSBmdW5jdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGVzVG9ET01Ob2RlKF9yZWYpIHtcbiAgdmFyIGRvbU5vZGUgPSBfcmVmLmRvbU5vZGUsXG4gICAgICBzdHlsZXMgPSBfcmVmLnN0eWxlcztcblxuICAvLyBDYW4ndCBqdXN0IGRvIGFuIG9iamVjdCBtZXJnZSBiZWNhdXNlIGRvbU5vZGUuc3R5bGVzIGlzIG5vIHJlZ3VsYXIgb2JqZWN0LlxuICAvLyBOZWVkIHRvIGRvIGl0IHRoaXMgd2F5IGZvciB0aGUgZW5naW5lIHRvIGZpcmUgaXRzIGBzZXRgIGxpc3RlbmVycy5cbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBkb21Ob2RlLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShrZXkpLCBzdHlsZXNba2V5XSk7XG4gIH0pO1xufVxuXG4vLyBNb2RpZmllZCBmcm9tIE1vZGVybml6clxuZnVuY3Rpb24gd2hpY2hUcmFuc2l0aW9uRXZlbnQoKSB7XG4gIHZhciB0cmFuc2l0aW9ucyA9IHtcbiAgICB0cmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgJy1vLXRyYW5zaXRpb24nOiAnb1RyYW5zaXRpb25FbmQnLFxuICAgICctbW96LXRyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgJy13ZWJraXQtdHJhbnNpdGlvbic6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJ1xuICB9O1xuXG4gIC8vIElmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBicm93c2VybGVzcyBlbnZpcm9ubWVudCAoZWcuIFNTUiksIGl0IGRvZXNuJ3QgYXBwbHkuXG4gIC8vIFJldHVybiBhIHBsYWNlaG9sZGVyIHN0cmluZywgZm9yIGNvbnNpc3RlbnQgdHlwZSByZXR1cm4uXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gJyc7XG5cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZmFrZWVsZW1lbnQnKTtcblxuICB2YXIgbWF0Y2ggPSBmaW5kKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIGVsLnN0eWxlLmdldFByb3BlcnR5VmFsdWUodCkgIT09IHVuZGVmaW5lZDtcbiAgfSwgT2JqZWN0LmtleXModHJhbnNpdGlvbnMpKTtcblxuICAvLyBJZiBubyBgdHJhbnNpdGlvbmAgaXMgZm91bmQsIHdlIG11c3QgYmUgcnVubmluZyBpbiBhIGJyb3dzZXIgc28gYW5jaWVudCxcbiAgLy8gUmVhY3QgaXRzZWxmIHdvbid0IHJ1bi4gUmV0dXJuIGFuIGVtcHR5IHN0cmluZywgZm9yIGNvbnNpc3RlbnQgdHlwZSByZXR1cm5cbiAgcmV0dXJuIG1hdGNoID8gdHJhbnNpdGlvbnNbbWF0Y2hdIDogJyc7XG59XG5cbnZhciBnZXRSZWxhdGl2ZUJvdW5kaW5nQm94ID0gZnVuY3Rpb24gZ2V0UmVsYXRpdmVCb3VuZGluZ0JveChfcmVmMikge1xuICB2YXIgY2hpbGREb21Ob2RlID0gX3JlZjIuY2hpbGREb21Ob2RlLFxuICAgICAgcGFyZW50RG9tTm9kZSA9IF9yZWYyLnBhcmVudERvbU5vZGUsXG4gICAgICBnZXRQb3NpdGlvbiA9IF9yZWYyLmdldFBvc2l0aW9uO1xuXG4gIHZhciBwYXJlbnRCb3ggPSBnZXRQb3NpdGlvbihwYXJlbnREb21Ob2RlKTtcblxuICB2YXIgX2dldFBvc2l0aW9uID0gZ2V0UG9zaXRpb24oY2hpbGREb21Ob2RlKSxcbiAgICAgIHRvcCA9IF9nZXRQb3NpdGlvbi50b3AsXG4gICAgICBsZWZ0ID0gX2dldFBvc2l0aW9uLmxlZnQsXG4gICAgICByaWdodCA9IF9nZXRQb3NpdGlvbi5yaWdodCxcbiAgICAgIGJvdHRvbSA9IF9nZXRQb3NpdGlvbi5ib3R0b20sXG4gICAgICB3aWR0aCA9IF9nZXRQb3NpdGlvbi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9nZXRQb3NpdGlvbi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IHRvcCAtIHBhcmVudEJveC50b3AsXG4gICAgbGVmdDogbGVmdCAtIHBhcmVudEJveC5sZWZ0LFxuICAgIHJpZ2h0OiBwYXJlbnRCb3gucmlnaHQgLSByaWdodCxcbiAgICBib3R0b206IHBhcmVudEJveC5ib3R0b20gLSBib3R0b20sXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59O1xuXG4vKiogZ2V0UG9zaXRpb25EZWx0YVxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZGVsdGEgYmV0d2VlbiB0d28gYm91bmRpbmcgYm94ZXMsIHRvIGZpZ3VyZSBvdXRcbiAqIGhvdyBtYW55IHBpeGVscyBvbiBlYWNoIGF4aXMgdGhlIGVsZW1lbnQgaGFzIG1vdmVkLlxuICpcbiAqL1xudmFyIGdldFBvc2l0aW9uRGVsdGEgPSBmdW5jdGlvbiBnZXRQb3NpdGlvbkRlbHRhKF9yZWYzKSB7XG4gIHZhciBjaGlsZERvbU5vZGUgPSBfcmVmMy5jaGlsZERvbU5vZGUsXG4gICAgICBjaGlsZEJvdW5kaW5nQm94ID0gX3JlZjMuY2hpbGRCb3VuZGluZ0JveCxcbiAgICAgIHBhcmVudEJvdW5kaW5nQm94ID0gX3JlZjMucGFyZW50Qm91bmRpbmdCb3gsXG4gICAgICBnZXRQb3NpdGlvbiA9IF9yZWYzLmdldFBvc2l0aW9uO1xuXG4gIC8vIFRFTVA6IEEgbXlzdGVyeSBidWcgaXMgc29tZXRpbWVzIGNhdXNpbmcgdW5uZWNlc3NhcnkgYm91bmRpbmdCb3hlcyB0b1xuICB2YXIgZGVmYXVsdEJveCA9IHtcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHdpZHRoOiAwXG4gIH07XG5cbiAgLy8gT3VyIG9sZCBib3ggaXMgaXRzIGxhc3QgY2FsY3VsYXRlZCBwb3NpdGlvbiwgZGVyaXZlZCBvbiBtb3VudCBvciBhdCB0aGVcbiAgLy8gc3RhcnQgb2YgdGhlIHByZXZpb3VzIGFuaW1hdGlvbi5cbiAgdmFyIG9sZFJlbGF0aXZlQm94ID0gY2hpbGRCb3VuZGluZ0JveCB8fCBkZWZhdWx0Qm94O1xuICB2YXIgcGFyZW50Qm94ID0gcGFyZW50Qm91bmRpbmdCb3ggfHwgZGVmYXVsdEJveDtcblxuICAvLyBPdXIgbmV3IGJveCBpcyB0aGUgbmV3IGZpbmFsIHJlc3RpbmcgcGxhY2U6IFdoZXJlIHdlIGV4cGVjdCBpdCB0byB3aW5kIHVwXG4gIC8vIGFmdGVyIHRoZSBhbmltYXRpb24uIEZpcnN0IHdlIGdldCB0aGUgYm94IGluIGFic29sdXRlIHRlcm1zIChBS0EgcmVsYXRpdmVcbiAgLy8gdG8gdGhlIHZpZXdwb3J0KSwgYW5kIHRoZW4gd2UgY2FsY3VsYXRlIGl0cyByZWxhdGl2ZSBib3ggKHJlbGF0aXZlIHRvIHRoZVxuICAvLyBwYXJlbnQgY29udGFpbmVyKVxuICB2YXIgbmV3QWJzb2x1dGVCb3ggPSBnZXRQb3NpdGlvbihjaGlsZERvbU5vZGUpO1xuICB2YXIgbmV3UmVsYXRpdmVCb3ggPSB7XG4gICAgdG9wOiBuZXdBYnNvbHV0ZUJveC50b3AgLSBwYXJlbnRCb3gudG9wLFxuICAgIGxlZnQ6IG5ld0Fic29sdXRlQm94LmxlZnQgLSBwYXJlbnRCb3gubGVmdFxuICB9O1xuXG4gIHJldHVybiBbb2xkUmVsYXRpdmVCb3gubGVmdCAtIG5ld1JlbGF0aXZlQm94LmxlZnQsIG9sZFJlbGF0aXZlQm94LnRvcCAtIG5ld1JlbGF0aXZlQm94LnRvcF07XG59O1xuXG4vKiogcmVtb3ZlTm9kZUZyb21ET01GbG93XG4gKiBUaGlzIG1ldGhvZCBkb2VzIHNvbWV0aGluZyB2ZXJ5IHNuZWFreTogaXQgcmVtb3ZlcyBhIERPTSBub2RlIGZyb20gdGhlXG4gKiBkb2N1bWVudCBmbG93LCBidXQgd2l0aG91dCBhY3R1YWxseSBjaGFuZ2luZyBpdHMgb24tc2NyZWVuIHBvc2l0aW9uLlxuICpcbiAqIEl0IHdvcmtzIGJ5IGNhbGN1bGF0aW5nIHdoZXJlIHRoZSBub2RlIGlzLCBhbmQgdGhlbiBhcHBseWluZyBzdHlsZXNcbiAqIHNvIHRoYXQgaXQgd2luZHMgdXAgYmVpbmcgcG9zaXRpb25lZCBhYnNvbHV0ZWx5LCBidXQgaW4gZXhhY3RseSB0aGVcbiAqIHNhbWUgcGxhY2UuXG4gKlxuICogVGhpcyBpcyBhIHZpdGFsIHBhcnQgb2YgdGhlIEZMSVAgdGVjaG5pcXVlLlxuICovXG52YXIgcmVtb3ZlTm9kZUZyb21ET01GbG93ID0gZnVuY3Rpb24gcmVtb3ZlTm9kZUZyb21ET01GbG93KGNoaWxkRGF0YSwgdmVydGljYWxBbGlnbm1lbnQpIHtcbiAgdmFyIGRvbU5vZGUgPSBjaGlsZERhdGEuZG9tTm9kZSxcbiAgICAgIGJvdW5kaW5nQm94ID0gY2hpbGREYXRhLmJvdW5kaW5nQm94O1xuXG5cbiAgaWYgKCFkb21Ob2RlIHx8ICFib3VuZGluZ0JveCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvciB0aGlzIHRvIHdvcmssIHdlIGhhdmUgdG8gb2Zmc2V0IGFueSBnaXZlbiBgbWFyZ2luYC5cbiAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9tTm9kZSk7XG5cbiAgLy8gV2UgbmVlZCB0byBjbGVhbiB1cCBtYXJnaW5zLCBieSBjb252ZXJ0aW5nIGFuZCByZW1vdmluZyBzdWZmaXg6XG4gIC8vIGVnLiAnMjFweCcgLT4gMjFcbiAgdmFyIG1hcmdpbkF0dHJzID0gWydtYXJnaW4tdG9wJywgJ21hcmdpbi1sZWZ0JywgJ21hcmdpbi1yaWdodCddO1xuICB2YXIgbWFyZ2lucyA9IG1hcmdpbkF0dHJzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBtYXJnaW4pIHtcbiAgICB2YXIgX2JhYmVsSGVscGVycyRleHRlbmRzO1xuXG4gICAgdmFyIHByb3BlcnR5VmFsID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZShtYXJnaW4pO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBhY2MsIChfYmFiZWxIZWxwZXJzJGV4dGVuZHMgPSB7fSwgX2JhYmVsSGVscGVycyRleHRlbmRzW21hcmdpbl0gPSBOdW1iZXIocHJvcGVydHlWYWwucmVwbGFjZSgncHgnLCAnJykpLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHMpKTtcbiAgfSwge30pO1xuXG4gIC8vIElmIHdlJ3JlIGJvdHRvbS1hbGlnbmVkLCB3ZSBuZWVkIHRvIGFkZCB0aGUgaGVpZ2h0IG9mIHRoZSBjaGlsZCB0byBpdHNcbiAgLy8gdG9wIG9mZnNldC4gVGhpcyBpcyBiZWNhdXNlLCB3aGVuIHRoZSBjb250YWluZXIgaXMgYm90dG9tLWFsaWduZWQsIGl0c1xuICAvLyBoZWlnaHQgc2hyaW5rcyBmcm9tIHRoZSB0b3AsIG5vdCB0aGUgYm90dG9tLiBXZSdyZSByZW1vdmluZyB0aGlzIG5vZGVcbiAgLy8gZnJvbSB0aGUgZmxvdywgc28gdGhlIHRvcCBpcyBnb2luZyB0byBkcm9wIGJ5IGl0cyBoZWlnaHQuXG4gIHZhciB0b3BPZmZzZXQgPSB2ZXJ0aWNhbEFsaWdubWVudCA9PT0gJ2JvdHRvbScgPyBib3VuZGluZ0JveC50b3AgLSBib3VuZGluZ0JveC5oZWlnaHQgOiBib3VuZGluZ0JveC50b3A7XG5cbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IHRvcE9mZnNldCAtIG1hcmdpbnNbJ21hcmdpbi10b3AnXSArICdweCcsXG4gICAgbGVmdDogYm91bmRpbmdCb3gubGVmdCAtIG1hcmdpbnNbJ21hcmdpbi1sZWZ0J10gKyAncHgnLFxuICAgIHJpZ2h0OiBib3VuZGluZ0JveC5yaWdodCAtIG1hcmdpbnNbJ21hcmdpbi1yaWdodCddICsgJ3B4J1xuICB9O1xuXG4gIGFwcGx5U3R5bGVzVG9ET01Ob2RlKHsgZG9tTm9kZTogZG9tTm9kZSwgc3R5bGVzOiBzdHlsZXMgfSk7XG59O1xuXG4vKiogdXBkYXRlSGVpZ2h0UGxhY2Vob2xkZXJcbiAqIEFuIG9wdGlvbmFsIHByb3BlcnR5IHRvIEZsaXBNb3ZlIGlzIGEgYG1haW50YWluQ29udGFpbmVySGVpZ2h0YCBib29sZWFuLlxuICogVGhpcyBwcm9wZXJ0eSBjcmVhdGVzIGEgbm9kZSB0aGF0IGZpbGxzIHNwYWNlLCBzbyB0aGF0IHRoZSBwYXJlbnRcbiAqIGNvbnRhaW5lciBkb2Vzbid0IGNvbGxhcHNlIHdoZW4gaXRzIGNoaWxkcmVuIGFyZSByZW1vdmVkIGZyb20gdGhlXG4gKiBkb2N1bWVudCBmbG93LlxuICovXG52YXIgdXBkYXRlSGVpZ2h0UGxhY2Vob2xkZXIgPSBmdW5jdGlvbiB1cGRhdGVIZWlnaHRQbGFjZWhvbGRlcihfcmVmNCkge1xuICB2YXIgZG9tTm9kZSA9IF9yZWY0LmRvbU5vZGUsXG4gICAgICBwYXJlbnREYXRhID0gX3JlZjQucGFyZW50RGF0YSxcbiAgICAgIGdldFBvc2l0aW9uID0gX3JlZjQuZ2V0UG9zaXRpb247XG5cbiAgdmFyIHBhcmVudERvbU5vZGUgPSBwYXJlbnREYXRhLmRvbU5vZGU7XG4gIHZhciBwYXJlbnRCb3VuZGluZ0JveCA9IHBhcmVudERhdGEuYm91bmRpbmdCb3g7XG5cbiAgaWYgKCFwYXJlbnREb21Ob2RlIHx8ICFwYXJlbnRCb3VuZGluZ0JveCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFdlIG5lZWQgdG8gZmluZCB0aGUgaGVpZ2h0IG9mIHRoZSBjb250YWluZXIgKndpdGhvdXQqIHRoZSBwbGFjZWhvbGRlci5cbiAgLy8gU2luY2UgaXQncyBwb3NzaWJsZSB0aGF0IHRoZSBwbGFjZWhvbGRlciBtaWdodCBhbHJlYWR5IGJlIHByZXNlbnQsXG4gIC8vIHdlIGZpcnN0IHNldCBpdHMgaGVpZ2h0IHRvIDAuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSBjb250YWluZXIgdG8gY29sbGFwc2UgZG93biB0byB0aGUgc2l6ZSBvZiBqdXN0IGl0c1xuICAvLyBjb250ZW50IChwbHVzIGNvbnRhaW5lciBwYWRkaW5nIG9yIGJvcmRlcnMgaWYgYW55KS5cbiAgYXBwbHlTdHlsZXNUb0RPTU5vZGUoeyBkb21Ob2RlOiBkb21Ob2RlLCBzdHlsZXM6IHsgaGVpZ2h0OiAnMCcgfSB9KTtcblxuICAvLyBGaW5kIHRoZSBkaXN0YW5jZSBieSB3aGljaCB0aGUgY29udGFpbmVyIHdvdWxkIGJlIGNvbGxhcHNlZCBieSBlbGVtZW50c1xuICAvLyBsZWF2aW5nLiBXZSBjb21wYXJlIHRoZSBmcmVzaGx5LWF2YWlsYWJsZSBwYXJlbnQgaGVpZ2h0IHdpdGggdGhlIG9yaWdpbmFsLFxuICAvLyBjYWNoZWQgY29udGFpbmVyIGhlaWdodC5cbiAgdmFyIG9yaWdpbmFsUGFyZW50SGVpZ2h0ID0gcGFyZW50Qm91bmRpbmdCb3guaGVpZ2h0O1xuICB2YXIgY29sbGFwc2VkUGFyZW50SGVpZ2h0ID0gZ2V0UG9zaXRpb24ocGFyZW50RG9tTm9kZSkuaGVpZ2h0O1xuICB2YXIgcmVkdWN0aW9uSW5IZWlnaHQgPSBvcmlnaW5hbFBhcmVudEhlaWdodCAtIGNvbGxhcHNlZFBhcmVudEhlaWdodDtcblxuICAvLyBJZiB0aGUgY29udGFpbmVyIGhhcyBiZWNvbWUgc2hvcnRlciwgdXBkYXRlIHRoZSBwYWRkaW5nIGVsZW1lbnQnc1xuICAvLyBoZWlnaHQgdG8gdGFrZSB1cCB0aGUgZGlmZmVyZW5jZS4gT3RoZXJ3aXNlIHNldCBpdHMgaGVpZ2h0IHRvIHplcm8sXG4gIC8vIHNvIHRoYXQgaXQgaGFzIG5vIGVmZmVjdC5cbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBoZWlnaHQ6IHJlZHVjdGlvbkluSGVpZ2h0ID4gMCA/IHJlZHVjdGlvbkluSGVpZ2h0ICsgJ3B4JyA6ICcwJ1xuICB9O1xuXG4gIGFwcGx5U3R5bGVzVG9ET01Ob2RlKHsgZG9tTm9kZTogZG9tTm9kZSwgc3R5bGVzOiBzdHlsZXMgfSk7XG59O1xuXG52YXIgZ2V0TmF0aXZlTm9kZSA9IGZ1bmN0aW9uIGdldE5hdGl2ZU5vZGUoZWxlbWVudCkge1xuICAvLyBXaGVuIHJ1bm5pbmcgaW4gYSB3aW5kb3dsZXNzIGVudmlyb25tZW50LCBhYm9ydCFcbiAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIGBlbGVtZW50YCBtYXkgYWxyZWFkeSBiZSBhIG5hdGl2ZSBub2RlLlxuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICAvLyBXaGlsZSBSZWFjdERPTSdzIGBmaW5kRE9NTm9kZWAgaXMgZGlzY291cmFnZWQsIGl0J3MgdGhlIG9ubHlcbiAgLy8gcHVibGljbHktZXhwb3NlZCB3YXkgdG8gZmluZCB0aGUgdW5kZXJseWluZyBET00gbm9kZSBmb3JcbiAgLy8gY29tcG9zaXRlIGNvbXBvbmVudHMuXG4gIHZhciBmb3VuZE5vZGUgPSBmaW5kRE9NTm9kZShlbGVtZW50KTtcblxuICBpZiAoZm91bmROb2RlICYmIGZvdW5kTm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAvLyBUZXh0IG5vZGVzIGFyZSBub3Qgc3VwcG9ydGVkXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZsb3d0eXBlL25vLXdlYWstdHlwZXNcbiAgcmV0dXJuIGZvdW5kTm9kZTtcbn07XG5cbnZhciBjcmVhdGVUcmFuc2l0aW9uU3RyaW5nID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvblN0cmluZyhpbmRleCwgcHJvcHMpIHtcbiAgdmFyIGRlbGF5ID0gcHJvcHMuZGVsYXksXG4gICAgICBkdXJhdGlvbiA9IHByb3BzLmR1cmF0aW9uO1xuICB2YXIgc3RhZ2dlckR1cmF0aW9uQnkgPSBwcm9wcy5zdGFnZ2VyRHVyYXRpb25CeSxcbiAgICAgIHN0YWdnZXJEZWxheUJ5ID0gcHJvcHMuc3RhZ2dlckRlbGF5QnksXG4gICAgICBlYXNpbmcgPSBwcm9wcy5lYXNpbmc7XG5cblxuICBkZWxheSArPSBpbmRleCAqIHN0YWdnZXJEZWxheUJ5O1xuICBkdXJhdGlvbiArPSBpbmRleCAqIHN0YWdnZXJEdXJhdGlvbkJ5O1xuXG4gIHZhciBjc3NQcm9wZXJ0aWVzID0gWyd0cmFuc2Zvcm0nLCAnb3BhY2l0eSddO1xuXG4gIHJldHVybiBjc3NQcm9wZXJ0aWVzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgIHJldHVybiBwcm9wICsgJyAnICsgZHVyYXRpb24gKyAnbXMgJyArIGVhc2luZyArICcgJyArIGRlbGF5ICsgJ21zJztcbiAgfSkuam9pbignLCAnKTtcbn07XG5cbi8qKlxuICogUmVhY3QgRmxpcCBNb3ZlXG4gKiAoYykgMjAxNi1wcmVzZW50IEpvc2h1YSBDb21lYXVcbiAqXG4gKiBGb3IgaW5mb3JtYXRpb24gb24gaG93IHRoaXMgY29kZSBpcyBsYWlkIG91dCwgY2hlY2sgb3V0IENPREVfVE9VUi5tZFxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMgKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWR1cGxpY2F0ZS1pbXBvcnRzXG5cblxudmFyIHRyYW5zaXRpb25FbmQgPSB3aGljaFRyYW5zaXRpb25FdmVudCgpO1xudmFyIG5vQnJvd3NlclN1cHBvcnQgPSAhdHJhbnNpdGlvbkVuZDtcblxuZnVuY3Rpb24gZ2V0S2V5KGNoaWxkRGF0YSkge1xuICByZXR1cm4gY2hpbGREYXRhLmtleSB8fCAnJztcbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudENoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIC8vIEZpeCBpbmNvbXBsZXRlIHR5cGluZyBvZiBDaGlsZHJlbi50b0FycmF5XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmbG93dHlwZS9uby13ZWFrLXR5cGVzXG4gIHJldHVybiBDaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKTtcbn1cblxudmFyIEZsaXBNb3ZlJDEgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBpbmhlcml0cyhGbGlwTW92ZSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmxpcE1vdmUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEZsaXBNb3ZlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgY2hpbGRyZW46IGdldEVsZW1lbnRDaGlsZHJlbihcbiAgICAgIC8vIGB0aGlzLnByb3BzYCBvdWdodCB0byBhbHdheXMgYmUgZGVmaW5lZCBhdCB0aGlzIHBvaW50LCBidXQgYSByZXBvcnRcbiAgICAgIC8vIHdhcyBtYWRlIGFib3V0IGl0IG5vdCBiZWluZyBkZWZpbmVkIGluIElFMTAuXG4gICAgICAvLyBUT0RPOiBUZXN0IGluIElFMTAsIHRvIHNlZSBpZiB0aGVyZSdzIGFuIHVuZGVybHlpbmcgY2F1c2UgdGhhdCBjYW5cbiAgICAgIC8vIGJlIGFkZHJlc3NlZC5cbiAgICAgIF90aGlzLnByb3BzID8gX3RoaXMucHJvcHMuY2hpbGRyZW4gOiBbXSkubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZWxlbWVudCwge1xuICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgICAgYXBwZWFyaW5nOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICB9LCBfdGhpcy5jaGlsZHJlbkRhdGEgPSB7fSwgX3RoaXMucGFyZW50RGF0YSA9IHtcbiAgICAgIGRvbU5vZGU6IG51bGwsXG4gICAgICBib3VuZGluZ0JveDogbnVsbFxuICAgIH0sIF90aGlzLmhlaWdodFBsYWNlaG9sZGVyRGF0YSA9IHtcbiAgICAgIGRvbU5vZGU6IG51bGxcbiAgICB9LCBfdGhpcy5yZW1haW5pbmdBbmltYXRpb25zID0gMCwgX3RoaXMuY2hpbGRyZW5Ub0FuaW1hdGUgPSBbXSwgX3RoaXMuZmluZERPTUNvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1maW5kLWRvbS1ub2RlXG4gICAgICB2YXIgZG9tTm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKF90aGlzKTtcbiAgICAgIHZhciBwYXJlbnROb2RlID0gZG9tTm9kZSAmJiBkb21Ob2RlLnBhcmVudE5vZGU7XG5cbiAgICAgIC8vIFRoaXMgb3VnaHQgdG8gYmUgaW1wb3NzaWJsZSwgYnV0IGhhbmRsaW5nIGl0IGZvciBGbG93J3Mgc2FrZS5cbiAgICAgIGlmICghcGFyZW50Tm9kZSB8fCAhKHBhcmVudE5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgcGFyZW50IG5vZGUgaGFzIHN0YXRpYyBwb3NpdGlvbmluZywgbGVhdmUgYW5pbWF0aW9ucyBtaWdodCBsb29rXG4gICAgICAvLyByZWFsbHkgZnVua3kuIExldCdzIGF1dG9tYXRpY2FsbHkgYXBwbHkgYHBvc2l0aW9uOiByZWxhdGl2ZWAgaW4gdGhpc1xuICAgICAgLy8gY2FzZSwgdG8gcHJldmVudCBhbnkgcXVpcmtpbmVzcy5cbiAgICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnROb2RlKS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgcGFyZW50Tm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICAgIHBhcmVudE5vZGVQb3NpdGlvblN0YXRpYygpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5wYXJlbnREYXRhLmRvbU5vZGUgPSBwYXJlbnROb2RlO1xuICAgIH0sIF90aGlzLnJ1bkFuaW1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkeW5hbWljQ2hpbGRyZW4gPSBfdGhpcy5zdGF0ZS5jaGlsZHJlbi5maWx0ZXIoX3RoaXMuZG9lc0NoaWxkTmVlZFRvQmVBbmltYXRlZCk7XG5cbiAgICAgIC8vIFNwbGl0dGluZyBET00gcmVhZHMgYW5kIHdyaXRlcyB0byBiZSBwZWZvcm1lZCBpbiBiYXRjaGVzXG4gICAgICB2YXIgY2hpbGRyZW5Jbml0aWFsU3R5bGVzID0gZHluYW1pY0NoaWxkcmVuLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmNvbXB1dGVJbml0aWFsU3R5bGVzKGNoaWxkKTtcbiAgICAgIH0pO1xuICAgICAgZHluYW1pY0NoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgICBfdGhpcy5yZW1haW5pbmdBbmltYXRpb25zICs9IDE7XG4gICAgICAgIF90aGlzLmNoaWxkcmVuVG9BbmltYXRlLnB1c2goZ2V0S2V5KGNoaWxkKSk7XG4gICAgICAgIF90aGlzLmFuaW1hdGVDaGlsZChjaGlsZCwgaW5kZXgsIGNoaWxkcmVuSW5pdGlhbFN0eWxlc1tpbmRleF0pO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgX3RoaXMucHJvcHMub25TdGFydEFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBfdGhpcy5jYWxsQ2hpbGRyZW5Ib29rKF90aGlzLnByb3BzLm9uU3RhcnRBbGwpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmRvZXNDaGlsZE5lZWRUb0JlQW5pbWF0ZWQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIC8vIElmIHRoZSBjaGlsZCBkb2Vzbid0IGhhdmUgYSBrZXksIGl0J3MgYW4gaW1tb3ZhYmxlIGNoaWxkIChvbmUgdGhhdCB3ZVxuICAgICAgLy8gZG8gbm90IHdhbnQgdG8gZG8gRkxJUCBzdHVmZiB0by4pXG4gICAgICBpZiAoIWdldEtleShjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGREYXRhID0gX3RoaXMuZ2V0Q2hpbGREYXRhKGdldEtleShjaGlsZCkpO1xuICAgICAgdmFyIGNoaWxkRG9tTm9kZSA9IGNoaWxkRGF0YS5kb21Ob2RlO1xuICAgICAgdmFyIGNoaWxkQm91bmRpbmdCb3ggPSBjaGlsZERhdGEuYm91bmRpbmdCb3g7XG4gICAgICB2YXIgcGFyZW50Qm91bmRpbmdCb3ggPSBfdGhpcy5wYXJlbnREYXRhLmJvdW5kaW5nQm94O1xuXG4gICAgICBpZiAoIWNoaWxkRG9tTm9kZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGFwcGVhckFuaW1hdGlvbiA9IF90aGlzJHByb3BzLmFwcGVhckFuaW1hdGlvbixcbiAgICAgICAgICBlbnRlckFuaW1hdGlvbiA9IF90aGlzJHByb3BzLmVudGVyQW5pbWF0aW9uLFxuICAgICAgICAgIGxlYXZlQW5pbWF0aW9uID0gX3RoaXMkcHJvcHMubGVhdmVBbmltYXRpb24sXG4gICAgICAgICAgZ2V0UG9zaXRpb24gPSBfdGhpcyRwcm9wcy5nZXRQb3NpdGlvbjtcblxuXG4gICAgICB2YXIgaXNBcHBlYXJpbmdXaXRoQW5pbWF0aW9uID0gY2hpbGQuYXBwZWFyaW5nICYmIGFwcGVhckFuaW1hdGlvbjtcbiAgICAgIHZhciBpc0VudGVyaW5nV2l0aEFuaW1hdGlvbiA9IGNoaWxkLmVudGVyaW5nICYmIGVudGVyQW5pbWF0aW9uO1xuICAgICAgdmFyIGlzTGVhdmluZ1dpdGhBbmltYXRpb24gPSBjaGlsZC5sZWF2aW5nICYmIGxlYXZlQW5pbWF0aW9uO1xuXG4gICAgICBpZiAoaXNBcHBlYXJpbmdXaXRoQW5pbWF0aW9uIHx8IGlzRW50ZXJpbmdXaXRoQW5pbWF0aW9uIHx8IGlzTGVhdmluZ1dpdGhBbmltYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGl0IGlzbid0IGVudGVyaW5nL2xlYXZpbmcsIHdlIHdhbnQgdG8gYW5pbWF0ZSBpdCBpZiBpdCdzXG4gICAgICAvLyBvbi1zY3JlZW4gcG9zaXRpb24gaGFzIGNoYW5nZWQuXG5cbiAgICAgIHZhciBfZ2V0UG9zaXRpb25EZWx0YSA9IGdldFBvc2l0aW9uRGVsdGEoe1xuICAgICAgICBjaGlsZERvbU5vZGU6IGNoaWxkRG9tTm9kZSxcbiAgICAgICAgY2hpbGRCb3VuZGluZ0JveDogY2hpbGRCb3VuZGluZ0JveCxcbiAgICAgICAgcGFyZW50Qm91bmRpbmdCb3g6IHBhcmVudEJvdW5kaW5nQm94LFxuICAgICAgICBnZXRQb3NpdGlvbjogZ2V0UG9zaXRpb25cbiAgICAgIH0pLFxuICAgICAgICAgIGRYID0gX2dldFBvc2l0aW9uRGVsdGFbMF0sXG4gICAgICAgICAgZFkgPSBfZ2V0UG9zaXRpb25EZWx0YVsxXTtcblxuICAgICAgcmV0dXJuIGRYICE9PSAwIHx8IGRZICE9PSAwO1xuICAgIH0sIF90ZW1wKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cbiAgLy8gQ29weSBwcm9wcy5jaGlsZHJlbiBpbnRvIHN0YXRlLlxuICAvLyBUbyB1bmRlcnN0YW5kIHdoeSB0aGlzIGlzIGltcG9ydGFudCAoYW5kIG5vdCBhbiBhbnRpLXBhdHRlcm4pLCBjb25zaWRlclxuICAvLyBob3cgXCJsZWF2ZVwiIGFuaW1hdGlvbnMgd29yay4gQW4gaXRlbSBoYXMgXCJsZWZ0XCIgd2hlbiB0aGUgY29tcG9uZW50XG4gIC8vIHJlY2VpdmVzIGEgbmV3IHNldCBvZiBwcm9wcyB0aGF0IGRvIE5PVCBjb250YWluIHRoZSBpdGVtLlxuICAvLyBJZiB3ZSBqdXN0IHJlbmRlciB0aGUgcHJvcHMgYXMtaXMsIHRoZSBpdGVtIHdvdWxkIGluc3RhbnRseSBkaXNhcHBlYXIuXG4gIC8vIFdlIHdhbnQgdG8ga2VlcCB0aGUgaXRlbSByZW5kZXJlZCBmb3IgYSBsaXR0bGUgd2hpbGUsIHVudGlsIGl0cyBhbmltYXRpb25cbiAgLy8gY2FuIGNvbXBsZXRlLiBCZWNhdXNlIHdlIGNhbm5vdCBtdXRhdGUgcHJvcHMsIHdlIG1ha2UgYHN0YXRlYCB0aGUgc291cmNlXG4gIC8vIG9mIHRydXRoLlxuXG5cbiAgLy8gRmxpcE1vdmUgbmVlZHMgdG8ga25vdyBxdWl0ZSBhIGJpdCBhYm91dCBpdHMgY2hpbGRyZW4gaW4gb3JkZXIgdG8gZG9cbiAgLy8gaXRzIGpvYi4gV2Ugc3RvcmUgdGhlc2UgYXMgYSBwcm9wZXJ0eSBvbiB0aGUgaW5zdGFuY2UuIFdlJ3JlIG5vdCB1c2luZ1xuICAvLyBzdGF0ZSwgYmVjYXVzZSB3ZSBkb24ndCB3YW50IGNoYW5nZXMgdG8gdHJpZ2dlciByZS1yZW5kZXJzLCB3ZSBqdXN0XG4gIC8vIG5lZWQgYSBwbGFjZSB0byBrZWVwIHRoZSBkYXRhIGZvciByZWZlcmVuY2UsIHdoZW4gY2hhbmdlcyBoYXBwZW4uXG4gIC8vIFRoaXMgZmllbGQgc2hvdWxkIG5vdCBiZSBhY2Nlc3NlZCBkaXJlY3RseS4gSW5zdGVhZCwgdXNlIGdldENoaWxkRGF0YSxcbiAgLy8gcHV0Q2hpbGREYXRhLCBldGMuLi5cblxuXG4gIC8vIFNpbWlsYXJseSwgdHJhY2sgdGhlIGRvbSBub2RlIGFuZCBib3ggb2Ygb3VyIHBhcmVudCBlbGVtZW50LlxuXG5cbiAgLy8gSWYgYG1haW50YWluQ29udGFpbmVySGVpZ2h0YCBwcm9wIGlzIHNldCB0byB0cnVlLCB3ZSdsbCBjcmVhdGUgYVxuICAvLyBwbGFjZWhvbGRlciBlbGVtZW50IHdoaWNoIG9jY3VwaWVzIHNwYWNlIHNvIHRoYXQgdGhlIHBhcmVudCBoZWlnaHRcbiAgLy8gZG9lc24ndCBjaGFuZ2Ugd2hlbiBpdGVtcyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBkb2N1bWVudCBmbG93ICh3aGljaFxuICAvLyBoYXBwZW5zIGR1cmluZyBsZWF2ZSBhbmltYXRpb25zKVxuXG5cbiAgLy8gS2VlcCB0cmFjayBvZiByZW1haW5pbmcgYW5pbWF0aW9ucyBzbyB3ZSBrbm93IHdoZW4gdG8gZmlyZSB0aGVcbiAgLy8gYWxsLWZpbmlzaGVkIGNhbGxiYWNrLCBhbmQgY2xlYW4gdXAgYWZ0ZXIgb3Vyc2VsdmVzLlxuICAvLyBOT1RFOiB3ZSBjYW4ndCBzaW1wbHkgdXNlIGNoaWxkcmVuVG9BbmltYXRlLmxlbmd0aCB0byB0cmFjayByZW1haW5pbmdcbiAgLy8gYW5pbWF0aW9ucywgYmVjYXVzZSB3ZSBuZWVkIHRvIG1haW50YWluIHRoZSBsaXN0IG9mIGFuaW1hdGluZyBjaGlsZHJlbixcbiAgLy8gdG8gcGFzcyB0byB0aGUgYG9uRmluaXNoQWxsYCBoYW5kbGVyLlxuXG5cbiAgRmxpcE1vdmUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gQmVjYXVzZSBSZWFjdCAxNiBubyBsb25nZXIgcmVxdWlyZXMgd3JhcHBpbmcgZWxlbWVudHMsIEZsaXAgTW92ZSBjYW4gb3B0XG4gICAgLy8gdG8gbm90IHdyYXAgdGhlIGNoaWxkcmVuIGluIGFuIGVsZW1lbnQuIEluIHRoYXQgY2FzZSwgZmluZCB0aGUgcGFyZW50XG4gICAgLy8gZWxlbWVudCB1c2luZyBgZmluZERPTU5vZGVgLlxuICAgIGlmICh0aGlzLnByb3BzLnR5cGVOYW1lID09PSBudWxsKSB7XG4gICAgICB0aGlzLmZpbmRET01Db250YWluZXIoKTtcbiAgICB9XG5cbiAgICAvLyBSdW4gb3VyIGBhcHBlYXJBbmltYXRpb25gIGlmIGl0IHdhcyByZXF1ZXN0ZWQsIHJpZ2h0IGFmdGVyIHRoZVxuICAgIC8vIGNvbXBvbmVudCBtb3VudHMuXG4gICAgdmFyIHNob3VsZFRyaWdnZXJGTElQID0gdGhpcy5wcm9wcy5hcHBlYXJBbmltYXRpb24gJiYgIXRoaXMuaXNBbmltYXRpb25EaXNhYmxlZCh0aGlzLnByb3BzKTtcblxuICAgIGlmIChzaG91bGRUcmlnZ2VyRkxJUCkge1xuICAgICAgdGhpcy5wcmVwRm9yQW5pbWF0aW9uKCk7XG4gICAgICB0aGlzLnJ1bkFuaW1hdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBGbGlwTW92ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgLy8gV2hlbiB0aGUgY29tcG9uZW50IGlzIGhhbmRlZCBuZXcgcHJvcHMsIHdlIG5lZWQgdG8gZmlndXJlIG91dCB0aGVcbiAgICAvLyBcInJlc3RpbmdcIiBwb3NpdGlvbiBvZiBhbGwgY3VycmVudGx5LXJlbmRlcmVkIERPTSBub2Rlcy5cbiAgICAvLyBXZSBzdG9yZSB0aGF0IGRhdGEgaW4gdGhpcy5wYXJlbnQgYW5kIHRoaXMuY2hpbGRyZW4sXG4gICAgLy8gc28gaXQgY2FuIGJlIHVzZWQgbGF0ZXIgdG8gd29yayBvdXQgdGhlIGFuaW1hdGlvbi5cbiAgICB0aGlzLnVwZGF0ZUJvdW5kaW5nQm94Q2FjaGVzKCk7XG5cbiAgICAvLyBDb252ZXJ0IG9wYXF1ZSBjaGlsZHJlbiBvYmplY3QgdG8gYXJyYXkuXG4gICAgdmFyIG5leHRDaGlsZHJlbiA9IGdldEVsZW1lbnRDaGlsZHJlbihuZXh0UHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgLy8gTmV4dCwgd2UgbmVlZCB0byB1cGRhdGUgb3VyIHN0YXRlLCBzbyB0aGF0IGl0IGNvbnRhaW5zIG91ciBuZXcgc2V0IG9mXG4gICAgLy8gY2hpbGRyZW4uIElmIGFuaW1hdGlvbiBpcyBkaXNhYmxlZCBvciB1bnN1cHBvcnRlZCwgdGhpcyBpcyBlYXN5O1xuICAgIC8vIHdlIGp1c3QgY29weSBvdXIgcHJvcHMgaW50byBzdGF0ZS5cbiAgICAvLyBBc3N1bWluZyB0aGF0IHdlIGNhbiBhbmltYXRlLCB0aG91Z2gsIHdlIGhhdmUgdG8gZG8gc29tZSB3b3JrLlxuICAgIC8vIEVzc2VudGlhbGx5LCB3ZSB3YW50IHRvIGtlZXAganVzdC1kZWxldGVkIG5vZGVzIGluIHRoZSBET00gZm9yIGEgYml0XG4gICAgLy8gbG9uZ2VyLCBzbyB0aGF0IHdlIGNhbiBhbmltYXRlIHRoZW0gYXdheS5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLmlzQW5pbWF0aW9uRGlzYWJsZWQobmV4dFByb3BzKSA/IG5leHRDaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBlbGVtZW50LCB7IGVsZW1lbnQ6IGVsZW1lbnQgfSk7XG4gICAgICB9KSA6IHRoaXMuY2FsY3VsYXRlTmV4dFNldE9mQ2hpbGRyZW4obmV4dENoaWxkcmVuKVxuICAgIH0pO1xuICB9O1xuXG4gIEZsaXBNb3ZlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldmlvdXNQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLnR5cGVOYW1lID09PSBudWxsKSB7XG4gICAgICB0aGlzLmZpbmRET01Db250YWluZXIoKTtcbiAgICB9XG4gICAgLy8gSWYgdGhlIGNoaWxkcmVuIGhhdmUgYmVlbiByZS1hcnJhbmdlZCwgbW92ZWQsIG9yIGFkZGVkL3JlbW92ZWQsXG4gICAgLy8gdHJpZ2dlciB0aGUgbWFpbiBGTElQIGFuaW1hdGlvbi5cbiAgICAvL1xuICAgIC8vIElNUE9SVEFOVDogV2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCB0aGUgY2hpbGRyZW4gaGF2ZSBhY3R1YWxseSBjaGFuZ2VkLlxuICAgIC8vIEF0IHRoZSBlbmQgb2YgdGhlIHRyYW5zaXRpb24sIHdlIGNsZWFuIHVwIG5vZGVzIHRoYXQgbmVlZCB0byBiZSByZW1vdmVkLlxuICAgIC8vIFdlIERPTidUIHdhbnQgdGhpcyBjbGVhbnVwIHRvIHRyaWdnZXIgYW5vdGhlciB1cGRhdGUuXG5cbiAgICB2YXIgb2xkQ2hpbGRyZW5LZXlzID0gZ2V0RWxlbWVudENoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pLm1hcChmdW5jdGlvbiAoZCkge1xuICAgICAgcmV0dXJuIGQua2V5O1xuICAgIH0pO1xuICAgIHZhciBuZXh0Q2hpbGRyZW5LZXlzID0gZ2V0RWxlbWVudENoaWxkcmVuKHByZXZpb3VzUHJvcHMuY2hpbGRyZW4pLm1hcChmdW5jdGlvbiAoZCkge1xuICAgICAgcmV0dXJuIGQua2V5O1xuICAgIH0pO1xuXG4gICAgdmFyIHNob3VsZFRyaWdnZXJGTElQID0gIWFycmF5c0VxdWFsKG9sZENoaWxkcmVuS2V5cywgbmV4dENoaWxkcmVuS2V5cykgJiYgIXRoaXMuaXNBbmltYXRpb25EaXNhYmxlZCh0aGlzLnByb3BzKTtcblxuICAgIGlmIChzaG91bGRUcmlnZ2VyRkxJUCkge1xuICAgICAgdGhpcy5wcmVwRm9yQW5pbWF0aW9uKCk7XG4gICAgICB0aGlzLnJ1bkFuaW1hdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBGbGlwTW92ZS5wcm90b3R5cGUuY2FsY3VsYXRlTmV4dFNldE9mQ2hpbGRyZW4gPSBmdW5jdGlvbiBjYWxjdWxhdGVOZXh0U2V0T2ZDaGlsZHJlbihuZXh0Q2hpbGRyZW4pIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIC8vIFdlIHdhbnQgdG86XG4gICAgLy8gICAtIE1hcmsgYWxsIG5ldyBjaGlsZHJlbiBhcyBgZW50ZXJpbmdgXG4gICAgLy8gICAtIFB1bGwgaW4gcHJldmlvdXMgY2hpbGRyZW4gdGhhdCBhcmVuJ3QgaW4gbmV4dENoaWxkcmVuLCBhbmQgbWFyayB0aGVtXG4gICAgLy8gICAgIGFzIGBsZWF2aW5nYFxuICAgIC8vICAgLSBQcmVzZXJ2ZSB0aGUgbmV4dENoaWxkcmVuIGxpc3Qgb3JkZXIsIHdpdGggbGVhdmluZyBjaGlsZHJlbiBpbiB0aGVpclxuICAgIC8vICAgICBhcHByb3ByaWF0ZSBwbGFjZXMuXG4gICAgLy9cblxuICAgIHZhciB1cGRhdGVkQ2hpbGRyZW4gPSBuZXh0Q2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChuZXh0Q2hpbGQpIHtcbiAgICAgIHZhciBjaGlsZCA9IF90aGlzMi5maW5kQ2hpbGRCeUtleShuZXh0Q2hpbGQua2V5KTtcblxuICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgY2hpbGQgZGlkIGV4aXN0LCBidXQgaXQgd2FzIGluIHRoZSBtaWRzdCBvZiBsZWF2aW5nLFxuICAgICAgLy8gd2Ugd2FudCB0byB0cmVhdCBpdCBhcyB0aG91Z2ggaXQncyBlbnRlcmluZ1xuICAgICAgdmFyIGlzRW50ZXJpbmcgPSAhY2hpbGQgfHwgY2hpbGQubGVhdmluZztcblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBuZXh0Q2hpbGQsIHsgZWxlbWVudDogbmV4dENoaWxkLCBlbnRlcmluZzogaXNFbnRlcmluZyB9KTtcbiAgICB9KTtcblxuICAgIC8vIFRoaXMgaXMgdHJpY2t5LiBXZSB3YW50IHRvIGtlZXAgdGhlIG5leHRDaGlsZHJlbidzIG9yZGVyaW5nLCBidXQgd2l0aFxuICAgIC8vIGFueSBqdXN0LXJlbW92ZWQgaXRlbXMgbWFpbnRhaW5pbmcgdGhlaXIgb3JpZ2luYWwgcG9zaXRpb24uXG4gICAgLy8gZWcuXG4gICAgLy8gICB0aGlzLnN0YXRlLmNoaWxkcmVuICA9IFsgMSwgMiwgMywgNCBdXG4gICAgLy8gICBuZXh0Q2hpbGRyZW4gICAgICAgICA9IFsgMywgMSBdXG4gICAgLy9cbiAgICAvLyBJbiB0aGlzIGV4YW1wbGUsIHdlJ3ZlIHJlbW92ZWQgdGhlICcyJyAmICc0J1xuICAgIC8vIFdlIHdhbnQgdG8gZW5kIHVwIHdpdGg6ICBbIDIsIDMsIDEsIDQgXVxuICAgIC8vXG4gICAgLy8gVG8gYWNjb21wbGlzaCB0aGF0LCB3ZSdsbCBpdGVyYXRlIHRocm91Z2ggdGhpcy5zdGF0ZS5jaGlsZHJlbi4gd2hlbmV2ZXJcbiAgICAvLyB3ZSBmaW5kIGEgbWF0Y2gsIHdlJ2xsIGFwcGVuZCBvdXIgYGxlYXZpbmdgIGZsYWcgdG8gaXQsIGFuZCBpbnNlcnQgaXRcbiAgICAvLyBpbnRvIHRoZSBuZXh0Q2hpbGRyZW4gaW4gaXRzIE9SSUdJTkFMIHBvc2l0aW9uLiBOb3RlIHRoYXQsIGFzIHdlIGtlZXBcbiAgICAvLyBpbnNlcnRpbmcgb2xkIGl0ZW1zIGludG8gdGhlIG5ldyBsaXN0LCB0aGUgXCJvcmlnaW5hbFwiIHBvc2l0aW9uIHdpbGxcbiAgICAvLyBrZWVwIGluY3JlbWVudGluZy5cbiAgICB2YXIgbnVtT2ZDaGlsZHJlbkxlYXZpbmcgPSAwO1xuICAgIHRoaXMuc3RhdGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICB2YXIgaXNMZWF2aW5nID0gIWZpbmQoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIGtleSA9IF9yZWYua2V5O1xuICAgICAgICByZXR1cm4ga2V5ID09PSBnZXRLZXkoY2hpbGQpO1xuICAgICAgfSwgbmV4dENoaWxkcmVuKTtcblxuICAgICAgLy8gSWYgdGhlIGNoaWxkIGlzbid0IGxlYXZpbmcgKG9yLCBpZiB0aGVyZSBpcyBubyBsZWF2ZSBhbmltYXRpb24pLFxuICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBhZGQgaXQgaW50byB0aGUgc3RhdGUgY2hpbGRyZW4uXG4gICAgICBpZiAoIWlzTGVhdmluZyB8fCAhX3RoaXMyLnByb3BzLmxlYXZlQW5pbWF0aW9uKSByZXR1cm47XG5cbiAgICAgIHZhciBuZXh0Q2hpbGQgPSBfZXh0ZW5kcyh7fSwgY2hpbGQsIHsgbGVhdmluZzogdHJ1ZSB9KTtcbiAgICAgIHZhciBuZXh0Q2hpbGRJbmRleCA9IGluZGV4ICsgbnVtT2ZDaGlsZHJlbkxlYXZpbmc7XG5cbiAgICAgIHVwZGF0ZWRDaGlsZHJlbi5zcGxpY2UobmV4dENoaWxkSW5kZXgsIDAsIG5leHRDaGlsZCk7XG4gICAgICBudW1PZkNoaWxkcmVuTGVhdmluZyArPSAxO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVwZGF0ZWRDaGlsZHJlbjtcbiAgfTtcblxuICBGbGlwTW92ZS5wcm90b3R5cGUucHJlcEZvckFuaW1hdGlvbiA9IGZ1bmN0aW9uIHByZXBGb3JBbmltYXRpb24oKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAvLyBPdXIgYW5pbWF0aW9uIHByZXAgY29uc2lzdHMgb2Y6XG4gICAgLy8gLSByZW1vdmUgY2hpbGRyZW4gdGhhdCBhcmUgbGVhdmluZyBmcm9tIHRoZSBET00gZmxvdywgc28gdGhhdCB0aGUgbmV3XG4gICAgLy8gICBsYXlvdXQgY2FuIGJlIGFjY3VyYXRlbHkgY2FsY3VsYXRlZCxcbiAgICAvLyAtIHVwZGF0ZSB0aGUgcGxhY2Vob2xkZXIgY29udGFpbmVyIGhlaWdodCwgaWYgbmVlZGVkLCB0byBlbnN1cmUgdGhhdFxuICAgIC8vICAgdGhlIHBhcmVudCdzIGhlaWdodCBkb2Vzbid0IGNvbGxhcHNlLlxuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGxlYXZlQW5pbWF0aW9uID0gX3Byb3BzLmxlYXZlQW5pbWF0aW9uLFxuICAgICAgICBtYWludGFpbkNvbnRhaW5lckhlaWdodCA9IF9wcm9wcy5tYWludGFpbkNvbnRhaW5lckhlaWdodCxcbiAgICAgICAgZ2V0UG9zaXRpb24gPSBfcHJvcHMuZ2V0UG9zaXRpb247XG5cbiAgICAvLyB3ZSBuZWVkIHRvIG1ha2UgYWxsIGxlYXZpbmcgbm9kZXMgXCJpbnZpc2libGVcIiB0byB0aGUgbGF5b3V0IGNhbGN1bGF0aW9uc1xuICAgIC8vIHRoYXQgd2lsbCB0YWtlIHBsYWNlIGluIHRoZSBuZXh0IHN0ZXAgKHRoaXMucnVuQW5pbWF0aW9uKS5cblxuICAgIGlmIChsZWF2ZUFuaW1hdGlvbikge1xuICAgICAgdmFyIGxlYXZpbmdDaGlsZHJlbiA9IHRoaXMuc3RhdGUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gY2hpbGQubGVhdmluZztcbiAgICAgIH0pO1xuXG4gICAgICBsZWF2aW5nQ2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAobGVhdmluZ0NoaWxkKSB7XG4gICAgICAgIHZhciBjaGlsZERhdGEgPSBfdGhpczMuZ2V0Q2hpbGREYXRhKGdldEtleShsZWF2aW5nQ2hpbGQpKTtcblxuICAgICAgICAvLyBXYXJuIGlmIGNoaWxkIGlzIGRpc2FibGVkXG4gICAgICAgIGlmICghX3RoaXMzLmlzQW5pbWF0aW9uRGlzYWJsZWQoX3RoaXMzLnByb3BzKSAmJiBjaGlsZERhdGEuZG9tTm9kZSAmJiBjaGlsZERhdGEuZG9tTm9kZS5kaXNhYmxlZCkge1xuICAgICAgICAgIGNoaWxkSXNEaXNhYmxlZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2UgbmVlZCB0byB0YWtlIHRoZSBpdGVtcyBvdXQgb2YgdGhlIFwiZmxvd1wiIG9mIHRoZSBkb2N1bWVudCwgc28gdGhhdFxuICAgICAgICAvLyBpdHMgc2libGluZ3MgY2FuIG1vdmUgdG8gdGFrZSBpdHMgcGxhY2UuXG4gICAgICAgIGlmIChjaGlsZERhdGEuYm91bmRpbmdCb3gpIHtcbiAgICAgICAgICByZW1vdmVOb2RlRnJvbURPTUZsb3coY2hpbGREYXRhLCBfdGhpczMucHJvcHMudmVydGljYWxBbGlnbm1lbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKG1haW50YWluQ29udGFpbmVySGVpZ2h0ICYmIHRoaXMuaGVpZ2h0UGxhY2Vob2xkZXJEYXRhLmRvbU5vZGUpIHtcbiAgICAgICAgdXBkYXRlSGVpZ2h0UGxhY2Vob2xkZXIoe1xuICAgICAgICAgIGRvbU5vZGU6IHRoaXMuaGVpZ2h0UGxhY2Vob2xkZXJEYXRhLmRvbU5vZGUsXG4gICAgICAgICAgcGFyZW50RGF0YTogdGhpcy5wYXJlbnREYXRhLFxuICAgICAgICAgIGdldFBvc2l0aW9uOiBnZXRQb3NpdGlvblxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGb3IgYWxsIGNoaWxkcmVuIG5vdCBpbiB0aGUgbWlkZGxlIG9mIGVudGVyaW5nIG9yIGxlYXZpbmcsXG4gICAgLy8gd2UgbmVlZCB0byByZXNldCB0aGUgdHJhbnNpdGlvbiwgc28gdGhhdCB0aGUgTkVXIHNodWZmbGUgc3RhcnRzIGZyb21cbiAgICAvLyB0aGUgcmlnaHQgcGxhY2UuXG4gICAgdGhpcy5zdGF0ZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgdmFyIF9nZXRDaGlsZERhdGEgPSBfdGhpczMuZ2V0Q2hpbGREYXRhKGdldEtleShjaGlsZCkpLFxuICAgICAgICAgIGRvbU5vZGUgPSBfZ2V0Q2hpbGREYXRhLmRvbU5vZGU7XG5cbiAgICAgIC8vIElnbm9yZSBjaGlsZHJlbiB0aGF0IGRvbid0IHJlbmRlciBET00gbm9kZXMgKGVnLiBieSByZXR1cm5pbmcgbnVsbClcblxuXG4gICAgICBpZiAoIWRvbU5vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNoaWxkLmVudGVyaW5nICYmICFjaGlsZC5sZWF2aW5nKSB7XG4gICAgICAgIGFwcGx5U3R5bGVzVG9ET01Ob2RlKHtcbiAgICAgICAgICBkb21Ob2RlOiBkb21Ob2RlLFxuICAgICAgICAgIHN0eWxlczoge1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogJydcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIEZsaXBNb3ZlLnByb3RvdHlwZS5hbmltYXRlQ2hpbGQgPSBmdW5jdGlvbiBhbmltYXRlQ2hpbGQoY2hpbGQsIGluZGV4LCBjaGlsZEluaXRpYWxTdHlsZXMpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBfZ2V0Q2hpbGREYXRhMiA9IHRoaXMuZ2V0Q2hpbGREYXRhKGdldEtleShjaGlsZCkpLFxuICAgICAgICBkb21Ob2RlID0gX2dldENoaWxkRGF0YTIuZG9tTm9kZTtcblxuICAgIGlmICghZG9tTm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEFwcGx5IHRoZSByZWxldmFudCBzdHlsZSBmb3IgdGhpcyBET00gbm9kZVxuICAgIC8vIFRoaXMgaXMgdGhlIG9mZnNldCBmcm9tIGl0cyBhY3R1YWwgRE9NIHBvc2l0aW9uLlxuICAgIC8vIGVnLiBpZiBhbiBpdGVtIGhhcyBiZWVuIHJlLXJlbmRlcmVkIDIwcHggbG93ZXIsIHdlIHdhbnQgdG8gYXBwbHkgYVxuICAgIC8vIHN0eWxlIG9mICd0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMjBweCknLCBzbyB0aGF0IGl0IGFwcGVhcnMgdG8gYmUgd2hlcmVcbiAgICAvLyBpdCBzdGFydGVkLlxuICAgIC8vIEluIEZMSVAgdGVybWlub2xvZ3ksIHRoaXMgaXMgdGhlICdJbnZlcnQnIHN0YWdlLlxuICAgIGFwcGx5U3R5bGVzVG9ET01Ob2RlKHtcbiAgICAgIGRvbU5vZGU6IGRvbU5vZGUsXG4gICAgICBzdHlsZXM6IGNoaWxkSW5pdGlhbFN0eWxlc1xuICAgIH0pO1xuXG4gICAgLy8gU3RhcnQgYnkgaW52b2tpbmcgdGhlIG9uU3RhcnQgY2FsbGJhY2sgZm9yIHRoaXMgY2hpbGQuXG4gICAgaWYgKHRoaXMucHJvcHMub25TdGFydCkgdGhpcy5wcm9wcy5vblN0YXJ0KGNoaWxkLCBkb21Ob2RlKTtcblxuICAgIC8vIE5leHQsIGFuaW1hdGUgdGhlIGl0ZW0gZnJvbSBpdCdzIGFydGlmaWNpYWxseS1vZmZzZXQgcG9zaXRpb24gdG8gaXRzXG4gICAgLy8gbmV3LCBuYXR1cmFsIHBvc2l0aW9uLlxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBOT1RFLCBSRTogdGhlIGRvdWJsZS1yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6XG4gICAgICAgIC8vIFNhZGx5LCB0aGlzIGlzIHRoZSBtb3N0IGJyb3dzZXItY29tcGF0aWJsZSB3YXkgdG8gZG8gdGhpcyBJJ3ZlIGZvdW5kLlxuICAgICAgICAvLyBFc3NlbnRpYWxseSB3ZSBuZWVkIHRvIHNldCB0aGUgaW5pdGlhbCBzdHlsZXMgb3V0c2lkZSBvZiBhbnkgcmVxdWVzdFxuICAgICAgICAvLyBjYWxsYmFja3MgdG8gYXZvaWQgYmF0Y2hpbmcgdGhlbS4gVGhlbiwgYSBmcmFtZSBuZWVkcyB0byBwYXNzIHdpdGhcbiAgICAgICAgLy8gdGhlIHN0eWxlcyBhYm92ZSByZW5kZXJlZC4gVGhlbiwgb24gdGhlIHNlY29uZCBmcmFtZSwgd2UgY2FuIGFwcGx5XG4gICAgICAgIC8vIG91ciBmaW5hbCBzdHlsZXMgdG8gcGVyZm9ybSB0aGUgYW5pbWF0aW9uLlxuXG4gICAgICAgIC8vIE91ciBmaXJzdCBvcmRlciBvZiBidXNpbmVzcyBpcyB0byBcInVuZG9cIiB0aGUgc3R5bGVzIGFwcGxpZWQgaW4gdGhlXG4gICAgICAgIC8vIHByZXZpb3VzIGZyYW1lcywgd2hpbGUgYWxzbyBhZGRpbmcgYSBgdHJhbnNpdGlvbmAgcHJvcGVydHkuXG4gICAgICAgIC8vIFRoaXMgd2F5LCB0aGUgaXRlbSB3aWxsIHNtb290aGx5IHRyYW5zaXRpb24gZnJvbSBpdHMgb2xkIHBvc2l0aW9uXG4gICAgICAgIC8vIHRvIGl0cyBuZXcgcG9zaXRpb24uXG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZsb3d0eXBlL3JlcXVpcmUtdmFyaWFibGUtdHlwZVxuICAgICAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgICAgIHRyYW5zaXRpb246IGNyZWF0ZVRyYW5zaXRpb25TdHJpbmcoaW5kZXgsIF90aGlzNC5wcm9wcyksXG4gICAgICAgICAgdHJhbnNmb3JtOiAnJyxcbiAgICAgICAgICBvcGFjaXR5OiAnJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjaGlsZC5hcHBlYXJpbmcgJiYgX3RoaXM0LnByb3BzLmFwcGVhckFuaW1hdGlvbikge1xuICAgICAgICAgIHN0eWxlcyA9IF9leHRlbmRzKHt9LCBzdHlsZXMsIF90aGlzNC5wcm9wcy5hcHBlYXJBbmltYXRpb24udG8pO1xuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkLmVudGVyaW5nICYmIF90aGlzNC5wcm9wcy5lbnRlckFuaW1hdGlvbikge1xuICAgICAgICAgIHN0eWxlcyA9IF9leHRlbmRzKHt9LCBzdHlsZXMsIF90aGlzNC5wcm9wcy5lbnRlckFuaW1hdGlvbi50byk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hpbGQubGVhdmluZyAmJiBfdGhpczQucHJvcHMubGVhdmVBbmltYXRpb24pIHtcbiAgICAgICAgICBzdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBfdGhpczQucHJvcHMubGVhdmVBbmltYXRpb24udG8pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW4gRkxJUCB0ZXJtaW5vbG9neSwgdGhpcyBpcyB0aGUgJ1BsYXknIHN0YWdlLlxuICAgICAgICBhcHBseVN0eWxlc1RvRE9NTm9kZSh7IGRvbU5vZGU6IGRvbU5vZGUsIHN0eWxlczogc3R5bGVzIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmJpbmRUcmFuc2l0aW9uRW5kSGFuZGxlcihjaGlsZCk7XG4gIH07XG5cbiAgRmxpcE1vdmUucHJvdG90eXBlLmJpbmRUcmFuc2l0aW9uRW5kSGFuZGxlciA9IGZ1bmN0aW9uIGJpbmRUcmFuc2l0aW9uRW5kSGFuZGxlcihjaGlsZCkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgdmFyIF9nZXRDaGlsZERhdGEzID0gdGhpcy5nZXRDaGlsZERhdGEoZ2V0S2V5KGNoaWxkKSksXG4gICAgICAgIGRvbU5vZGUgPSBfZ2V0Q2hpbGREYXRhMy5kb21Ob2RlO1xuXG4gICAgaWYgKCFkb21Ob2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVGhlIG9uRmluaXNoIGNhbGxiYWNrIG5lZWRzIHRvIGJlIGJvdW5kIHRvIHRoZSB0cmFuc2l0aW9uRW5kIGV2ZW50LlxuICAgIC8vIFdlIGFsc28gbmVlZCB0byB1bmJpbmQgaXQgd2hlbiB0aGUgdHJhbnNpdGlvbiBjb21wbGV0ZXMsIHNvIHRoaXMgdWdseVxuICAgIC8vIGlubGluZSBmdW5jdGlvbiBpcyByZXF1aXJlZCAod2UgbmVlZCBpdCBoZXJlIHNvIGl0IGNsb3NlcyBvdmVyXG4gICAgLy8gZGVwZW5kZW50IHZhcmlhYmxlcyBgY2hpbGRgIGFuZCBgZG9tTm9kZWApXG4gICAgdmFyIHRyYW5zaXRpb25FbmRIYW5kbGVyID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZEhhbmRsZXIoZXYpIHtcbiAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB0aGlzIGhhbmRsZXIgaXMgZmlyZWQgbm90IG9uIG91ciBwcmltYXJ5IHRyYW5zaXRpb24sXG4gICAgICAvLyBidXQgb24gYSBuZXN0ZWQgdHJhbnNpdGlvbiAoZWcuIGEgaG92ZXIgZWZmZWN0KS4gSWdub3JlIHRoZXNlIGNhc2VzLlxuICAgICAgaWYgKGV2LnRhcmdldCAhPT0gZG9tTm9kZSkgcmV0dXJuO1xuXG4gICAgICAvLyBSZW1vdmUgdGhlICd0cmFuc2l0aW9uJyBpbmxpbmUgc3R5bGUgd2UgYWRkZWQuIFRoaXMgaXMgY2xlYW51cC5cbiAgICAgIGRvbU5vZGUuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuXG4gICAgICAvLyBUcmlnZ2VyIGFueSBhcHBsaWNhYmxlIG9uRmluaXNoL29uRmluaXNoQWxsIGhvb2tzXG4gICAgICBfdGhpczUudHJpZ2dlckZpbmlzaEhvb2tzKGNoaWxkLCBkb21Ob2RlKTtcblxuICAgICAgZG9tTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmQsIHRyYW5zaXRpb25FbmRIYW5kbGVyKTtcblxuICAgICAgaWYgKGNoaWxkLmxlYXZpbmcpIHtcbiAgICAgICAgX3RoaXM1LnJlbW92ZUNoaWxkRGF0YShnZXRLZXkoY2hpbGQpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZG9tTm9kZS5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmQsIHRyYW5zaXRpb25FbmRIYW5kbGVyKTtcbiAgfTtcblxuICBGbGlwTW92ZS5wcm90b3R5cGUudHJpZ2dlckZpbmlzaEhvb2tzID0gZnVuY3Rpb24gdHJpZ2dlckZpbmlzaEhvb2tzKGNoaWxkLCBkb21Ob2RlKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5vbkZpbmlzaCkgdGhpcy5wcm9wcy5vbkZpbmlzaChjaGlsZCwgZG9tTm9kZSk7XG5cbiAgICAvLyBSZWR1Y2UgdGhlIG51bWJlciBvZiBjaGlsZHJlbiB3ZSBuZWVkIHRvIGFuaW1hdGUgYnkgMSxcbiAgICAvLyBzbyB0aGF0IHdlIGNhbiB0ZWxsIHdoZW4gYWxsIGNoaWxkcmVuIGhhdmUgZmluaXNoZWQuXG4gICAgdGhpcy5yZW1haW5pbmdBbmltYXRpb25zIC09IDE7XG5cbiAgICBpZiAodGhpcy5yZW1haW5pbmdBbmltYXRpb25zID09PSAwKSB7XG4gICAgICAvLyBSZW1vdmUgYW55IGl0ZW1zIGZyb20gdGhlIERPTSB0aGF0IGhhdmUgbGVmdCwgYW5kIHJlc2V0IGBlbnRlcmluZ2AuXG4gICAgICB2YXIgbmV4dENoaWxkcmVuID0gdGhpcy5zdGF0ZS5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgIHZhciBsZWF2aW5nID0gX3JlZjIubGVhdmluZztcbiAgICAgICAgcmV0dXJuICFsZWF2aW5nO1xuICAgICAgfSkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgaXRlbSwge1xuICAgICAgICAgIC8vIGZpeCBmb3IgRmxvd1xuICAgICAgICAgIGVsZW1lbnQ6IGl0ZW0uZWxlbWVudCxcbiAgICAgICAgICBhcHBlYXJpbmc6IGZhbHNlLFxuICAgICAgICAgIGVudGVyaW5nOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgY2hpbGRyZW46IG5leHRDaGlsZHJlbiB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgX3RoaXM2LnByb3BzLm9uRmluaXNoQWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgX3RoaXM2LmNhbGxDaGlsZHJlbkhvb2soX3RoaXM2LnByb3BzLm9uRmluaXNoQWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlc2V0IG91ciB2YXJpYWJsZXMgZm9yIHRoZSBuZXh0IGl0ZXJhdGlvblxuICAgICAgICBfdGhpczYuY2hpbGRyZW5Ub0FuaW1hdGUgPSBbXTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBJZiB0aGUgcGxhY2Vob2xkZXIgd2FzIGhvbGRpbmcgdGhlIGNvbnRhaW5lciBvcGVuIHdoaWxlIGVsZW1lbnRzIHdlcmVcbiAgICAgIC8vIGxlYXZpbmcsIHdlIHdlIGNhbiBub3cgc2V0IGl0cyBoZWlnaHQgdG8gemVyby5cbiAgICAgIGlmICh0aGlzLmhlaWdodFBsYWNlaG9sZGVyRGF0YS5kb21Ob2RlKSB7XG4gICAgICAgIHRoaXMuaGVpZ2h0UGxhY2Vob2xkZXJEYXRhLmRvbU5vZGUuc3R5bGUuaGVpZ2h0ID0gJzAnO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGbGlwTW92ZS5wcm90b3R5cGUuY2FsbENoaWxkcmVuSG9vayA9IGZ1bmN0aW9uIGNhbGxDaGlsZHJlbkhvb2soaG9vaykge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGRvbU5vZGVzID0gW107XG5cbiAgICB0aGlzLmNoaWxkcmVuVG9BbmltYXRlLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkS2V5KSB7XG4gICAgICAvLyBJZiB0aGlzIHdhcyBhbiBleGl0IGFuaW1hdGlvbiwgdGhlIGNoaWxkIG1heSBubyBsb25nZXIgZXhpc3QuXG4gICAgICAvLyBJZiBzbywgc2tpcCBpdC5cbiAgICAgIHZhciBjaGlsZCA9IF90aGlzNy5maW5kQ2hpbGRCeUtleShjaGlsZEtleSk7XG5cbiAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50cy5wdXNoKGNoaWxkKTtcblxuICAgICAgaWYgKF90aGlzNy5oYXNDaGlsZERhdGEoY2hpbGRLZXkpKSB7XG4gICAgICAgIGRvbU5vZGVzLnB1c2goX3RoaXM3LmdldENoaWxkRGF0YShjaGlsZEtleSkuZG9tTm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBob29rKGVsZW1lbnRzLCBkb21Ob2Rlcyk7XG4gIH07XG5cbiAgRmxpcE1vdmUucHJvdG90eXBlLnVwZGF0ZUJvdW5kaW5nQm94Q2FjaGVzID0gZnVuY3Rpb24gdXBkYXRlQm91bmRpbmdCb3hDYWNoZXMoKSB7XG4gICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAvLyBUaGlzIGlzIHRoZSBPTkxZIHBsYWNlIHRoYXQgcGFyZW50RGF0YSBhbmQgY2hpbGRyZW5EYXRhJ3NcbiAgICAvLyBib3VuZGluZyBib3hlcyBhcmUgdXBkYXRlZC4gVGhleSB3aWxsIGJlIGNhbGN1bGF0ZWQgYXQgb3RoZXIgdGltZXNcbiAgICAvLyB0byBiZSBjb21wYXJlZCB0byB0aGlzIHZhbHVlLCBidXQgaXQncyBpbXBvcnRhbnQgdGhhdCB0aGUgY2FjaGUgaXNcbiAgICAvLyB1cGRhdGVkIG9uY2UgcGVyIHVwZGF0ZS5cbiAgICB2YXIgcGFyZW50RG9tTm9kZSA9IHRoaXMucGFyZW50RGF0YS5kb21Ob2RlO1xuXG4gICAgaWYgKCFwYXJlbnREb21Ob2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wYXJlbnREYXRhLmJvdW5kaW5nQm94ID0gdGhpcy5wcm9wcy5nZXRQb3NpdGlvbihwYXJlbnREb21Ob2RlKTtcblxuICAgIC8vIFNwbGl0dGluZyBET00gcmVhZHMgYW5kIHdyaXRlcyB0byBiZSBwZWZvcm1lZCBpbiBiYXRjaGVzXG4gICAgdmFyIGNoaWxkcmVuQm91bmRpbmdCb3hlcyA9IFtdO1xuXG4gICAgdGhpcy5zdGF0ZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgdmFyIGNoaWxkS2V5ID0gZ2V0S2V5KGNoaWxkKTtcblxuICAgICAgLy8gSXQgaXMgcG9zc2libGUgdGhhdCBhIGNoaWxkIGRvZXMgbm90IGhhdmUgYSBga2V5YCBwcm9wZXJ0eTtcbiAgICAgIC8vIElnbm9yZSB0aGVzZSBjaGlsZHJlbiwgdGhleSBkb24ndCBuZWVkIHRvIGJlIG1vdmVkLlxuICAgICAgaWYgKCFjaGlsZEtleSkge1xuICAgICAgICBjaGlsZHJlbkJvdW5kaW5nQm94ZXMucHVzaChudWxsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJbiB2ZXJ5IHJhcmUgY2lyY3Vtc3RhbmNlcywgZm9yIHJlYXNvbnMgdW5rbm93biwgdGhlIHJlZiBpcyBuZXZlclxuICAgICAgLy8gcG9wdWxhdGVkIGZvciBjZXJ0YWluIGNoaWxkcmVuLiBJbiB0aGlzIGNhc2UsIGF2b2lkIGRvaW5nIHRoaXMgdXBkYXRlLlxuICAgICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vam9zaHdjb21lYXUvcmVhY3QtZmxpcC1tb3ZlL3B1bGwvOTFcbiAgICAgIGlmICghX3RoaXM4Lmhhc0NoaWxkRGF0YShjaGlsZEtleSkpIHtcbiAgICAgICAgY2hpbGRyZW5Cb3VuZGluZ0JveGVzLnB1c2gobnVsbCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkRGF0YSA9IF90aGlzOC5nZXRDaGlsZERhdGEoY2hpbGRLZXkpO1xuXG4gICAgICAvLyBJZiB0aGUgY2hpbGQgZWxlbWVudCByZXR1cm5zIG51bGwsIHdlIG5lZWQgdG8gYXZvaWQgdHJ5aW5nIHRvXG4gICAgICAvLyBhY2NvdW50IGZvciBpdFxuICAgICAgaWYgKCFjaGlsZERhdGEuZG9tTm9kZSB8fCAhY2hpbGQpIHtcbiAgICAgICAgY2hpbGRyZW5Cb3VuZGluZ0JveGVzLnB1c2gobnVsbCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2hpbGRyZW5Cb3VuZGluZ0JveGVzLnB1c2goZ2V0UmVsYXRpdmVCb3VuZGluZ0JveCh7XG4gICAgICAgIGNoaWxkRG9tTm9kZTogY2hpbGREYXRhLmRvbU5vZGUsXG4gICAgICAgIHBhcmVudERvbU5vZGU6IHBhcmVudERvbU5vZGUsXG4gICAgICAgIGdldFBvc2l0aW9uOiBfdGhpczgucHJvcHMuZ2V0UG9zaXRpb25cbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIHRoaXMuc3RhdGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICB2YXIgY2hpbGRLZXkgPSBnZXRLZXkoY2hpbGQpO1xuXG4gICAgICB2YXIgY2hpbGRCb3VuZGluZ0JveCA9IGNoaWxkcmVuQm91bmRpbmdCb3hlc1tpbmRleF07XG5cbiAgICAgIGlmICghY2hpbGRLZXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpczguc2V0Q2hpbGREYXRhKGNoaWxkS2V5LCB7XG4gICAgICAgIGJvdW5kaW5nQm94OiBjaGlsZEJvdW5kaW5nQm94XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBGbGlwTW92ZS5wcm90b3R5cGUuY29tcHV0ZUluaXRpYWxTdHlsZXMgPSBmdW5jdGlvbiBjb21wdXRlSW5pdGlhbFN0eWxlcyhjaGlsZCkge1xuICAgIGlmIChjaGlsZC5hcHBlYXJpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmFwcGVhckFuaW1hdGlvbiA/IHRoaXMucHJvcHMuYXBwZWFyQW5pbWF0aW9uLmZyb20gOiB7fTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLmVudGVyaW5nKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMuZW50ZXJBbmltYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgLy8gSWYgdGhpcyBjaGlsZCB3YXMgaW4gdGhlIG1pZGRsZSBvZiBsZWF2aW5nLCBpdCBzdGlsbCBoYXMgaXRzXG4gICAgICAvLyBhYnNvbHV0ZSBwb3NpdGlvbmluZyBzdHlsZXMgYXBwbGllZC4gV2UgbmVlZCB0byB1bmRvIHRob3NlLlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgcG9zaXRpb246ICcnLFxuICAgICAgICB0b3A6ICcnLFxuICAgICAgICBsZWZ0OiAnJyxcbiAgICAgICAgcmlnaHQ6ICcnLFxuICAgICAgICBib3R0b206ICcnXG4gICAgICB9LCB0aGlzLnByb3BzLmVudGVyQW5pbWF0aW9uLmZyb20pO1xuICAgIH0gZWxzZSBpZiAoY2hpbGQubGVhdmluZykge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMubGVhdmVBbmltYXRpb24gPyB0aGlzLnByb3BzLmxlYXZlQW5pbWF0aW9uLmZyb20gOiB7fTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGREYXRhID0gdGhpcy5nZXRDaGlsZERhdGEoZ2V0S2V5KGNoaWxkKSk7XG4gICAgdmFyIGNoaWxkRG9tTm9kZSA9IGNoaWxkRGF0YS5kb21Ob2RlO1xuICAgIHZhciBjaGlsZEJvdW5kaW5nQm94ID0gY2hpbGREYXRhLmJvdW5kaW5nQm94O1xuICAgIHZhciBwYXJlbnRCb3VuZGluZ0JveCA9IHRoaXMucGFyZW50RGF0YS5ib3VuZGluZ0JveDtcblxuICAgIGlmICghY2hpbGREb21Ob2RlKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgdmFyIF9nZXRQb3NpdGlvbkRlbHRhMiA9IGdldFBvc2l0aW9uRGVsdGEoe1xuICAgICAgY2hpbGREb21Ob2RlOiBjaGlsZERvbU5vZGUsXG4gICAgICBjaGlsZEJvdW5kaW5nQm94OiBjaGlsZEJvdW5kaW5nQm94LFxuICAgICAgcGFyZW50Qm91bmRpbmdCb3g6IHBhcmVudEJvdW5kaW5nQm94LFxuICAgICAgZ2V0UG9zaXRpb246IHRoaXMucHJvcHMuZ2V0UG9zaXRpb25cbiAgICB9KSxcbiAgICAgICAgZFggPSBfZ2V0UG9zaXRpb25EZWx0YTJbMF0sXG4gICAgICAgIGRZID0gX2dldFBvc2l0aW9uRGVsdGEyWzFdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgnICsgZFggKyAncHgsICcgKyBkWSArICdweCknXG4gICAgfTtcbiAgfTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuXG5cbiAgRmxpcE1vdmUucHJvdG90eXBlLmlzQW5pbWF0aW9uRGlzYWJsZWQgPSBmdW5jdGlvbiBpc0FuaW1hdGlvbkRpc2FibGVkKHByb3BzKSB7XG4gICAgLy8gSWYgdGhlIGNvbXBvbmVudCBpcyBleHBsaWNpdGx5IHBhc3NlZCBhIGBkaXNhYmxlQWxsQW5pbWF0aW9uc2AgZmxhZyxcbiAgICAvLyB3ZSBjYW4gc2tpcCB0aGlzIHdob2xlIHByb2Nlc3MuIFNpbWlsYXJseSwgaWYgYWxsIG9mIHRoZSBudW1iZXJzIGhhdmVcbiAgICAvLyBiZWVuIHNldCB0byAwLCB0aGVyZSBpcyBubyBwb2ludCBpbiB0cnlpbmcgdG8gYW5pbWF0ZTsgZG9pbmcgc28gd291bGRcbiAgICAvLyBvbmx5IGNhdXNlIGEgZmxpY2tlciAoYW5kIHRoZSBpbnRlbnQgaXMgcHJvYmFibHkgdG8gZGlzYWJsZSBhbmltYXRpb25zKVxuICAgIC8vIFdlIGNhbiBhbHNvIHNraXAgdGhpcyByaWdhbWFyb2xlIGlmIHRoZXJlJ3Mgbm8gYnJvd3NlciBzdXBwb3J0IGZvciBpdC5cbiAgICByZXR1cm4gbm9Ccm93c2VyU3VwcG9ydCB8fCBwcm9wcy5kaXNhYmxlQWxsQW5pbWF0aW9ucyB8fCBwcm9wcy5kdXJhdGlvbiA9PT0gMCAmJiBwcm9wcy5kZWxheSA9PT0gMCAmJiBwcm9wcy5zdGFnZ2VyRHVyYXRpb25CeSA9PT0gMCAmJiBwcm9wcy5zdGFnZ2VyRGVsYXlCeSA9PT0gMDtcbiAgfTtcblxuICBGbGlwTW92ZS5wcm90b3R5cGUuZmluZENoaWxkQnlLZXkgPSBmdW5jdGlvbiBmaW5kQ2hpbGRCeUtleShrZXkpIHtcbiAgICByZXR1cm4gZmluZChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBnZXRLZXkoY2hpbGQpID09PSBrZXk7XG4gICAgfSwgdGhpcy5zdGF0ZS5jaGlsZHJlbik7XG4gIH07XG5cbiAgRmxpcE1vdmUucHJvdG90eXBlLmhhc0NoaWxkRGF0YSA9IGZ1bmN0aW9uIGhhc0NoaWxkRGF0YShrZXkpIHtcbiAgICAvLyBPYmplY3QgaGFzIHNvbWUgYnVpbHQtaW4gcHJvcGVydGllcyBvbiBpdHMgcHJvdG90eXBlLCBzdWNoIGFzIHRvU3RyaW5nLiAgaGFzT3duUHJvcGVydHkgbWFrZXNcbiAgICAvLyBzdXJlIHRoYXQga2V5IGlzIHByZXNlbnQgb24gY2hpbGRyZW5EYXRhIGl0c2VsZiwgbm90IG9uIGl0cyBwcm90b3R5cGUuXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmNoaWxkcmVuRGF0YSwga2V5KTtcbiAgfTtcblxuICBGbGlwTW92ZS5wcm90b3R5cGUuZ2V0Q2hpbGREYXRhID0gZnVuY3Rpb24gZ2V0Q2hpbGREYXRhKGtleSkge1xuICAgIHJldHVybiB0aGlzLmhhc0NoaWxkRGF0YShrZXkpID8gdGhpcy5jaGlsZHJlbkRhdGFba2V5XSA6IHt9O1xuICB9O1xuXG4gIEZsaXBNb3ZlLnByb3RvdHlwZS5zZXRDaGlsZERhdGEgPSBmdW5jdGlvbiBzZXRDaGlsZERhdGEoa2V5LCBkYXRhKSB7XG4gICAgdGhpcy5jaGlsZHJlbkRhdGFba2V5XSA9IF9leHRlbmRzKHt9LCB0aGlzLmdldENoaWxkRGF0YShrZXkpLCBkYXRhKTtcbiAgfTtcblxuICBGbGlwTW92ZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGREYXRhID0gZnVuY3Rpb24gcmVtb3ZlQ2hpbGREYXRhKGtleSkge1xuICAgIGRlbGV0ZSB0aGlzLmNoaWxkcmVuRGF0YVtrZXldO1xuICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBwcmV2U3RhdGUsIHtcbiAgICAgICAgY2hpbGRyZW46IHByZXZTdGF0ZS5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkLmVsZW1lbnQua2V5ICE9PSBrZXk7XG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBGbGlwTW92ZS5wcm90b3R5cGUuY3JlYXRlSGVpZ2h0UGxhY2Vob2xkZXIgPSBmdW5jdGlvbiBjcmVhdGVIZWlnaHRQbGFjZWhvbGRlcigpIHtcbiAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgIHZhciB0eXBlTmFtZSA9IHRoaXMucHJvcHMudHlwZU5hbWU7XG5cbiAgICAvLyBJZiByZXF1ZXN0ZWQsIGNyZWF0ZSBhbiBpbnZpc2libGUgZWxlbWVudCBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0LlxuICAgIC8vIEl0cyBoZWlnaHQgd2lsbCBiZSBtb2RpZmllZCB0byBwcmV2ZW50IHRoZSBjb250YWluZXIgZnJvbSBjb2xsYXBzaW5nXG4gICAgLy8gcHJlbWF0dXJlbHkuXG5cbiAgICB2YXIgaXNDb250YWluZXJBTGlzdCA9IHR5cGVOYW1lID09PSAndWwnIHx8IHR5cGVOYW1lID09PSAnb2wnO1xuICAgIHZhciBwbGFjZWhvbGRlclR5cGUgPSBpc0NvbnRhaW5lckFMaXN0ID8gJ2xpJyA6ICdkaXYnO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQocGxhY2Vob2xkZXJUeXBlLCB7XG4gICAgICBrZXk6ICdoZWlnaHQtcGxhY2Vob2xkZXInLFxuICAgICAgcmVmOiBmdW5jdGlvbiByZWYoZG9tTm9kZSkge1xuICAgICAgICBfdGhpczkuaGVpZ2h0UGxhY2Vob2xkZXJEYXRhLmRvbU5vZGUgPSBkb21Ob2RlO1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7IHZpc2liaWxpdHk6ICdoaWRkZW4nLCBoZWlnaHQ6IDAgfVxuICAgIH0pO1xuICB9O1xuXG4gIEZsaXBNb3ZlLnByb3RvdHlwZS5jaGlsZHJlbldpdGhSZWZzID0gZnVuY3Rpb24gY2hpbGRyZW5XaXRoUmVmcygpIHtcbiAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG5cbiAgICAvLyBXZSBuZWVkIHRvIGNsb25lIHRoZSBwcm92aWRlZCBjaGlsZHJlbiwgY2FwdHVyaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgIC8vIHVuZGVybHlpbmcgRE9NIG5vZGUuIEZsaXAgTW92ZSBuZWVkcyB0byB1c2UgdGhlIFJlYWN0IGVzY2FwZSBoYXRjaGVzIHRvXG4gICAgLy8gYmUgYWJsZSB0byBkbyBpdHMgY2FsY3VsYXRpb25zLlxuICAgIHJldHVybiB0aGlzLnN0YXRlLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQuZWxlbWVudCwge1xuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihlbGVtZW50KSB7XG4gICAgICAgICAgLy8gU3RhdGVsZXNzIEZ1bmN0aW9uYWwgQ29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCBieSBGbGlwTW92ZSxcbiAgICAgICAgICAvLyBiZWNhdXNlIHRoZXkgZG9uJ3QgaGF2ZSBpbnN0YW5jZXMuXG4gICAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGRvbU5vZGUgPSBnZXROYXRpdmVOb2RlKGVsZW1lbnQpO1xuICAgICAgICAgIF90aGlzMTAuc2V0Q2hpbGREYXRhKGdldEtleShjaGlsZCksIHsgZG9tTm9kZTogZG9tTm9kZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgRmxpcE1vdmUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIHR5cGVOYW1lID0gX3Byb3BzMi50eXBlTmFtZSxcbiAgICAgICAgZGVsZWdhdGVkID0gX3Byb3BzMi5kZWxlZ2F0ZWQsXG4gICAgICAgIGxlYXZlQW5pbWF0aW9uID0gX3Byb3BzMi5sZWF2ZUFuaW1hdGlvbixcbiAgICAgICAgbWFpbnRhaW5Db250YWluZXJIZWlnaHQgPSBfcHJvcHMyLm1haW50YWluQ29udGFpbmVySGVpZ2h0O1xuXG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuV2l0aFJlZnMoKTtcbiAgICBpZiAobGVhdmVBbmltYXRpb24gJiYgbWFpbnRhaW5Db250YWluZXJIZWlnaHQpIHtcbiAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5jcmVhdGVIZWlnaHRQbGFjZWhvbGRlcigpKTtcbiAgICB9XG5cbiAgICBpZiAoIXR5cGVOYW1lKSByZXR1cm4gY2hpbGRyZW47XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgZGVsZWdhdGVkLCB7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICByZWY6IGZ1bmN0aW9uIHJlZihub2RlKSB7XG4gICAgICAgIF90aGlzMTEucGFyZW50RGF0YS5kb21Ob2RlID0gbm9kZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHR5cGVOYW1lLCBwcm9wcyk7XG4gIH07XG5cbiAgcmV0dXJuIEZsaXBNb3ZlO1xufShDb21wb25lbnQpO1xuXG52YXIgZW5oYW5jZWRGbGlwTW92ZSA9IC8qICNfX1BVUkVfXyAqL3Byb3BDb252ZXJ0ZXIoRmxpcE1vdmUkMSk7XG5cbi8qKlxuICogUmVhY3QgRmxpcCBNb3ZlXG4gKiAoYykgMjAxNi1wcmVzZW50IEpvc2h1YSBDb21lYXVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBlbmhhbmNlZEZsaXBNb3ZlO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudG9kby1pdGVtX190b3AtdG9kby1zZWN0aW9ue1xcclxcbiAgcGFkZGluZzoxMHB4O1xcclxcbiAgYm9yZGVyLXJhZGl1czogMjVweDtcXHJcXG4gIG1pbi13aWR0aDogMTM1dmg7XFxyXFxuICBjb2xvcjogI0UxRjBFMjtcXHJcXG4gIGJvcmRlci1jb2xvcjogIzY5QjM2QztcXHJcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjlCMzZDO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxufVxcclxcblxcclxcbi8qIC5uby10b2RvLXBsYWNlaG9sZGVye1xcclxcbiAgYmFja2dyb3VuZDpcXHJcXG59ICovXFxyXFxuXFxyXFxuLnBvcHVwLWJhY2tncm91bmR7XFxyXFxuICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICB0b3A6IDA7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICBib3R0b206IDA7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLCAwLjUpO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW17XFxyXFxuICBtYXJnaW46MTBweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuIC50b2RvLWxpc3QtZm9ybXtcXHJcXG4gIHBhZGRpbmc6IDEwcHg7XFxyXFxuICBib3JkZXItcmFkaXVzOiAyNXB4O1xcclxcbiAgYmFja2dyb3VuZDogICM0M0EwNDc7XFxyXFxuICBjb2xvcjogI0UxRjBFMjtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLnRvZG8taXRlbS1saXN0e1xcclxcbiAgb3ZlcmZsb3c6IGF1dG87XFxyXFxuICBoZWlnaHQ6IDc1dmg7XFxyXFxuICBwYWRkaW5nOiAxNXB4O1xcclxcbiAgbWluLWhlaWdodDogNzV2aDtcXHJcXG4gIG1pbi13aWR0aDogMTU1dmg7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW06ZW1wdHk6OmJlZm9yZXtcXHJcXG4gIGNvbnRlbnQ6IGF0dHIoZGF0YS1lbXB0eS1tZXNzYWdlKTtcXHJcXG59XFxyXFxuXFxyXFxuLnRvZG8taXRlbV9fdG9wLXJpZ2h0LXRvZG8tc2VjdGlvbntcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbiAgYWxpZ24taXRlbXM6Y2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG5saXtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDI1cHg7XFxyXFxuICBtaW4taGVpZ2h0OiAxMHB4O1xcclxcbiAgcGFkZGluZzogNXB4O1xcclxcbiAgbWFyZ2luOiA1cHg7XFxyXFxuICBiYWNrZ3JvdW5kOiAjRTFGMEUyO1xcclxcbiAgY29sb3I6ICM0M0EwNDc7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuLmNvbW1lbnRzLWZvcm1fX2NvbW1lbnRzLWxpc3R7XFxyXFxuICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgbWFyZ2luOiAxMHB4O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzQzQTA0NztcXHJcXG4gIG92ZXJmbG93OiBhdXRvO1xcclxcbiAgaGVpZ2h0OiAyNHZoO1xcclxcbiAgYm9yZGVyLXJhZGl1czogMjVweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbn1cXHJcXG5cXHJcXG4uY29tbWVudHMtZm9ybXtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbn1cXHJcXG5cXHJcXG4uY29tbWVudHMtZm9ybV9faW5wdXQtZm9ybXtcXHJcXG4gIHBhZGRpbmc6IDEwcHg7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG59XFxyXFxuXFxyXFxuLmVkaXQtZm9ybV9faW5wdXQtZm9ybXtcXHJcXG4gIHBhZGRpbmc6IDEwcHg7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDNBMDQ3O1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBib3JkZXItcmFkaXVzOiAyNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZWRpdC1mb3Jte1xcclxcbiAgbWFyZ2luOiAxMHB4O1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcblxcclxcbi5zZXR0aW5ncy1mb3Jte1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjNjlCMzZDO1xcclxcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2OUIzNkM7XFxyXFxuICB3aWR0aDogMTAwdmg7XFxyXFxuICBoZWlnaHQ6IDg2dmg7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcclxcbiAgY29sb3I6ICNDN0UzQzg7XFxyXFxuICBib3JkZXItcmFkaXVzOiAyNXB4O1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5pe1xcclxcbiAgbWFyZ2luOiAxMHB4O1xcclxcbiAgZm9udC1zaXplOiAzMnB4O1xcclxcbn1cXHJcXG5cXHJcXG4udG9kby1pdGVtX190aXRsZXtcXHJcXG4gIGZvbnQtc2l6ZTogMThweDtcXHJcXG59XFxyXFxuXFxyXFxuLnRvZG8taXRlbV9fZGVzY3JpcHRpb257XFxyXFxuICBmb250LXNpemU6IDEycHg7XFxyXFxufVxcclxcblxcclxcbi5mYS1jaGVjay1hY3RpdmUge1xcclxcbiAgY29sb3I6ICNlNzRjM2M7XFxyXFxufVxcclxcblxcclxcbi5mYS1lZGl0LWFjdGl2ZXtcXHJcXG4gIGNvbG9yOiAjMDA0MEZGO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4uZmEtdGltZXN7XFxyXFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICAtd2Via2l0LXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIC44cyBlYXNlLWluLW91dDtcXHJcXG4gICAgICAgICAgdHJhbnNpdGlvbjogICAgICAgICB0cmFuc2Zvcm0gLjhzIGVhc2UtaW4tb3V0O1xcclxcbn1cXHJcXG5cXHJcXG4uZmEtdGltZXM6aG92ZXJ7XFxyXFxuICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxufVxcclxcblxcclxcbmlucHV0e1xcclxcbiAgIG1hcmdpbjogMTBweDtcXHJcXG4gICBwYWRkaW5nOiA1cHg7XFxyXFxuICAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgIGJhY2tncm91bmQtY29sb3I6ICNFMUYwRTI7XFxyXFxuICAgY29sb3I6ICM0M0EwNDc7XFxyXFxuICAgYm9yZGVyOiAwcHggc29saWQ7XFxyXFxufVxcclxcblxcclxcbi50b2RvLWl0ZW1fX2xpa2Uge1xcclxcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAuNHMgZWFzZS1pbi1vdXQ7XFxyXFxuICAgICAgICAgIHRyYW5zaXRpb246ICAgICAgICAgdHJhbnNmb3JtIC40cyBlYXNlLWluLW91dDtcXHJcXG59XFxyXFxuLnRvZG8taXRlbV9fbGlrZTphY3RpdmUge1xcclxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxMGRlZyk7XFxyXFxuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDEwZGVnKTtcXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuaGVhZGVye1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzQzQTA0NztcXHJcXG4gIHBhZGRpbmc6IDEwcHg7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIG1heC1oZWlnaHQ6IDEwdmg7XFxyXFxuICBjb2xvcjogI0M3RTNDODtcXHJcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDI1cHg7XFxyXFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMjVweDtcXHJcXG59XFxyXFxuXFxyXFxuLmFkZE5ld3tcXHJcXG4gIHBhZGRpbmc6NXB4O1xcclxcbiAgYm9yZGVyLXJhZGl1czogMjVweDtcXHJcXG4gIGNvbG9yOiAjRTFGMEUyO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzY5QjM2QztcXHJcXG4gIHdpZHRoOiBhdXRvO1xcclxcbiAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgYm9yZGVyLWNvbG9yOiAjRTFGMEUyO1xcclxcbn1cXHJcXG5pbnB1dHtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDI1cHg7XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2hlYWRlci5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vaGVhZGVyLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vaGVhZGVyLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMy4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLHI9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHQ9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdT1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHY9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx3PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDkseD1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseT1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsej1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLEE9XCJmdW5jdGlvblwiPT09XG50eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsYz0wO2M8YjtjKyspZSs9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtiPUVycm9yKGUrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtiLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCI7Yi5mcmFtZXNUb1BvcD0xO3Rocm93IGI7fVxudmFyIEM9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O2Z1bmN0aW9uIEQoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9bjt0aGlzLnVwZGF0ZXI9ZXx8Q31ELnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0QucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9CKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RC5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRSgpe31cbkUucHJvdG90eXBlPUQucHJvdG90eXBlO2Z1bmN0aW9uIEYoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9bjt0aGlzLnVwZGF0ZXI9ZXx8Q312YXIgRz1GLnByb3RvdHlwZT1uZXcgRTtHLmNvbnN0cnVjdG9yPUY7bShHLEQucHJvdG90eXBlKTtHLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBIPXtjdXJyZW50Om51bGx9LEk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxKPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBLKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilJLmNhbGwoYixjKSYmIUouaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaz1BcnJheShmKSxsPTA7bDxmO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnIsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOkguY3VycmVudH19XG5mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1yfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCJcXHgzZFwiOlwiXFx4M2QwXCIsXCI6XCI6XCJcXHgzZDJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZyxOPVtdO2Z1bmN0aW9uIE8oYSxiLGUsYyl7aWYoTi5sZW5ndGgpe3ZhciBkPU4ucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1mdW5jdGlvbiBQKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+Ti5sZW5ndGgmJk4ucHVzaChhKX1cbmZ1bmN0aW9uIFEoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHI6Y2FzZSB0Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1IoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrUihkLGgpO2crPVEoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj1BJiZhW0FdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLFxuaD0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitSKGQsaCsrKSxnKz1RKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEIoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFIoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFMoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gVChhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9VKGEsYyxlLHAudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKEwoYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE0sXCIkXFx4MjYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnIsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBVKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE0sXCIkXFx4MjYvXCIpK1wiL1wiKTtiPU8oYixnLGMsZCk7bnVsbD09YXx8UShhLFwiXCIsVCxiKTtQKGIpfVxudmFyIFY9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VShhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9TyhudWxsLG51bGwsYixlKTtudWxsPT1hfHxRKGEsXCJcIixTLGIpO1AoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UShhLFwiXCIscC50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VShhLGIsbnVsbCxwLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe0woYSk/dm9pZCAwOkIoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkQsUHVyZUNvbXBvbmVudDpGLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp4LFxuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2RlZmF1bHRWYWx1ZTphLF9jdXJyZW50VmFsdWU6YSxfY2hhbmdlZEJpdHM6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOncsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eixyZW5kZXI6YX19LEZyYWdtZW50OnUsU3RyaWN0TW9kZTp2LHVuc3RhYmxlX0FzeW5jTW9kZTp5LGNyZWF0ZUVsZW1lbnQ6SyxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe3ZhciBjPXZvaWQgMCxkPW0oe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9SC5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGs9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGs9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilJLmNhbGwoYixcbmMpJiYhSi5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09az9rW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7az1BcnJheShjKTtmb3IodmFyIGw9MDtsPGM7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1rfXJldHVybnskJHR5cGVvZjpyLHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPUsuYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpMLHZlcnNpb246XCIxNi4zLjFcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6SCxhc3NpZ246bX19LFc9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpWfSksWD1XJiZWfHxXO1xubW9kdWxlLmV4cG9ydHM9WFtcImRlZmF1bHRcIl0/WFtcImRlZmF1bHRcIl06WDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0ICcuLi9jb21wb25lbnQtY3NzL2hlYWRlci5jc3MnO1xyXG5pbXBvcnQgVG9kb0xpc3QgZnJvbSAnLi90b2RvTGlzdC5qc3gnO1xyXG5cclxuY2xhc3MgUG9wdXAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnTCoHtcclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0ncG9wdXAnPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdwb3B1cF9pbm5lcic+XHJcbiAgICAgICAgPGgxPkNyZWF0ZSBuZXcgVE9ETzwvaDE+XHJcbiAgICAgICAgPFRvZG9MaXN0Lz5cclxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMucHJvcHMuc2F2ZVRvZG99PlNhdmUgdG9kbzwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBzaG93UG9wdXA6IGZhbHNlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybihcclxuICAgICAgPGhlYWRlciBjbGFzcz1cImhlYWRlclwiPlxyXG4gICAgICAgIDxoMT5UT0RPIEFwcDwvaDE+XHJcbiAgICAgIDwvaGVhZGVyPlxyXG5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxyXFxuXFxyXFxuaHRtbCwgYm9keSwgYXBwLntcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogMTAwdmg7XFxyXFxufVxcclxcbi5wb3B1cCB7XFxyXFxuICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICB0b3A6IDA7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICBib3R0b206IDA7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLCAwLjUpO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuXFxyXFxufVxcclxcbiAucG9wdXBfaW5uZXIge1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIG1hcmdpbjogMTBweDtcXHJcXG4gIHBhZGRpbmc6IDEwcHg7XFxyXFxuICB3aWR0aDogYXV0bztcXHJcXG4gIGhlaWdodDogYXV0bztcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjlCMzZDO1xcclxcbiAgYm9yZGVyLXJhZGl1czogMjVweDtcXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYWRkbmV3LXBvcHVwLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9hZGRuZXctcG9wdXAuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9hZGRuZXctcG9wdXAuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIip7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbiAgZm9udC1mYW1pbHk6ICdCYWxvbycsIHNlcmlmO1xcclxcbn1cXHJcXG4uYXBwe1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNEREREREQ7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgbWluLWhlaWdodDogMTAwdmg7XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaCAoZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBMb2Rhc2ggPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pzLmZvdW5kYXRpb24vPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy41JztcblxuICAvKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbiAgdmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbiAgLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xuICB2YXIgQ09SRV9FUlJPUl9URVhUID0gJ1Vuc3VwcG9ydGVkIGNvcmUtanMgdXNlLiBUcnkgaHR0cHM6Ly9ucG1zLmlvL3NlYXJjaD9xPXBvbnlmaWxsLicsXG4gICAgICBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbiAgLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xuICB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xuICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xuICB2YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xuICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNhdGVgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG4gIHZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxhenkgaXRlcmF0ZWVzLiAqL1xuICB2YXIgTEFaWV9GSUxURVJfRkxBRyA9IDEsXG4gICAgICBMQVpZX01BUF9GTEFHID0gMixcbiAgICAgIExBWllfV0hJTEVfRkxBRyA9IDM7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG4gIHZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgICAgTkFOID0gMCAvIDA7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgdmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gIC8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG4gIHZhciB3cmFwRmxhZ3MgPSBbXG4gICAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gICAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICAgIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gICAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gICAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbiAgXTtcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nLFxuICAgICAgd2Vha1NldFRhZyA9ICdbb2JqZWN0IFdlYWtTZXRdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICAgKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAgICovXG4gIHZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgICByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbiAgdmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nLFxuICAgICAgcmVUcmltU3RhcnQgPSAvXlxccysvLFxuICAgICAgcmVUcmltRW5kID0gL1xccyskLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3cmFwIGRldGFpbCBjb21tZW50cy4gKi9cbiAgdmFyIHJlV3JhcENvbW1lbnQgPSAvXFx7KD86XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAuK1xcXSBcXCpcXC8pP1xcbj8vLFxuICAgICAgcmVXcmFwRGV0YWlscyA9IC9cXHtcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoICguKylcXF0gXFwqLyxcbiAgICAgIHJlU3BsaXREZXRhaWxzID0gLyw/ICYgLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3b3JkcyBjb21wb3NlZCBvZiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlQXNjaWlXb3JkID0gL1teXFx4MDAtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2ZdKy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2hcbiAgICogW0VTIHRlbXBsYXRlIGRlbGltaXRlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRlbXBsYXRlLWxpdGVyYWwtbGV4aWNhbC1jb21wb25lbnRzKS5cbiAgICovXG4gIHZhciByZUVzVGVtcGxhdGUgPSAvXFwkXFx7KFteXFxcXH1dKig/OlxcXFwuW15cXFxcfV0qKSopXFx9L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUZsYWdzID0gL1xcdyokLztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xuICB2YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xuICB2YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIExhdGluIFVuaWNvZGUgbGV0dGVycyAoZXhjbHVkaW5nIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMpLiAqL1xuICB2YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlTm9NYXRjaCA9IC8oJF4pLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB1bmVzY2FwZWQgY2hhcmFjdGVycyBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciByZVVuZXNjYXBlZFN0cmluZyA9IC9bJ1xcblxcclxcdTIwMjhcXHUyMDI5XFxcXF0vZztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG4gIHZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgICByc0xvd2VyUmFuZ2UgPSAnYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmJyxcbiAgICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgICAgcnNQdW5jdHVhdGlvblJhbmdlID0gJ1xcXFx1MjAwMC1cXFxcdTIwNmYnLFxuICAgICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnLFxuICAgICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbiAgdmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiLFxuICAgICAgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgICByc0RpZ2l0cyA9ICdcXFxcZCsnLFxuICAgICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgICByc0xvd2VyID0gJ1snICsgcnNMb3dlclJhbmdlICsgJ10nLFxuICAgICAgcnNNaXNjID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyByc0JyZWFrUmFuZ2UgKyByc0RpZ2l0cyArIHJzRGluZ2JhdFJhbmdlICsgcnNMb3dlclJhbmdlICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgICByc1VwcGVyID0gJ1snICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbiAgdmFyIHJzTWlzY0xvd2VyID0gJyg/OicgKyByc0xvd2VyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc09wdENvbnRyTG93ZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpkfGxsfG18cmV8c3x0fHZlKSk/JyxcbiAgICAgIHJzT3B0Q29udHJVcHBlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OkR8TEx8TXxSRXxTfFR8VkUpKT8nLFxuICAgICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgICByc09yZFVwcGVyID0gJ1xcXFxkKig/OjFTVHwyTkR8M1JEfCg/IVsxMjNdKVxcXFxkVEgpKD89XFxcXGJ8W2Etel9dKScsXG4gICAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcSxcbiAgICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGFwb3N0cm9waGVzLiAqL1xuICB2YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpIGFuZFxuICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICAgKi9cbiAgdmFyIHJlQ29tYm9NYXJrID0gUmVnRXhwKHJzQ29tYm8sICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbiAgdmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGNvbXBsZXggb3IgY29tcG91bmQgd29yZHMuICovXG4gIHZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzTWlzY1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciArIHJzTWlzY0xvd2VyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gICAgcnNVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlcixcbiAgICByc09yZFVwcGVyLFxuICAgIHJzT3JkTG93ZXIsXG4gICAgcnNEaWdpdHMsXG4gICAgcnNFbW9qaVxuICBdLmpvaW4oJ3wnKSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3MgdGhhdCBuZWVkIGEgbW9yZSByb2J1c3QgcmVnZXhwIHRvIG1hdGNoIHdvcmRzLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezIsfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSgpKTtcblxuICAvKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xuICB2YXIgbm9kZUlzQXJyYXlCdWZmZXIgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0FycmF5QnVmZmVyLFxuICAgICAgbm9kZUlzRGF0ZSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzRGF0ZSxcbiAgICAgIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwLFxuICAgICAgbm9kZUlzUmVnRXhwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNSZWdFeHAsXG4gICAgICBub2RlSXNTZXQgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1NldCxcbiAgICAgIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VBZ2dyZWdhdG9yYCBmb3IgYXJyYXlzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUFnZ3JlZ2F0b3IoYXJyYXksIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFYWNoUmlnaHQoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmV2ZXJ5YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUV2ZXJ5KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKCFwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhcnJheUluY2x1ZGVzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IodmFsdWUsIGFycmF5W2luZGV4XSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbKytpbmRleF07XG4gICAgfVxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ucmVkdWNlUmlnaHRgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlUmlnaHQoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5Wy0tbGVuZ3RoXTtcbiAgICB9XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCBhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICogc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGFuIEFTQ0lJIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICB2YXIgYXNjaWlTaXplID0gYmFzZVByb3BlcnR5KCdsZW5ndGgnKTtcblxuICAvKipcbiAgICogQ29udmVydHMgYW4gQVNDSUkgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnNwbGl0KCcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYW4gQVNDSUkgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVBc2NpaVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5maW5kS2V5YCBhbmQgYF8uZmluZExhc3RLZXlgLFxuICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gXG4gICAqIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZvdW5kIGVsZW1lbnQgb3IgaXRzIGtleSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kS2V5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZWFjaEZ1bmMpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGtleSwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmVzdWx0ID0ga2V5O1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgsIGZyb21SaWdodCkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mV2l0aChhcnJheSwgdmFsdWUsIGZyb21JbmRleCwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcihhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hTmAgd2l0aG91dCBzdXBwb3J0IGZvciBudW1iZXIgb2JqZWN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lYW5gIGFuZCBgXy5tZWFuQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VNZWFuKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gbGVuZ3RoID8gKGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSAvIGxlbmd0aCkgOiBOQU47XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZWR1Y2VgIGFuZCBgXy5yZWR1Y2VSaWdodGAsIHdpdGhvdXQgc3VwcG9ydFxuICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmAgdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaXRBY2N1bSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBvciBsYXN0IGVsZW1lbnQgb2ZcbiAgICogIGBjb2xsZWN0aW9uYCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VSZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0sIGVhY2hGdW5jKSB7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGluaXRBY2N1bVxuICAgICAgICA/IChpbml0QWNjdW0gPSBmYWxzZSwgdmFsdWUpXG4gICAgICAgIDogaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRCeWAgd2hpY2ggdXNlcyBgY29tcGFyZXJgIHRvIGRlZmluZSB0aGVcbiAgICogc29ydCBvcmRlciBvZiBgYXJyYXlgIGFuZCByZXBsYWNlcyBjcml0ZXJpYSBvYmplY3RzIHdpdGggdGhlaXIgY29ycmVzcG9uZGluZ1xuICAgKiB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJlciBUaGUgZnVuY3Rpb24gdG8gZGVmaW5lIHNvcnQgb3JkZXIuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVNvcnRCeShhcnJheSwgY29tcGFyZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBhcnJheVtsZW5ndGhdID0gYXJyYXlbbGVuZ3RoXS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnN1bWAgYW5kIGBfLnN1bUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTdW0oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIHJlc3VsdCxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdKTtcbiAgICAgIGlmIChjdXJyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBjdXJyZW50IDogKHJlc3VsdCArIGN1cnJlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAgICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1BhaXJzYCBhbmQgYF8udG9QYWlyc0luYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5XG4gICAqIG9mIGtleS12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGAgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUb1BhaXJzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIFtrZXksIG9iamVjdFtrZXldXTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gICAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICAgKiBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1TdGFydGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNvdW50LlxuICAgKi9cbiAgZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IDA7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChhcnJheVtsZW5ndGhdID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICArK3Jlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAgICovXG4gIHZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gICAgdmFyIGRhdGEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gICAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZWlyIGluZGV4ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHJlcGxhY2UuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlSG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4ga2V5ID09ICdfX3Byb3RvX18nXG4gICAgICA/IHVuZGVmaW5lZFxuICAgICAgOiBvYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFt2YWx1ZSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmxhc3RJbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCArIDE7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBzeW1ib2xzIGluIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgICAgOiBhc2NpaVNpemUoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy51bmVzY2FwZWAgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIHVuZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sVW5lc2NhcGVzKTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgKytyZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB1c2luZyB0aGUgYGNvbnRleHRgIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMS4xLjBcbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLm1peGluKHsgJ2Zvbyc6IF8uY29uc3RhbnQoJ2ZvbycpIH0pO1xuICAgKlxuICAgKiB2YXIgbG9kYXNoID0gXy5ydW5JbkNvbnRleHQoKTtcbiAgICogbG9kYXNoLm1peGluKHsgJ2Jhcic6IGxvZGFzaC5jb25zdGFudCgnYmFyJykgfSk7XG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfLmZvbyk7XG4gICAqIC8vID0+IHRydWVcbiAgICogXy5pc0Z1bmN0aW9uKF8uYmFyKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmZvbyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5iYXIpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIC8vIENyZWF0ZSBhIHN1cGVkLXVwIGBkZWZlcmAgaW4gTm9kZS5qcy5cbiAgICogdmFyIGRlZmVyID0gXy5ydW5JbkNvbnRleHQoeyAnc2V0VGltZW91dCc6IHNldEltbWVkaWF0ZSB9KS5kZWZlcjtcbiAgICovXG4gIHZhciBydW5JbkNvbnRleHQgPSAoZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gY29udGV4dCA9PSBudWxsID8gcm9vdCA6IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpO1xuXG4gICAgLyoqIEJ1aWx0LWluIGNvbnN0cnVjdG9yIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHQuRGF0ZSxcbiAgICAgICAgRXJyb3IgPSBjb250ZXh0LkVycm9yLFxuICAgICAgICBGdW5jdGlvbiA9IGNvbnRleHQuRnVuY3Rpb24sXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LFxuICAgICAgICBSZWdFeHAgPSBjb250ZXh0LlJlZ0V4cCxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yO1xuXG4gICAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbiAgICB2YXIgY29yZUpzRGF0YSA9IGNvbnRleHRbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xuICAgIHZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG4gICAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xuICAgIHZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgICAgIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byByZXNvbHZlIHRoZVxuICAgICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgICAqIG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbiAgICB2YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBfLm5vQ29uZmxpY3RgLiAqL1xuICAgIHZhciBvbGREYXNoID0gcm9vdC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbiAgICB2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IGNvbnRleHQuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBTeW1ib2wgPSBjb250ZXh0LlN5bWJvbCxcbiAgICAgICAgVWludDhBcnJheSA9IGNvbnRleHQuVWludDhBcnJheSxcbiAgICAgICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQsXG4gICAgICAgIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpLFxuICAgICAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICAgICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bUl0ZXJhdG9yID0gU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9KCkpO1xuXG4gICAgLyoqIE1vY2tlZCBidWlsdC1pbnMuICovXG4gICAgdmFyIGN0eENsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0ICE9PSByb290LmNsZWFyVGltZW91dCAmJiBjb250ZXh0LmNsZWFyVGltZW91dCxcbiAgICAgICAgY3R4Tm93ID0gRGF0ZSAmJiBEYXRlLm5vdyAhPT0gcm9vdC5EYXRlLm5vdyAmJiBEYXRlLm5vdyxcbiAgICAgICAgY3R4U2V0VGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dCAhPT0gcm9vdC5zZXRUaW1lb3V0ICYmIGNvbnRleHQuc2V0VGltZW91dDtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbiAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICAgICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSxcbiAgICAgICAgbmF0aXZlSm9pbiA9IGFycmF5UHJvdG8uam9pbixcbiAgICAgICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlTm93ID0gRGF0ZS5ub3csXG4gICAgICAgIG5hdGl2ZVBhcnNlSW50ID0gY29udGV4dC5wYXJzZUludCxcbiAgICAgICAgbmF0aXZlUmFuZG9tID0gTWF0aC5yYW5kb20sXG4gICAgICAgIG5hdGl2ZVJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG4gICAgdmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdEYXRhVmlldycpLFxuICAgICAgICBNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ01hcCcpLFxuICAgICAgICBQcm9taXNlID0gZ2V0TmF0aXZlKGNvbnRleHQsICdQcm9taXNlJyksXG4gICAgICAgIFNldCA9IGdldE5hdGl2ZShjb250ZXh0LCAnU2V0JyksXG4gICAgICAgIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ1dlYWtNYXAnKSxcbiAgICAgICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4gICAgLyoqIFVzZWQgdG8gc3RvcmUgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gICAgdmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG4gICAgLyoqIFVzZWQgdG8gbG9va3VwIHVubWluaWZpZWQgZnVuY3Rpb24gbmFtZXMuICovXG4gICAgdmFyIHJlYWxOYW1lcyA9IHt9O1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbiAgICB2YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgICAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICAgICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICAgICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbiAgICAvKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbiAgICB2YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGltcGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcy4gTWV0aG9kcyB0aGF0IG9wZXJhdGUgb24gYW5kIHJldHVybiBhcnJheXMsIGNvbGxlY3Rpb25zLFxuICAgICAqIGFuZCBmdW5jdGlvbnMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZVxuICAgICAqIG9yIG1heSByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gc2VxdWVuY2VcbiAgICAgKiBhbmQgcmV0dXJuIHRoZSB1bndyYXBwZWQgdmFsdWUuIE90aGVyd2lzZSwgdGhlIHZhbHVlIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBFeHBsaWNpdCBjaGFpbiBzZXF1ZW5jZXMsIHdoaWNoIG11c3QgYmUgdW53cmFwcGVkIHdpdGggYF8jdmFsdWVgLCBtYXkgYmVcbiAgICAgKiBlbmFibGVkIHVzaW5nIGBfLmNoYWluYC5cbiAgICAgKlxuICAgICAqIFRoZSBleGVjdXRpb24gb2YgY2hhaW5lZCBtZXRob2RzIGlzIGxhenksIHRoYXQgaXMsIGl0J3MgZGVmZXJyZWQgdW50aWxcbiAgICAgKiBgXyN2YWx1ZWAgaXMgaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGNhbGxlZC5cbiAgICAgKlxuICAgICAqIExhenkgZXZhbHVhdGlvbiBhbGxvd3Mgc2V2ZXJhbCBtZXRob2RzIHRvIHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uLlxuICAgICAqIFNob3J0Y3V0IGZ1c2lvbiBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWVyZ2UgaXRlcmF0ZWUgY2FsbHM7IHRoaXMgYXZvaWRzXG4gICAgICogdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBhcnJheXMgYW5kIGNhbiBncmVhdGx5IHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICogaXRlcmF0ZWUgZXhlY3V0aW9ucy4gU2VjdGlvbnMgb2YgYSBjaGFpbiBzZXF1ZW5jZSBxdWFsaWZ5IGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpZiB0aGUgc2VjdGlvbiBpcyBhcHBsaWVkIHRvIGFuIGFycmF5IGFuZCBpdGVyYXRlZXMgYWNjZXB0IG9ubHlcbiAgICAgKiBvbmUgYXJndW1lbnQuIFRoZSBoZXVyaXN0aWMgZm9yIHdoZXRoZXIgYSBzZWN0aW9uIHF1YWxpZmllcyBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaXMgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgXyN2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiB0byBsb2Rhc2ggbWV0aG9kcywgd3JhcHBlcnMgaGF2ZSBgQXJyYXlgIGFuZCBgU3RyaW5nYCBtZXRob2RzLlxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYEFycmF5YCBtZXRob2RzIGFyZTpcbiAgICAgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgc2hpZnRgLCBgc29ydGAsIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAgICAgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gICAgICogYGF0YCwgYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsIGBmaW5kYCxcbiAgICAgKiBgZmluZExhc3RgLCBgaGVhZGAsIGBpbml0aWFsYCwgYGxhc3RgLCBgbWFwYCwgYHJlamVjdGAsIGByZXZlcnNlYCwgYHNsaWNlYCxcbiAgICAgKiBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBhbmQgYHRvQXJyYXlgXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgbWV0aG9kcyBhcmU6XG4gICAgICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXNzaWduSW5gLCBgYXNzaWduSW5XaXRoYCwgYGFzc2lnbldpdGhgLCBgYXRgLFxuICAgICAqIGBiZWZvcmVgLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2FzdEFycmF5YCwgYGNoYWluYCwgYGNodW5rYCxcbiAgICAgKiBgY29tbWl0YCwgYGNvbXBhY3RgLCBgY29uY2F0YCwgYGNvbmZvcm1zYCwgYGNvbnN0YW50YCwgYGNvdW50QnlgLCBgY3JlYXRlYCxcbiAgICAgKiBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGRlZmVyYCwgYGRlbGF5YCxcbiAgICAgKiBgZGlmZmVyZW5jZWAsIGBkaWZmZXJlbmNlQnlgLCBgZGlmZmVyZW5jZVdpdGhgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLFxuICAgICAqIGBkcm9wUmlnaHRXaGlsZWAsIGBkcm9wV2hpbGVgLCBgZXh0ZW5kYCwgYGV4dGVuZFdpdGhgLCBgZmlsbGAsIGBmaWx0ZXJgLFxuICAgICAqIGBmbGF0TWFwYCwgYGZsYXRNYXBEZWVwYCwgYGZsYXRNYXBEZXB0aGAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCxcbiAgICAgKiBgZmxhdHRlbkRlcHRoYCwgYGZsaXBgLCBgZmxvd2AsIGBmbG93UmlnaHRgLCBgZnJvbVBhaXJzYCwgYGZ1bmN0aW9uc2AsXG4gICAgICogYGZ1bmN0aW9uc0luYCwgYGdyb3VwQnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW50ZXJzZWN0aW9uQnlgLFxuICAgICAqIGBpbnRlcnNlY3Rpb25XaXRoYCwgYGludmVydGAsIGBpbnZlcnRCeWAsIGBpbnZva2VNYXBgLCBgaXRlcmF0ZWVgLCBga2V5QnlgLFxuICAgICAqIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsIGBtYXRjaGVzUHJvcGVydHlgLFxuICAgICAqIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1lcmdlV2l0aGAsIGBtZXRob2RgLCBgbWV0aG9kT2ZgLCBgbWl4aW5gLCBgbmVnYXRlYCxcbiAgICAgKiBgbnRoQXJnYCwgYG9taXRgLCBgb21pdEJ5YCwgYG9uY2VgLCBgb3JkZXJCeWAsIGBvdmVyYCwgYG92ZXJBcmdzYCxcbiAgICAgKiBgb3ZlckV2ZXJ5YCwgYG92ZXJTb21lYCwgYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBhcnRpdGlvbmAsIGBwaWNrYCxcbiAgICAgKiBgcGlja0J5YCwgYHBsYW50YCwgYHByb3BlcnR5YCwgYHByb3BlcnR5T2ZgLCBgcHVsbGAsIGBwdWxsQWxsYCwgYHB1bGxBbGxCeWAsXG4gICAgICogYHB1bGxBbGxXaXRoYCwgYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVhcmdgLCBgcmVqZWN0YCxcbiAgICAgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzYW1wbGVTaXplYCwgYHNldGAsIGBzZXRXaXRoYCwgYHNodWZmbGVgLFxuICAgICAqIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzcGxpY2VgLCBgc3ByZWFkYCwgYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdG9BcnJheWAsXG4gICAgICogYHRvUGFpcnNgLCBgdG9QYWlyc0luYCwgYHRvUGF0aGAsIGB0b1BsYWluT2JqZWN0YCwgYHRyYW5zZm9ybWAsIGB1bmFyeWAsXG4gICAgICogYHVuaW9uYCwgYHVuaW9uQnlgLCBgdW5pb25XaXRoYCwgYHVuaXFgLCBgdW5pcUJ5YCwgYHVuaXFXaXRoYCwgYHVuc2V0YCxcbiAgICAgKiBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdXBkYXRlYCwgYHVwZGF0ZVdpdGhgLCBgdmFsdWVzYCxcbiAgICAgKiBgdmFsdWVzSW5gLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB4b3JCeWAsIGB4b3JXaXRoYCwgYHppcGAsXG4gICAgICogYHppcE9iamVjdGAsIGB6aXBPYmplY3REZWVwYCwgYW5kIGB6aXBXaXRoYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcbiAgICAgKiBgYWRkYCwgYGF0dGVtcHRgLCBgY2FtZWxDYXNlYCwgYGNhcGl0YWxpemVgLCBgY2VpbGAsIGBjbGFtcGAsIGBjbG9uZWAsXG4gICAgICogYGNsb25lRGVlcGAsIGBjbG9uZURlZXBXaXRoYCwgYGNsb25lV2l0aGAsIGBjb25mb3Jtc1RvYCwgYGRlYnVycmAsXG4gICAgICogYGRlZmF1bHRUb2AsIGBkaXZpZGVgLCBgZWFjaGAsIGBlYWNoUmlnaHRgLCBgZW5kc1dpdGhgLCBgZXFgLCBgZXNjYXBlYCxcbiAgICAgKiBgZXNjYXBlUmVnRXhwYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCwgYGZpbmRLZXlgLCBgZmluZExhc3RgLFxuICAgICAqIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpcnN0YCwgYGZsb29yYCwgYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCxcbiAgICAgKiBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZ2V0YCwgYGd0YCwgYGd0ZWAsIGBoYXNgLFxuICAgICAqIGBoYXNJbmAsIGBoZWFkYCwgYGlkZW50aXR5YCwgYGluY2x1ZGVzYCwgYGluZGV4T2ZgLCBgaW5SYW5nZWAsIGBpbnZva2VgLFxuICAgICAqIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQXJyYXlCdWZmZXJgLCBgaXNBcnJheUxpa2VgLCBgaXNBcnJheUxpa2VPYmplY3RgLFxuICAgICAqIGBpc0Jvb2xlYW5gLCBgaXNCdWZmZXJgLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLFxuICAgICAqIGBpc0VxdWFsV2l0aGAsIGBpc0Vycm9yYCwgYGlzRmluaXRlYCwgYGlzRnVuY3Rpb25gLCBgaXNJbnRlZ2VyYCwgYGlzTGVuZ3RoYCxcbiAgICAgKiBgaXNNYXBgLCBgaXNNYXRjaGAsIGBpc01hdGNoV2l0aGAsIGBpc05hTmAsIGBpc05hdGl2ZWAsIGBpc05pbGAsIGBpc051bGxgLFxuICAgICAqIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc09iamVjdExpa2VgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsXG4gICAgICogYGlzU2FmZUludGVnZXJgLCBgaXNTZXRgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgaXNUeXBlZEFycmF5YCxcbiAgICAgKiBgaXNXZWFrTWFwYCwgYGlzV2Vha1NldGAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsIGBsYXN0YCwgYGxhc3RJbmRleE9mYCxcbiAgICAgKiBgbG93ZXJDYXNlYCwgYGxvd2VyRmlyc3RgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtYXhCeWAsIGBtZWFuYCwgYG1lYW5CeWAsXG4gICAgICogYG1pbmAsIGBtaW5CeWAsIGBtdWx0aXBseWAsIGBub0NvbmZsaWN0YCwgYG5vb3BgLCBgbm93YCwgYG50aGAsIGBwYWRgLFxuICAgICAqIGBwYWRFbmRgLCBgcGFkU3RhcnRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLFxuICAgICAqIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzYW1wbGVgLCBgc2hpZnRgLCBgc2l6ZWAsXG4gICAgICogYHNuYWtlQ2FzZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHNvcnRlZEluZGV4QnlgLCBgc29ydGVkTGFzdEluZGV4YCxcbiAgICAgKiBgc29ydGVkTGFzdEluZGV4QnlgLCBgc3RhcnRDYXNlYCwgYHN0YXJ0c1dpdGhgLCBgc3R1YkFycmF5YCwgYHN0dWJGYWxzZWAsXG4gICAgICogYHN0dWJPYmplY3RgLCBgc3R1YlN0cmluZ2AsIGBzdHViVHJ1ZWAsIGBzdWJ0cmFjdGAsIGBzdW1gLCBgc3VtQnlgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0aW1lc2AsIGB0b0Zpbml0ZWAsIGB0b0ludGVnZXJgLCBgdG9KU09OYCwgYHRvTGVuZ3RoYCxcbiAgICAgKiBgdG9Mb3dlcmAsIGB0b051bWJlcmAsIGB0b1NhZmVJbnRlZ2VyYCwgYHRvU3RyaW5nYCwgYHRvVXBwZXJgLCBgdHJpbWAsXG4gICAgICogYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYHRydW5jYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHVwcGVyQ2FzZWAsXG4gICAgICogYHVwcGVyRmlyc3RgLCBgdmFsdWVgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB3cmFwcGVkLnJlZHVjZShfLmFkZCk7XG4gICAgICogLy8gPT4gNlxuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhIHdyYXBwZWQgdmFsdWUuXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChzcXVhcmUpO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkge1xuICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGNvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICB0aGlzLl9faW5kZXhfXyA9IDA7XG4gICAgICB0aGlzLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpIGFzIHdlbGwgYXMgRVMyMDE1IHRlbXBsYXRlIHN0cmluZ3MuIENoYW5nZSB0aGVcbiAgICAgKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXZhbHVhdGUnOiByZUV2YWx1YXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICAnaW1wb3J0cyc6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHdyYXBwZXJzIGFyZSBpbnN0YW5jZXMgb2YgYGJhc2VMb2Rhc2hgLlxuICAgIGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbG9kYXNoO1xuXG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGVlc19fID0gW107XG4gICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuICAgICAgdGhpcy5fX3ZpZXdzX18gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGxhenkgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsb25lXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlDbG9uZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcy5fX3dyYXBwZWRfXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19kaXJfXyA9IHRoaXMuX19kaXJfXztcbiAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0aGlzLl9fZmlsdGVyZWRfXztcbiAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7XG4gICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXztcbiAgICAgIHJlc3VsdC5fX3ZpZXdzX18gPSBjb3B5QXJyYXkodGhpcy5fX3ZpZXdzX18pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGxhenkgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHJldmVyc2VkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlSZXZlcnNlKCkge1xuICAgICAgaWYgKHRoaXMuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fID0gLTE7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyAqPSAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHVud3JhcHBlZCB2YWx1ZSBmcm9tIGl0cyBsYXp5IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5VmFsdWUoKSB7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksXG4gICAgICAgICAgZGlyID0gdGhpcy5fX2Rpcl9fLFxuICAgICAgICAgIGlzQXJyID0gaXNBcnJheShhcnJheSksXG4gICAgICAgICAgaXNSaWdodCA9IGRpciA8IDAsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gaXNBcnIgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHZpZXcgPSBnZXRWaWV3KDAsIGFyckxlbmd0aCwgdGhpcy5fX3ZpZXdzX18pLFxuICAgICAgICAgIHN0YXJ0ID0gdmlldy5zdGFydCxcbiAgICAgICAgICBlbmQgPSB2aWV3LmVuZCxcbiAgICAgICAgICBsZW5ndGggPSBlbmQgLSBzdGFydCxcbiAgICAgICAgICBpbmRleCA9IGlzUmlnaHQgPyBlbmQgOiAoc3RhcnQgLSAxKSxcbiAgICAgICAgICBpdGVyYXRlZXMgPSB0aGlzLl9faXRlcmF0ZWVzX18sXG4gICAgICAgICAgaXRlckxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHRha2VDb3VudCA9IG5hdGl2ZU1pbihsZW5ndGgsIHRoaXMuX190YWtlQ291bnRfXyk7XG5cbiAgICAgIGlmICghaXNBcnIgfHwgKCFpc1JpZ2h0ICYmIGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlIChsZW5ndGgtLSAmJiByZXNJbmRleCA8IHRha2VDb3VudCkge1xuICAgICAgICBpbmRleCArPSBkaXI7XG5cbiAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sXG4gICAgICAgICAgICAgIGl0ZXJhdGVlID0gZGF0YS5pdGVyYXRlZSxcbiAgICAgICAgICAgICAgdHlwZSA9IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgYExhenlXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgYmFzZUxvZGFzaGAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gICAgICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbiAgICBIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbiAgICBIYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuICAgIEhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG4gICAgSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbiAgICBIYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gW107XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgIGRhdGEucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICAtLXRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX19kYXRhX18gPSB7XG4gICAgICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBhZGRcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAYWxpYXMgcHVzaFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuICAgIFNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuICAgIFNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgICAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgICAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuICAgIFN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG4gICAgU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuICAgIFN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICAgICApKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGUoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbYmFzZVJhbmRvbSgwLCBsZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZVNpemVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGVTaXplKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNodWZmbGUoYXJyYXkpIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICAgICAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWdncmVnYXRlcyBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgb24gYGFjY3VtdWxhdG9yYCB3aXRoIGtleXMgdHJhbnNmb3JtZWRcbiAgICAgKiBieSBgaXRlcmF0ZWVgIGFuZCB2YWx1ZXMgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gICAgICogdmFsdWUgY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWwgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIHNraXAgPSBvYmplY3QgPT0gbnVsbDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHNraXAgPyB1bmRlZmluZWQgOiBnZXQob2JqZWN0LCBwYXRoc1tpbmRleF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPD0gdXBwZXIgPyBudW1iZXIgOiB1cHBlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAgICAgKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gRGVlcCBjbG9uZVxuICAgICAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICAgICAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICAgICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkO1xuICAgICAgfVxuICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgICAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgICAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICAgICAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gICAgICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXMoc291cmNlKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc1RvYCB3aGljaCBhY2NlcHRzIGBwcm9wc2AgdG8gY2hlY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF0sXG4gICAgICAgICAgICBwcmVkaWNhdGUgPSBzb3VyY2Vba2V5XSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKCh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHx8ICFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kZWxheWAgYW5kIGBfLmRlZmVyYCB3aGljaCBhY2NlcHRzIGBhcmdzYFxuICAgICAqIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURlbGF5KGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIHdhaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kaWZmZXJlbmNlYCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgZXhjbHVkaW5nIG11bHRpcGxlIGFycmF5cyBvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICB2YWx1ZXNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhbHVlcyA9IGFycmF5TWFwKHZhbHVlcywgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcyA9IG5ldyBTZXRDYWNoZSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID09IG51bGwgPyB2YWx1ZSA6IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciB2YWx1ZXNJbmRleCA9IHZhbHVlc0xlbmd0aDtcbiAgICAgICAgICB3aGlsZSAodmFsdWVzSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHZhbHVlcywgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoUmlnaHQgPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duUmlnaHQsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZXZlcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSAhIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5tYXhgIGFuZCBgXy5taW5gIHdoaWNoIGFjY2VwdHMgYVxuICAgICAqIGBjb21wYXJhdG9yYCB0byBkZXRlcm1pbmUgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgIT0gbnVsbCAmJiAoY29tcHV0ZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChjdXJyZW50ID09PSBjdXJyZW50ICYmICFpc1N5bWJvbChjdXJyZW50KSlcbiAgICAgICAgICAgICAgOiBjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHZhciBjb21wdXRlZCA9IGN1cnJlbnQsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbGxgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IGxlbmd0aCkgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbmQgPSBzdGFydCA+IGVuZCA/IDAgOiB0b0xlbmd0aChlbmQpO1xuICAgICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIGFycmF5W3N0YXJ0KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsdGVyYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVkaWNhdGU9aXNGbGF0dGVuYWJsZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICAgICAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGRlcHRoID4gMCAmJiBwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAgICAgKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VGb3JgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllc1xuICAgICAqIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvclJpZ2h0ID0gY3JlYXRlQmFzZUZvcih0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25SaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yUmlnaHQob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZnVuY3Rpb25zYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5IG9mXG4gICAgICogYG9iamVjdGAgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZmlsdGVyZWQgZnJvbSBgcHJvcHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZmlsdGVyLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZ1bmN0aW9ucyhvYmplY3QsIHByb3BzKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICAgICAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gICAgICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ndGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPiBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5SYW5nZWAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gbnVtYmVyID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiBudW1iZXIgPCBuYXRpdmVNYXgoc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmludGVyc2VjdGlvbmAsIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnRlcnNlY3Rpb24oYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheXNbMF0ubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICAgICAgY2FjaGVzID0gQXJyYXkob3RoTGVuZ3RoKSxcbiAgICAgICAgICBtYXhMZW5ndGggPSBJbmZpbml0eSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKG90aEluZGV4LS0pIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW290aEluZGV4XTtcbiAgICAgICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICAgICAgYXJyYXkgPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICAgICAgY2FjaGVzW290aEluZGV4XSA9ICFjb21wYXJhdG9yICYmIChpdGVyYXRlZSB8fCAobGVuZ3RoID49IDEyMCAmJiBhcnJheS5sZW5ndGggPj0gMTIwKSlcbiAgICAgICAgICA/IG5ldyBTZXRDYWNoZShvdGhJbmRleCAmJiBhcnJheSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFycmF5ID0gYXJyYXlzWzBdO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBzZWVuID0gY2FjaGVzWzBdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoIShzZWVuXG4gICAgICAgICAgICAgID8gY2FjaGVIYXMoc2VlbiwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzW290aEluZGV4XTtcbiAgICAgICAgICAgIGlmICghKGNhY2hlXG4gICAgICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgICAgIDogaW5jbHVkZXMoYXJyYXlzW290aEluZGV4XSwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZlcnRgIGFuZCBgXy5pbnZlcnRCeWAgd2hpY2ggaW52ZXJ0c1xuICAgICAqIGBvYmplY3RgIHdpdGggdmFsdWVzIHRyYW5zZm9ybWVkIGJ5IGBpdGVyYXRlZWAgYW5kIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgaXRlcmF0ZWUodmFsdWUpLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZva2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIG1ldGhvZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHZhciBmdW5jID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFwcGx5KGZ1bmMsIG9iamVjdCwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJyYXlCdWZmZXJgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJyYXlCdWZmZXJUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNEYXRlYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0RhdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGRhdGVUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICAgICAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICAgICAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgICAgIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICAgICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgICAgIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgICAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgICAgIG9iaklzT2JqID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICAgICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNSZWdFeHBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1JlZ0V4cCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gcmVnZXhwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgICAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgICAgIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgICAgIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5sdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPCBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICAgICAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgKHNyY0luZGV4ICYmIGlzRnVuY3Rpb24ob2JqVmFsdWUpKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm50aGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTnRoKGFycmF5LCBuKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gaXNJbmRleChuLCBsZW5ndGgpID8gYXJyYXlbbl0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLmxlbmd0aCA/IGl0ZXJhdGVlcyA6IFtpZGVudGl0eV0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICB2YWxJc05hTiA9IHZhbHVlICE9PSB2YWx1ZSxcbiAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKSxcbiAgICAgICAgICB2YWxJc1VuZGVmaW5lZCA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIHZhciBtaWQgPSBuYXRpdmVGbG9vcigobG93ICsgaGlnaCkgLyAyKSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUoYXJyYXlbbWlkXSksXG4gICAgICAgICAgICBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gY29tcHV0ZWQgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IGNvbXB1dGVkID09PSBjb21wdXRlZCxcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2woY29tcHV0ZWQpO1xuXG4gICAgICAgIGlmICh2YWxJc05hTikge1xuICAgICAgICAgIHZhciBzZXRMb3cgPSByZXRIaWdoZXN0IHx8IG90aElzUmVmbGV4aXZlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgKHJldEhpZ2hlc3QgfHwgb3RoSXNEZWZpbmVkKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc051bGwpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgIW90aElzTnVsbCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNTeW1ib2wpO1xuICAgICAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXRMb3cpIHtcbiAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNaW4oaGlnaCwgTUFYX0FSUkFZX0lOREVYKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRVbmlxYCBhbmQgYF8uc29ydGVkVW5pcUJ5YCB3aXRob3V0XG4gICAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkVW5pcShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAoIWluZGV4IHx8ICFlcShjb21wdXRlZCwgc2VlbikpIHtcbiAgICAgICAgICB2YXIgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvTnVtYmVyYCB3aGljaCBkb2Vzbid0IGVuc3VyZSBjb3JyZWN0XG4gICAgICogY29udmVyc2lvbnMgb2YgYmluYXJ5LCBoZXhhZGVjaW1hbCwgb3Igb2N0YWwgc3RyaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIHJldHVybiArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gICAgICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHNlZW4gPSByZXN1bHQ7XG5cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICB2YXIgc2V0ID0gaXRlcmF0ZWUgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICAgICAgaWYgKHNldCkge1xuICAgICAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgc2VlbiA9IG5ldyBTZXRDYWNoZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWVuID0gaXRlcmF0ZWUgPyBbXSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgZGVsZXRlIG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICByZXR1cm4gYmFzZVNldChvYmplY3QsIHBhdGgsIHVwZGF0ZXIoYmFzZUdldChvYmplY3QsIHBhdGgpKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRyb3BXaGlsZWAgYW5kIGBfLnRha2VXaGlsZWBcbiAgICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Ryb3BdIFNwZWNpZnkgZHJvcHBpbmcgZWxlbWVudHMgaW5zdGVhZCBvZiB0YWtpbmcgdGhlbS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIGlzRHJvcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG5cbiAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpICYmXG4gICAgICAgIHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHt9XG5cbiAgICAgIHJldHVybiBpc0Ryb3BcbiAgICAgICAgPyBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyAwIDogaW5kZXgpLCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogbGVuZ3RoKSlcbiAgICAgICAgOiBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiAwKSwgKGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHdyYXBwZXJWYWx1ZWAgd2hpY2ggcmV0dXJucyB0aGUgcmVzdWx0IG9mXG4gICAgICogcGVyZm9ybWluZyBhIHNlcXVlbmNlIG9mIGFjdGlvbnMgb24gdGhlIHVud3JhcHBlZCBgdmFsdWVgLCB3aGVyZSBlYWNoXG4gICAgICogc3VjY2Vzc2l2ZSBhY3Rpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhY3Rpb25zIEFjdGlvbnMgdG8gcGVyZm9ybSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXcmFwcGVyVmFsdWUodmFsdWUsIGFjdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVJlZHVjZShhY3Rpb25zLCBmdW5jdGlvbihyZXN1bHQsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsIGFycmF5UHVzaChbcmVzdWx0XSwgYWN0aW9uLmFyZ3MpKTtcbiAgICAgIH0sIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLnhvcmAsIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVhvcihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlVW5pcShhcnJheXNbMF0pIDogW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbaW5kZXhdLFxuICAgICAgICAgICAgb3RoSW5kZXggPSAtMTtcblxuICAgICAgICB3aGlsZSAoKytvdGhJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChvdGhJbmRleCAhPSBpbmRleCkge1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGJhc2VEaWZmZXJlbmNlKHJlc3VsdFtpbmRleF0gfHwgYXJyYXksIGFycmF5c1tvdGhJbmRleF0sIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihyZXN1bHQsIDEpLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnppcE9iamVjdGAgd2hpY2ggYXNzaWducyB2YWx1ZXMgdXNpbmcgYGFzc2lnbkZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduRnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VaaXBPYmplY3QocHJvcHMsIHZhbHVlcywgYXNzaWduRnVuYykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHZhbHNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpbmRleCA8IHZhbHNMZW5ndGggPyB2YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICBhc3NpZ25GdW5jKHJlc3VsdCwgcHJvcHNbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpID8gdmFsdWUgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGBiYXNlUmVzdGAgYWxpYXMgd2hpY2ggY2FuIGJlIHJlcGxhY2VkIHdpdGggYGlkZW50aXR5YCBieSBtb2R1bGVcbiAgICAgKiByZXBsYWNlbWVudCBwbHVnaW5zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgY2FzdFJlc3QgPSBiYXNlUmVzdDtcblxuICAgIC8qKlxuICAgICAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kO1xuICAgICAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYGNsZWFyVGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL2NsZWFyVGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gaWQgVGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0IG9mIHRoZSB0aW1lciB0byBjbGVhci5cbiAgICAgKi9cbiAgICB2YXIgY2xlYXJUaW1lb3V0ID0gY3R4Q2xlYXJUaW1lb3V0IHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcm9vdC5jbGVhclRpbWVvdXQoaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICAgICAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgdmFsdWVzIHRvIHNvcnQgdGhlbSBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICAgICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgICB2YXIgdmFsSXNEZWZpbmVkID0gdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKTtcblxuICAgICAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXIsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgICAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAgICAgKHZhbElzU3ltYm9sICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSAmJiAhb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhdmFsSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sICYmICFvdGhJc1N5bWJvbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCFvdGhJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICAgICAqIGFuZCBzdGFibGUgc29ydCB0aGVtLlxuICAgICAqXG4gICAgICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAgICAgKiBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvciBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyXG4gICAgICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFuW118c3RyaW5nW119IG9yZGVycyBUaGUgb3JkZXIgdG8gc29ydCBieSBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICAgICAgb3RoQ3JpdGVyaWEgPSBvdGhlci5jcml0ZXJpYSxcbiAgICAgICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG9yZGVyID0gb3JkZXJzW2luZGV4XTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAgIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgICAvLyBgb2JqZWN0YCBhbmQgYG90aGVyYC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBhbHNvIGVuc3VyZXMgYSBzdGFibGUgc29ydCBpbiBWOCBhbmQgb3RoZXIgZW5naW5lcy5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLFxuICAgICAqIHBsYWNlaG9sZGVycywgYW5kIHByb3ZpZGVkIGFyZ3VtZW50cyBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVmdExlbmd0aCArIHJhbmdlTGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAocmFuZ2VMZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAgICAgKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0luZGV4ID0gLTEsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIHJpZ2h0SW5kZXggPSAtMSxcbiAgICAgICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkocmFuZ2VMZW5ndGggKyByaWdodExlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCByYW5nZUxlbmd0aCkge1xuICAgICAgICByZXN1bHRbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXQgPSBhcmdzSW5kZXg7XG4gICAgICB3aGlsZSAoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgICAgIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gICAgICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXcpIHtcbiAgICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uZ3JvdXBCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaW5pdGlhbGl6ZXJdIFRoZSBhY2N1bXVsYXRvciBvYmplY3QgaW5pdGlhbGl6ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdG9yKHNldHRlciwgaW5pdGlhbGl6ZXIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUFnZ3JlZ2F0b3IgOiBiYXNlQWdncmVnYXRvcixcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gaW5pdGlhbGl6ZXIgPyBpbml0aWFsaXplcigpIDoge307XG5cbiAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgc2V0dGVyLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGFjY3VtdWxhdG9yKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ubG93ZXJGaXJzdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgU3RyaW5nYCBjYXNlIG1ldGhvZCB0byB1c2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgY2hyID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgICAgIDogc3RyaW5nLmNoYXJBdCgwKTtcblxuICAgICAgICB2YXIgdHJhaWxpbmcgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgICAgICA6IHN0cmluZy5zbGljZSgxKTtcblxuICAgICAgICByZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGluc3RhbmNlIG9mIGBDdG9yYCByZWdhcmRsZXNzIG9mXG4gICAgICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN0b3IoQ3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBVc2UgYSBgc3dpdGNoYCBzdGF0ZW1lbnQgdG8gd29yayB3aXRoIGNsYXNzIGNvbnN0cnVjdG9ycy4gU2VlXG4gICAgICAgIC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtZnVuY3Rpb24tb2JqZWN0cy1jYWxsLXRoaXNhcmd1bWVudC1hcmd1bWVudHNsaXN0XG4gICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEN0b3I7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgY2FzZSA3OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSksXG4gICAgICAgICAgICByZXN1bHQgPSBDdG9yLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcblxuICAgICAgICAvLyBNaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvci5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IHRoaXNCaW5kaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gZW5hYmxlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFyaXR5IFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSkge1xuICAgICAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKTtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaG9sZGVycyA9IChsZW5ndGggPCAzICYmIGFyZ3NbMF0gIT09IHBsYWNlaG9sZGVyICYmIGFyZ3NbbGVuZ3RoIC0gMV0gIT09IHBsYWNlaG9sZGVyKVxuICAgICAgICAgID8gW11cbiAgICAgICAgICA6IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcblxuICAgICAgICBsZW5ndGggLT0gaG9sZGVycy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBhcmdzLCBob2xkZXJzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkgLSBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmluZGAgb3IgYF8uZmluZExhc3RgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5kSW5kZXhGdW5jIFRoZSBmdW5jdGlvbiB0byBmaW5kIHRoZSBjb2xsZWN0aW9uIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZChmaW5kSW5kZXhGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgICAgICBjb2xsZWN0aW9uID0ga2V5cyhjb2xsZWN0aW9uKTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleEZ1bmMoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5mbG93YCBvciBgXy5mbG93UmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oZnVuY3MpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcblxuICAgICAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICAgICAgZnVuY3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jc1tpbmRleF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByZXJlcSAmJiAhd3JhcHBlciAmJiBnZXRGdW5jTmFtZShmdW5jKSA9PSAnd3JhcHBlcicpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuXG4gICAgICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgICAgIGRhdGEgPSBmdW5jTmFtZSA9PSAnd3JhcHBlcicgPyBnZXREYXRhKGZ1bmMpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJlxuICAgICAgICAgICAgICAgIGRhdGFbMV0gPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykgJiZcbiAgICAgICAgICAgICAgICAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gKGZ1bmMubGVuZ3RoID09IDEgJiYgaXNMYXppYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpXG4gICAgICAgICAgICAgIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcblxuICAgICAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgICByZXN1bHQgPSBsZW5ndGggPyBmdW5jc1tpbmRleF0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcblxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jc1tpbmRleF0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLCBwYXJ0aWFsIGFwcGxpY2F0aW9uLCBhbmQgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc1JpZ2h0XSBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZFxuICAgICAqICB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVIeWJyaWQoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNBcnkgPSBiaXRtYXNrICYgV1JBUF9BUllfRkxBRyxcbiAgICAgICAgICBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRyxcbiAgICAgICAgICBpc0N1cnJpZWQgPSBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyksXG4gICAgICAgICAgaXNGbGlwID0gYml0bWFzayAmIFdSQVBfRkxJUF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKSxcbiAgICAgICAgICAgICAgaG9sZGVyc0NvdW50ID0gY291bnRIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHMpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnNDb3VudDtcbiAgICAgICAgaWYgKGlzQ3VycmllZCAmJiBsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB0aGlzQXJnLFxuICAgICAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgICAgIGZuID0gaXNCaW5kS2V5ID8gdGhpc0JpbmRpbmdbZnVuY10gOiBmdW5jO1xuXG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICBpZiAoYXJnUG9zKSB7XG4gICAgICAgICAgYXJncyA9IHJlb3JkZXIoYXJncywgYXJnUG9zKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZsaXAgJiYgbGVuZ3RoID4gMSkge1xuICAgICAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FyeSAmJiBhcnkgPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSB7XG4gICAgICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5pbnZlcnRCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0b0l0ZXJhdGVlIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZlcnRlcihzZXR0ZXIsIHRvSXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIHRvSXRlcmF0ZWUoaXRlcmF0ZWUpLCB7fSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgdXNlZCBmb3IgYHVuZGVmaW5lZGAgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlTWF0aE9wZXJhdGlvbihvcGVyYXRvciwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvU3RyaW5nKG90aGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9OdW1iZXIob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLm92ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcnJheUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgb3ZlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVPdmVyKGFycmF5RnVuYykge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGl0ZXJhdGVlcykge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG4gICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgdmFyIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBhcnJheUZ1bmMoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYCBiYXNlZCBvbiBgbGVuZ3RoYC4gVGhlIGBjaGFyc2Agc3RyaW5nXG4gICAgICogaXMgdHJ1bmNhdGVkIGlmIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBleGNlZWRzIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFkZGluZyhsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBjaGFycyA9IGNoYXJzID09PSB1bmRlZmluZWQgPyAnICcgOiBiYXNlVG9TdHJpbmcoY2hhcnMpO1xuXG4gICAgICB2YXIgY2hhcnNMZW5ndGggPSBjaGFycy5sZW5ndGg7XG4gICAgICBpZiAoY2hhcnNMZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBjaGFyc0xlbmd0aCA/IGJhc2VSZXBlYXQoY2hhcnMsIGxlbmd0aCkgOiBjaGFycztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlUmVwZWF0KGNoYXJzLCBuYXRpdmVDZWlsKGxlbmd0aCAvIHN0cmluZ1NpemUoY2hhcnMpKSk7XG4gICAgICByZXR1cm4gaGFzVW5pY29kZShjaGFycylcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShyZXN1bHQpLCAwLCBsZW5ndGgpLmpvaW4oJycpXG4gICAgICAgIDogcmVzdWx0LnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZ1xuICAgICAqIG9mIGB0aGlzQXJnYCBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVmdExlbmd0aCArIGFyZ3NMZW5ndGgpLFxuICAgICAgICAgICAgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuXG4gICAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChhcmdzTGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1srK2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8ucmFuZ2VgIG9yIGBfLnJhbmdlUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByYW5nZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSYW5nZShmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICAgICAgZW5kID0gc3RlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBzdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkID8gKHN0YXJ0IDwgZW5kID8gMSA6IC0xKSA6IHRvRmluaXRlKHN0ZXApO1xuICAgICAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcmVsYXRpb25hbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZWxhdGlvbmFsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKG9wZXJhdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIGlmICghKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgb3RoZXIgPSB0b051bWJlcihvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBjb250aW51ZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBGdW5jIFRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGBmdW5jYCB3cmFwcGVyLlxuICAgICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQ3VycnkgPSBiaXRtYXNrICYgV1JBUF9DVVJSWV9GTEFHLFxuICAgICAgICAgIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdIb2xkZXJzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogaG9sZGVycyxcbiAgICAgICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBwYXJ0aWFscyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IHBhcnRpYWxzO1xuXG4gICAgICBiaXRtYXNrIHw9IChpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX0ZMQUcgOiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICBiaXRtYXNrICY9IH4oaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHIDogV1JBUF9QQVJUSUFMX0ZMQUcpO1xuXG4gICAgICBpZiAoIShiaXRtYXNrICYgV1JBUF9DVVJSWV9CT1VORF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIG5ld1BhcnRpYWxzLCBuZXdIb2xkZXJzLCBuZXdQYXJ0aWFsc1JpZ2h0LFxuICAgICAgICBuZXdIb2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHdyYXBGdW5jLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgICAgICBzZXREYXRhKHJlc3VsdCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5yb3VuZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgTWF0aGAgbWV0aG9kIHRvIHVzZSB3aGVuIHJvdW5kaW5nLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJvdW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJvdW5kKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gTWF0aFttZXRob2ROYW1lXTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihudW1iZXIsIHByZWNpc2lvbikge1xuICAgICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDAgOiBuYXRpdmVNaW4odG9JbnRlZ2VyKHByZWNpc2lvbiksIDI5Mik7XG4gICAgICAgIGlmIChwcmVjaXNpb24pIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAgICAgKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHNhZmUgaW50ZWdlci4gQSBzYWZlIGludGVnZXIgY2FuIGJlIGNvbXBhcmVkIGFuZFxuICAgICAqIHJlcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gOTAwNzE5OTI1NDc0MDk5MVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKG51bGwpO1xuICAgICAqIC8vID0+ICcnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKC0wKTtcbiAgICAgKiAvLyA9PiAnLTAnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBzb3VyY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYHBhdGhzYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXy5hdChvYmplY3QsIFsnYVswXS5iLmMnLCAnYVsxXSddKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgYXQgPSBmbGF0UmVzdChiYXNlQXQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIGdpdmVuLCBpdHMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXNcbiAgICAgKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA9PSBudWxsID8gcmVzdWx0IDogYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2VcbiAgICAgKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAgICAgKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogT25jZSBhIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCB2YWx1ZXMgb2YgdGhlIHNhbWUgcHJvcGVydHkgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICB2YXIgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXNJbihzb3VyY2UpO1xuICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IDIsICdjJzogMyB9IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICByZXR1cm4gYXBwbHkobWVyZ2VXaXRoLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zICdwZWJibGVzJyBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93blJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAgICAgKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3Iob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2MnLCAnYicsIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvckluYCBsb2dzICdhJywgJ2InLCB0aGVuICdjJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAgICAgKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdiJyB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIHRoZW4gJ2InLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc0luXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGFuZCBpbmhlcml0ZWRcbiAgICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9uc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gICAgICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICogSWYgYG9iamVjdGAgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlcywgc3Vic2VxdWVudCB2YWx1ZXMgb3ZlcndyaXRlXG4gICAgICogcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnQob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gICAgICovXG4gICAgdmFyIGludmVydCA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXS5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICB9XG4gICAgfSwgZ2V0SXRlcmF0ZWUpO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmludm9rZShvYmplY3QsICdhWzBdLmIuYy5zbGljZScsIDEsIDMpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIHZhciBpbnZva2UgPSBiYXNlUmVzdChiYXNlSW52b2tlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICAgICAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcFZhbHVlc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAgICAgKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBLZXlzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICAgICAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gICAgICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gICAgICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVyZ2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBtZXJnZWQgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBhbmQgc291cmNlXG4gICAgICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAgICAgKiBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggc2l4IGFyZ3VtZW50czpcbiAgICAgKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiBvYmpWYWx1ZS5jb25jYXQoc3JjVmFsdWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogWzFdLCAnYic6IFsyXSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlV2l0aChvYmplY3QsIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgcGF0aHMgb2YgYG9iamVjdGAgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gb21pdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gICAgICBwYXRocyA9IGFycmF5TWFwKHBhdGhzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfSk7XG4gICAgICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tCeWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mXG4gICAgICogdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYG9iamVjdGAgdGhhdFxuICAgICAqIGBwcmVkaWNhdGVgIGRvZXNuJ3QgcmV0dXJuIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXRCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9taXRCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHBpY2tCeShvYmplY3QsIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBgb2JqZWN0YCBwcm9wZXJ0aWVzIGBwcmVkaWNhdGVgIHJldHVybnNcbiAgICAgKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoZ2V0QWxsS2V5c0luKG9iamVjdCksIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICAgIH0pO1xuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhXG4gICAgICogZnVuY3Rpb24gaXQncyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGxvb3AgaXMgZW50ZXJlZCB3aGVuIHBhdGggaXMgZW1wdHkuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICBvYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFt0b0tleShwYXRoW2luZGV4XSldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICAgICAqIGl0J3MgY3JlYXRlZC4gQXJyYXlzIGFyZSBjcmVhdGVkIGZvciBtaXNzaW5nIGluZGV4IHByb3BlcnRpZXMgd2hpbGUgb2JqZWN0c1xuICAgICAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gICAgICogYHBhdGhgIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAnYVswXS5iLmMnLCA0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnNldFdpdGgob2JqZWN0LCAnWzBdWzFdJywgJ2EnLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdpdGgob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAgICAgKiB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXAgb3Igc2V0LCBpdHNcbiAgICAgKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnNcbiAgICAgKiBmb3IgYG9iamVjdGAgd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwXG4gICAgICogb3Igc2V0LCBpdHMgZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc0luXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlyc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICAgICAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAgICAgKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgICAgIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvcGVydHkgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogNyB9IH1dIH07XG4gICAgICogXy51bnNldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udW5zZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdHJ1ZSA6IGJhc2VVbnNldChvYmplY3QsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBhY2NlcHRzIGB1cGRhdGVyYCB0byBwcm9kdWNlIHRoZVxuICAgICAqIHZhbHVlIHRvIHNldC4gVXNlIGBfLnVwZGF0ZVdpdGhgIHRvIGN1c3RvbWl6ZSBgcGF0aGAgY3JlYXRpb24uIFRoZSBgdXBkYXRlcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ2FbMF0uYi5jJywgZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIG47IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gOVxuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAneFswXS55LnonLCBmdW5jdGlvbihuKSB7IHJldHVybiBuID8gbiArIDEgOiAwOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVwZGF0ZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlV2l0aChvYmplY3QsICdbMF1bMV0nLCBfLmNvbnN0YW50KCdhJyksIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlciksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5XG4gICAgICogdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IC01XG4gICAgICpcbiAgICAgKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAgICAgKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gICAgICogbmVnYXRpdmUgcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgfVxuICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAgICAgKiBpcyByZXR1cm5lZC4gSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbG93ZXJgIG9yIGB1cHBlcmAgYXJlXG4gICAgICogZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyPTBdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyLCBmbG9hdGluZykge1xuICAgICAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICAgICAgdXBwZXIgPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBwZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSB1cHBlcjtcbiAgICAgICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG93ZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQgJiYgdXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIHVwcGVyID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cHBlciA9IHRvRmluaXRlKHVwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID4gdXBwZXIpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1cHBlcjtcbiAgICAgICAgdXBwZXIgPSB0ZW1wO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAgICAgKiB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAgICAgKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAgICAgKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gICAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICAgICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBlbmRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICAgICAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAgICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgICAqIFhTUyB2ZWN0b3JzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJeXCIsIFwiJFwiLCBcIlxcXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsXG4gICAgICogXCI/XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIGFuZCBcInxcIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczovL2xvZGFzaFxcLmNvbS9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzUmVnRXhwQ2hhci50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGcmVkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnZlJFRCdcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9Mb3dlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc3RyTGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICtcbiAgICAgICAgc3RyaW5nICtcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSByaWdodCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSArIHN0cmluZylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGFcbiAgICAgKiBoZXhhZGVjaW1hbCwgaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZVxuICAgICAqIFtFUzUgaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4yKSBvZiBgcGFyc2VJbnRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXg9MTBdIFRoZSByYWRpeCB0byBpbnRlcnByZXQgYHZhbHVlYCBieS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCB8fCByYWRpeCA9PSBudWxsKSB7XG4gICAgICAgIHJhZGl4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXgpIHtcbiAgICAgICAgcmFkaXggPSArcmFkaXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQodG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyksIHJhZGl4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdHMgdGhlIGdpdmVuIHN0cmluZyBgbmAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmVwZWF0KHRvU3RyaW5nKHN0cmluZyksIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgc3RyaW5nYCB3aXRoIGByZXBsYWNlbWVudGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNyZXBsYWNlYF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3JlcGxhY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gcmVwbGFjZW1lbnQgVGhlIG1hdGNoIHJlcGxhY2VtZW50LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBsYWNlKCdIaSBGcmVkJywgJ0ZyZWQnLCAnQmFybmV5Jyk7XG4gICAgICogLy8gPT4gJ0hpIEJhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG5cbiAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IDMgPyBzdHJpbmcgOiBzdHJpbmcucmVwbGFjZShhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgcmVzdWx0cyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCAmJiB0eXBlb2YgbGltaXQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBsaW1pdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmICghbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlcGFyYXRvciA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIHN0cmluZy5sZW5ndGgpO1xuXG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICAgKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICAgICAqIFwiZXNjYXBlXCIgZGVsaW1pdGVycywgYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdCBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy4gRGF0YVxuICAgICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAgICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gICAgICogIFRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAgICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzPV8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXVxuICAgICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gICAgICogIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICAgICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gICAgICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgICAqICAgdmFyIEpTVCA9IHtcXFxuICAgICAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICAgICAqICAgfTtcXFxuICAgICAqICcpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoJ3NvdXJjZVVSTCcgaW4gb3B0aW9uc1xuICAgICAgICAgID8gb3B0aW9ucy5zb3VyY2VVUkxcbiAgICAgICAgICA6ICgnbG9kYXNoLnRlbXBsYXRlU291cmNlc1snICsgKCsrdGVtcGxhdGVDb3VudGVyKSArICddJylcbiAgICAgICAgKSArICdcXG4nO1xuXG4gICAgICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIFRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgbmVlZHMgYG1hdGNoYCByZXR1cm5lZCBpblxuICAgICAgICAvLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgICAgLy8gSWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluLlxuICAgICAgdmFyIHZhcmlhYmxlID0gb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIGxvd2VyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b0xvd2VyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9Mb3dlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tZm9vLWJhci0tJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vYmFyJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdfX2Zvb19iYXJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xvd2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIHVwcGVyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9VcHBlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tRk9PLUJBUi0tJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PQkFSJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdfX0ZPT19CQVJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1VwcGVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gICAgICogLy8gPT4gWydmb28nLCAnYmFyJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltRW5kLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZVxuICAgICAqIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdCB0byBgc3JjVmFsdWVgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZVxuICAgICAqIG9iamVjdCB2YWx1ZSBpcyBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3RcbiAgICAgKiBgc3JjVmFsdWVgIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlXG4gICAgICogYF8uaXNFcXVhbGAgZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZChvYmplY3RzLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgYmFzZUNsb25lKHNyY1ZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMikgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDEpIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZCgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoWydhJywgJ2InXSkpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciBtZXRob2QgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1ldGhvZGA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiB0aGUgbWV0aG9kIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBfLnRpbWVzKDMsIF8uY29uc3RhbnQpLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZE9mID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlXG4gICAgICogb2JqZWN0IHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24sIHRoZW4gbWV0aG9kc1xuICAgICAqIGFyZSBhZGRlZCB0byBpdHMgcHJvdG90eXBlIGFzIHdlbGwuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVXNlIGBfLnJ1bkluQ29udGV4dGAgdG8gY3JlYXRlIGEgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdG9cbiAgICAgKiBhdm9pZCBjb25mbGljdHMgY2F1c2VkIGJ5IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBbb2JqZWN0PWxvZGFzaF0gVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgZnVuY3Rpb25zIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoYWluPXRydWVdIFNwZWNpZnkgd2hldGhlciBtaXhpbnMgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiB2b3dlbHMoc3RyaW5nKSB7XG4gICAgICogICByZXR1cm4gXy5maWx0ZXIoc3RyaW5nLCBmdW5jdGlvbih2KSB7XG4gICAgICogICAgIHJldHVybiAvW2FlaW91XS9pLnRlc3Qodik7XG4gICAgICogICB9KTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9KTtcbiAgICAgKiBfLnZvd2VscygnZnJlZCcpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaXhpbihvYmplY3QsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpLFxuICAgICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIHByb3BzKTtcblxuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCAmJlxuICAgICAgICAgICEoaXNPYmplY3Qoc291cmNlKSAmJiAobWV0aG9kTmFtZXMubGVuZ3RoIHx8ICFwcm9wcy5sZW5ndGgpKSkge1xuICAgICAgICBvcHRpb25zID0gc291cmNlO1xuICAgICAgICBzb3VyY2UgPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdCA9IHRoaXM7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgICB9XG4gICAgICB2YXIgY2hhaW4gPSAhKGlzT2JqZWN0KG9wdGlvbnMpICYmICdjaGFpbicgaW4gb3B0aW9ucykgfHwgISFvcHRpb25zLmNoYWluLFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24ob2JqZWN0KTtcblxuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBmdW5jID0gc291cmNlW21ldGhvZE5hbWVdO1xuICAgICAgICBvYmplY3RbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICBpZiAoaXNGdW5jKSB7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX187XG4gICAgICAgICAgICBpZiAoY2hhaW4gfHwgY2hhaW5BbGwpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCh0aGlzLl9fd3JhcHBlZF9fKSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnMgPSByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG5cbiAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHsgJ2Z1bmMnOiBmdW5jLCAnYXJncyc6IGFyZ3VtZW50cywgJ3RoaXNBcmcnOiBvYmplY3QgfSk7XG4gICAgICAgICAgICAgIHJlc3VsdC5fX2NoYWluX18gPSBjaGFpbkFsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9iamVjdCwgYXJyYXlQdXNoKFt0aGlzLnZhbHVlKCldLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvXG4gICAgICogdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgbG9kYXNoID0gXy5ub0NvbmZsaWN0KCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgIGlmIChyb290Ll8gPT09IHRoaXMpIHtcbiAgICAgICAgcm9vdC5fID0gb2xkRGFzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIGFyZ3VtZW50IGF0IGluZGV4IGBuYC4gSWYgYG5gIGlzIG5lZ2F0aXZlLFxuICAgICAqIHRoZSBudGggYXJndW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFzcy10aHJ1IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKDEpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoLTIpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGhBcmcobikge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHJldHVybiBiYXNlTnRoKGFyZ3MsIG4pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgaXRlcmF0ZWVzYCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXNcbiAgICAgKiBhbmQgcmV0dXJucyB0aGVpciByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlcihbTWF0aC5tYXgsIE1hdGgubWluXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDEsIDIsIDMsIDQpO1xuICAgICAqIC8vID0+IFs0LCAxXVxuICAgICAqL1xuICAgIHZhciBvdmVyID0gY3JlYXRlT3ZlcihhcnJheU1hcCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbGwqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJFdmVyeShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlckV2ZXJ5ID0gY3JlYXRlT3ZlcihhcnJheUV2ZXJ5KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFueSoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gKGxvZGFzaEZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICAgIG5hbWVzID0gcmVhbE5hbWVzW2tleV0gfHwgKHJlYWxOYW1lc1trZXldID0gW10pO1xuXG4gICAgICAgIG5hbWVzLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwiIGltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XHJcbiBpbXBvcnQgJy4vc3R5bGUuY3NzJztcclxuIGltcG9ydCAnLi9jb21wb25lbnQtY3NzL2FkZG5ldy1wb3B1cC5jc3MnO1xyXG5cclxuaW1wb3J0IEhlYWRlciBmcm9tICcuL2NvbXBvbmVudC9oZWFkZXIuanN4JztcclxuaW1wb3J0IENvbnRlbnQgZnJvbSAnLi9jb21wb25lbnQvY29udGVudC5qc3gnO1xyXG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vY29tcG9uZW50L2Zvb3Rlci5qc3gnO1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQge3JlbmRlcn0gZnJvbSAncmVhY3QtZG9tJ1xyXG5cclxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuXHJcblxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZSA9IFwiYXBwXCI+XHJcbiAgICAgICAgPEhlYWRlci8+XHJcbiAgICAgICAgPENvbnRlbnQvPlxyXG4gICAgICAgIDxGb290ZXIvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5yZW5kZXIoPEFwcC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKVxyXG4iXSwic291cmNlUm9vdCI6IiJ9